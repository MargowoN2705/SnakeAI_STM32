
Snake_AI_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007548  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ed0  080076e0  080076e0  000086e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5b0  0800b5b0  0000d510  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5b0  0800b5b0  0000c5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5b8  0800b5b8  0000d510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5b8  0800b5b8  0000c5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b5bc  0800b5bc  0000c5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000510  20000000  0800b5c0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aa64  20000520  0800bad0  0000d520  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000af84  0800bad0  0000df84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d510  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e784  00000000  00000000  0000d540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f27  00000000  00000000  0001bcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0001ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a39  00000000  00000000  0001f9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000061d9  00000000  00000000  000203f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f49  00000000  00000000  000265d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106525  00000000  00000000  0003951b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0013fa40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004054  00000000  00000000  0013fac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00143b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000520 	.word	0x20000520
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076c0 	.word	0x080076c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000524 	.word	0x20000524
 80001cc:	080076c0 	.word	0x080076c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <gameInit>:
static Point snake[MAX_SNAKE_LENGTH];
static int snake_length;
static Dir direction;
static Point food;

void gameInit(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0

    snake_length = 3;
 8000276:	4b19      	ldr	r3, [pc, #100]	@ (80002dc <gameInit+0x6c>)
 8000278:	2203      	movs	r2, #3
 800027a:	601a      	str	r2, [r3, #0]

    snake[0].x = LCD_WIDTH/(2*BLOCK_SIZE);
 800027c:	4b18      	ldr	r3, [pc, #96]	@ (80002e0 <gameInit+0x70>)
 800027e:	220a      	movs	r2, #10
 8000280:	601a      	str	r2, [r3, #0]
    snake[0].y = LCD_HEIGHT/(2*BLOCK_SIZE);
 8000282:	4b17      	ldr	r3, [pc, #92]	@ (80002e0 <gameInit+0x70>)
 8000284:	2208      	movs	r2, #8
 8000286:	605a      	str	r2, [r3, #4]

    for (int i = 1; i < snake_length; i++) {
 8000288:	2301      	movs	r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	e011      	b.n	80002b2 <gameInit+0x42>
        snake[i].x = snake[0].x - i;
 800028e:	4b14      	ldr	r3, [pc, #80]	@ (80002e0 <gameInit+0x70>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	1ad2      	subs	r2, r2, r3
 8000296:	4912      	ldr	r1, [pc, #72]	@ (80002e0 <gameInit+0x70>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        snake[i].y = snake[0].y;
 800029e:	4b10      	ldr	r3, [pc, #64]	@ (80002e0 <gameInit+0x70>)
 80002a0:	685a      	ldr	r2, [r3, #4]
 80002a2:	490f      	ldr	r1, [pc, #60]	@ (80002e0 <gameInit+0x70>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	00db      	lsls	r3, r3, #3
 80002a8:	440b      	add	r3, r1
 80002aa:	605a      	str	r2, [r3, #4]
    for (int i = 1; i < snake_length; i++) {
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <gameInit+0x6c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	dbe8      	blt.n	800028e <gameInit+0x1e>
    }

    direction = RIGHT;
 80002bc:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <gameInit+0x74>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
    place_food();
 80002c2:	f000 f811 	bl	80002e8 <place_food>
    lcd_clear_screen(BLACK);
 80002c6:	2000      	movs	r0, #0
 80002c8:	f000 fe1c 	bl	8000f04 <lcd_clear_screen>
    draw_game();
 80002cc:	f000 fab8 	bl	8000840 <draw_game>
    lcd_copy();
 80002d0:	f000 fe3a 	bl	8000f48 <lcd_copy>
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000085c 	.word	0x2000085c
 80002e0:	2000053c 	.word	0x2000053c
 80002e4:	20000860 	.word	0x20000860

080002e8 <place_food>:

void place_food(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
    int valid = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	607b      	str	r3, [r7, #4]
    while (!valid) {
 80002f2:	e03c      	b.n	800036e <place_food+0x86>
        food.x = rand() % (LCD_WIDTH / BLOCK_SIZE);
 80002f4:	f006 fa08 	bl	8006708 <rand>
 80002f8:	4601      	mov	r1, r0
 80002fa:	4b21      	ldr	r3, [pc, #132]	@ (8000380 <place_food+0x98>)
 80002fc:	fb83 2301 	smull	r2, r3, r3, r1
 8000300:	10da      	asrs	r2, r3, #3
 8000302:	17cb      	asrs	r3, r1, #31
 8000304:	1ad2      	subs	r2, r2, r3
 8000306:	4613      	mov	r3, r2
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	4413      	add	r3, r2
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	1aca      	subs	r2, r1, r3
 8000310:	4b1c      	ldr	r3, [pc, #112]	@ (8000384 <place_food+0x9c>)
 8000312:	601a      	str	r2, [r3, #0]
        food.y = rand() % (LCD_HEIGHT / BLOCK_SIZE);
 8000314:	f006 f9f8 	bl	8006708 <rand>
 8000318:	4603      	mov	r3, r0
 800031a:	425a      	negs	r2, r3
 800031c:	f003 030f 	and.w	r3, r3, #15
 8000320:	f002 020f 	and.w	r2, r2, #15
 8000324:	bf58      	it	pl
 8000326:	4253      	negpl	r3, r2
 8000328:	4a16      	ldr	r2, [pc, #88]	@ (8000384 <place_food+0x9c>)
 800032a:	6053      	str	r3, [r2, #4]

        valid = 1;
 800032c:	2301      	movs	r3, #1
 800032e:	607b      	str	r3, [r7, #4]
        for (int i = 0; i < snake_length; i++) {
 8000330:	2300      	movs	r3, #0
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	e016      	b.n	8000364 <place_food+0x7c>
            if (snake[i].x == food.x && snake[i].y == food.y) {
 8000336:	4a14      	ldr	r2, [pc, #80]	@ (8000388 <place_food+0xa0>)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800033e:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <place_food+0x9c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	429a      	cmp	r2, r3
 8000344:	d10b      	bne.n	800035e <place_food+0x76>
 8000346:	4a10      	ldr	r2, [pc, #64]	@ (8000388 <place_food+0xa0>)
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	00db      	lsls	r3, r3, #3
 800034c:	4413      	add	r3, r2
 800034e:	685a      	ldr	r2, [r3, #4]
 8000350:	4b0c      	ldr	r3, [pc, #48]	@ (8000384 <place_food+0x9c>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	429a      	cmp	r2, r3
 8000356:	d102      	bne.n	800035e <place_food+0x76>
                valid = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	607b      	str	r3, [r7, #4]
                break;
 800035c:	e007      	b.n	800036e <place_food+0x86>
        for (int i = 0; i < snake_length; i++) {
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	4b09      	ldr	r3, [pc, #36]	@ (800038c <place_food+0xa4>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	683a      	ldr	r2, [r7, #0]
 800036a:	429a      	cmp	r2, r3
 800036c:	dbe3      	blt.n	8000336 <place_food+0x4e>
    while (!valid) {
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d0bf      	beq.n	80002f4 <place_food+0xc>
            }
        }
    }
}
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	66666667 	.word	0x66666667
 8000384:	20000864 	.word	0x20000864
 8000388:	2000053c 	.word	0x2000053c
 800038c:	2000085c 	.word	0x2000085c

08000390 <is_collision>:

bool is_collision(int x, int y) {
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
    if (x < 0 || x >= LCD_WIDTH / BLOCK_SIZE || y < 0 || y >= LCD_HEIGHT / BLOCK_SIZE)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2b00      	cmp	r3, #0
 800039e:	db08      	blt.n	80003b2 <is_collision+0x22>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2b13      	cmp	r3, #19
 80003a4:	dc05      	bgt.n	80003b2 <is_collision+0x22>
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	db02      	blt.n	80003b2 <is_collision+0x22>
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	2b0f      	cmp	r3, #15
 80003b0:	dd01      	ble.n	80003b6 <is_collision+0x26>
        return true;
 80003b2:	2301      	movs	r3, #1
 80003b4:	e01c      	b.n	80003f0 <is_collision+0x60>

    for (int i = 1; i < snake_length; i++) {
 80003b6:	2301      	movs	r3, #1
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	e013      	b.n	80003e4 <is_collision+0x54>
        if (snake[i].x == x && snake[i].y == y)
 80003bc:	4a0f      	ldr	r2, [pc, #60]	@ (80003fc <is_collision+0x6c>)
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d109      	bne.n	80003de <is_collision+0x4e>
 80003ca:	4a0c      	ldr	r2, [pc, #48]	@ (80003fc <is_collision+0x6c>)
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	00db      	lsls	r3, r3, #3
 80003d0:	4413      	add	r3, r2
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	683a      	ldr	r2, [r7, #0]
 80003d6:	429a      	cmp	r2, r3
 80003d8:	d101      	bne.n	80003de <is_collision+0x4e>
            return true;
 80003da:	2301      	movs	r3, #1
 80003dc:	e008      	b.n	80003f0 <is_collision+0x60>
    for (int i = 1; i < snake_length; i++) {
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	3301      	adds	r3, #1
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <is_collision+0x70>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	68fa      	ldr	r2, [r7, #12]
 80003ea:	429a      	cmp	r2, r3
 80003ec:	dbe6      	blt.n	80003bc <is_collision+0x2c>
    }
    return false;
 80003ee:	2300      	movs	r3, #0
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3714      	adds	r7, #20
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	2000053c 	.word	0x2000053c
 8000400:	2000085c 	.word	0x2000085c

08000404 <is_Food_Eaten>:

bool is_Food_Eaten(void) {
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
    return (snake[0].x == food.x && snake[0].y == food.y);
 8000408:	4b0b      	ldr	r3, [pc, #44]	@ (8000438 <is_Food_Eaten+0x34>)
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <is_Food_Eaten+0x38>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	429a      	cmp	r2, r3
 8000412:	d107      	bne.n	8000424 <is_Food_Eaten+0x20>
 8000414:	4b08      	ldr	r3, [pc, #32]	@ (8000438 <is_Food_Eaten+0x34>)
 8000416:	685a      	ldr	r2, [r3, #4]
 8000418:	4b08      	ldr	r3, [pc, #32]	@ (800043c <is_Food_Eaten+0x38>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	429a      	cmp	r2, r3
 800041e:	d101      	bne.n	8000424 <is_Food_Eaten+0x20>
 8000420:	2301      	movs	r3, #1
 8000422:	e000      	b.n	8000426 <is_Food_Eaten+0x22>
 8000424:	2300      	movs	r3, #0
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	b2db      	uxtb	r3, r3
}
 800042c:	4618      	mov	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	2000053c 	.word	0x2000053c
 800043c:	20000864 	.word	0x20000864

08000440 <update_Snake>:

void update_Snake(void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
    int new_x = snake[0].x;
 8000446:	4b30      	ldr	r3, [pc, #192]	@ (8000508 <update_Snake+0xc8>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	60fb      	str	r3, [r7, #12]
    int new_y = snake[0].y;
 800044c:	4b2e      	ldr	r3, [pc, #184]	@ (8000508 <update_Snake+0xc8>)
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	60bb      	str	r3, [r7, #8]

    switch (direction) {
 8000452:	4b2e      	ldr	r3, [pc, #184]	@ (800050c <update_Snake+0xcc>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b03      	cmp	r3, #3
 8000458:	d81a      	bhi.n	8000490 <update_Snake+0x50>
 800045a:	a201      	add	r2, pc, #4	@ (adr r2, 8000460 <update_Snake+0x20>)
 800045c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000460:	08000471 	.word	0x08000471
 8000464:	08000489 	.word	0x08000489
 8000468:	08000479 	.word	0x08000479
 800046c:	08000481 	.word	0x08000481
        case RIGHT: new_x++; break;
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3301      	adds	r3, #1
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	e00b      	b.n	8000490 <update_Snake+0x50>
        case LEFT:  new_x--; break;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3b01      	subs	r3, #1
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	e007      	b.n	8000490 <update_Snake+0x50>
        case UP:    new_y--; break;
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	3b01      	subs	r3, #1
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	e003      	b.n	8000490 <update_Snake+0x50>
        case DOWN:  new_y++; break;
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	3301      	adds	r3, #1
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	bf00      	nop
    }

    if (is_collision(new_x, new_y)) {
 8000490:	68b9      	ldr	r1, [r7, #8]
 8000492:	68f8      	ldr	r0, [r7, #12]
 8000494:	f7ff ff7c 	bl	8000390 <is_collision>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d002      	beq.n	80004a4 <update_Snake+0x64>
        gameInit();
 800049e:	f7ff fee7 	bl	8000270 <gameInit>
        return;
 80004a2:	e02d      	b.n	8000500 <update_Snake+0xc0>
    }

    for (int i = snake_length - 1; i > 0; i--) {
 80004a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000510 <update_Snake+0xd0>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	e00f      	b.n	80004ce <update_Snake+0x8e>
        snake[i] = snake[i - 1];
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	1e5a      	subs	r2, r3, #1
 80004b2:	4815      	ldr	r0, [pc, #84]	@ (8000508 <update_Snake+0xc8>)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4914      	ldr	r1, [pc, #80]	@ (8000508 <update_Snake+0xc8>)
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	4403      	add	r3, r0
 80004bc:	00d2      	lsls	r2, r2, #3
 80004be:	440a      	add	r2, r1
 80004c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c4:	e883 0003 	stmia.w	r3, {r0, r1}
    for (int i = snake_length - 1; i > 0; i--) {
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	dcec      	bgt.n	80004ae <update_Snake+0x6e>
    }

    snake[0].x = new_x;
 80004d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000508 <update_Snake+0xc8>)
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	6013      	str	r3, [r2, #0]
    snake[0].y = new_y;
 80004da:	4a0b      	ldr	r2, [pc, #44]	@ (8000508 <update_Snake+0xc8>)
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	6053      	str	r3, [r2, #4]

    if (is_Food_Eaten()) {
 80004e0:	f7ff ff90 	bl	8000404 <is_Food_Eaten>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d00a      	beq.n	8000500 <update_Snake+0xc0>
        if (snake_length < MAX_SNAKE_LENGTH)
 80004ea:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <update_Snake+0xd0>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b63      	cmp	r3, #99	@ 0x63
 80004f0:	dc04      	bgt.n	80004fc <update_Snake+0xbc>
            snake_length++;
 80004f2:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <update_Snake+0xd0>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	3301      	adds	r3, #1
 80004f8:	4a05      	ldr	r2, [pc, #20]	@ (8000510 <update_Snake+0xd0>)
 80004fa:	6013      	str	r3, [r2, #0]
        place_food();
 80004fc:	f7ff fef4 	bl	80002e8 <place_food>
    }
}
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	2000053c 	.word	0x2000053c
 800050c:	20000860 	.word	0x20000860
 8000510:	2000085c 	.word	0x2000085c

08000514 <change_Direction>:

Dir change_Direction(int action[3]) {
 8000514:	b480      	push	{r7}
 8000516:	b087      	sub	sp, #28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]

    Dir clock_wise[4] = { RIGHT, DOWN, LEFT, UP };
 800051c:	4b2b      	ldr	r3, [pc, #172]	@ (80005cc <change_Direction+0xb8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	60fb      	str	r3, [r7, #12]


    int idx = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 4; i++) {
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	e00e      	b.n	800054a <change_Direction+0x36>
        if (clock_wise[i] == direction) {
 800052c:	f107 020c 	add.w	r2, r7, #12
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	4413      	add	r3, r2
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	4b26      	ldr	r3, [pc, #152]	@ (80005d0 <change_Direction+0xbc>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	429a      	cmp	r2, r3
 800053c:	d102      	bne.n	8000544 <change_Direction+0x30>
            idx = i;
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	617b      	str	r3, [r7, #20]
            break;
 8000542:	e005      	b.n	8000550 <change_Direction+0x3c>
    for (int i = 0; i < 4; i++) {
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	3301      	adds	r3, #1
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	2b03      	cmp	r3, #3
 800054e:	dded      	ble.n	800052c <change_Direction+0x18>
        }
    }

    if (action[0] == 1) {
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d107      	bne.n	8000568 <change_Direction+0x54>

        direction = clock_wise[idx];
 8000558:	f107 020c 	add.w	r2, r7, #12
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	4413      	add	r3, r2
 8000560:	781a      	ldrb	r2, [r3, #0]
 8000562:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <change_Direction+0xbc>)
 8000564:	701a      	strb	r2, [r3, #0]
 8000566:	e028      	b.n	80005ba <change_Direction+0xa6>
    } else if (action[1] == 1) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3304      	adds	r3, #4
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d10f      	bne.n	8000592 <change_Direction+0x7e>

        direction = clock_wise[(idx + 1) % 4];
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	3301      	adds	r3, #1
 8000576:	425a      	negs	r2, r3
 8000578:	f003 0303 	and.w	r3, r3, #3
 800057c:	f002 0203 	and.w	r2, r2, #3
 8000580:	bf58      	it	pl
 8000582:	4253      	negpl	r3, r2
 8000584:	3318      	adds	r3, #24
 8000586:	443b      	add	r3, r7
 8000588:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800058c:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <change_Direction+0xbc>)
 800058e:	701a      	strb	r2, [r3, #0]
 8000590:	e013      	b.n	80005ba <change_Direction+0xa6>
    } else if (action[2] == 1) {
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3308      	adds	r3, #8
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d10e      	bne.n	80005ba <change_Direction+0xa6>

        direction = clock_wise[(idx + 3) % 4];
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	3303      	adds	r3, #3
 80005a0:	425a      	negs	r2, r3
 80005a2:	f003 0303 	and.w	r3, r3, #3
 80005a6:	f002 0203 	and.w	r2, r2, #3
 80005aa:	bf58      	it	pl
 80005ac:	4253      	negpl	r3, r2
 80005ae:	3318      	adds	r3, #24
 80005b0:	443b      	add	r3, r7
 80005b2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <change_Direction+0xbc>)
 80005b8:	701a      	strb	r2, [r3, #0]
    }

    return direction;
 80005ba:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <change_Direction+0xbc>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	371c      	adds	r7, #28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	080076e0 	.word	0x080076e0
 80005d0:	20000860 	.word	0x20000860

080005d4 <get_state>:

void get_state(int state[STATE_SIZE]) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08e      	sub	sp, #56	@ 0x38
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    int x = snake[0].x;
 80005dc:	4b95      	ldr	r3, [pc, #596]	@ (8000834 <get_state+0x260>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	637b      	str	r3, [r7, #52]	@ 0x34
    int y = snake[0].y;
 80005e2:	4b94      	ldr	r3, [pc, #592]	@ (8000834 <get_state+0x260>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	633b      	str	r3, [r7, #48]	@ 0x30

    Point point_l = { x - 1, y };
 80005e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ea:	3b01      	subs	r3, #1
 80005ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80005ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    Point point_r = { x + 1, y };
 80005f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005f4:	3301      	adds	r3, #1
 80005f6:	61fb      	str	r3, [r7, #28]
 80005f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005fa:	623b      	str	r3, [r7, #32]
    Point point_u = { x, y - 1 };
 80005fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000602:	3b01      	subs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
    Point point_d = { x, y + 1 };
 8000606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800060c:	3301      	adds	r3, #1
 800060e:	613b      	str	r3, [r7, #16]

    bool dir_l = direction == LEFT;
 8000610:	4b89      	ldr	r3, [pc, #548]	@ (8000838 <get_state+0x264>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b02      	cmp	r3, #2
 8000616:	bf0c      	ite	eq
 8000618:	2301      	moveq	r3, #1
 800061a:	2300      	movne	r3, #0
 800061c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    bool dir_r = direction == RIGHT;
 8000620:	4b85      	ldr	r3, [pc, #532]	@ (8000838 <get_state+0x264>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	bf0c      	ite	eq
 8000628:	2301      	moveq	r3, #1
 800062a:	2300      	movne	r3, #0
 800062c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    bool dir_u = direction == UP;
 8000630:	4b81      	ldr	r3, [pc, #516]	@ (8000838 <get_state+0x264>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b03      	cmp	r3, #3
 8000636:	bf0c      	ite	eq
 8000638:	2301      	moveq	r3, #1
 800063a:	2300      	movne	r3, #0
 800063c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    bool dir_d = direction == DOWN;
 8000640:	4b7d      	ldr	r3, [pc, #500]	@ (8000838 <get_state+0x264>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	bf0c      	ite	eq
 8000648:	2301      	moveq	r3, #1
 800064a:	2300      	movne	r3, #0
 800064c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Danger straight
    state[0] = (dir_r && is_collision(point_r.x, point_r.y)) ||
               (dir_l && is_collision(point_l.x, point_l.y)) ||
               (dir_u && is_collision(point_u.x, point_u.y)) ||
 8000650:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000654:	2b00      	cmp	r3, #0
 8000656:	d008      	beq.n	800066a <get_state+0x96>
    state[0] = (dir_r && is_collision(point_r.x, point_r.y)) ||
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	6a3a      	ldr	r2, [r7, #32]
 800065c:	4611      	mov	r1, r2
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fe96 	bl	8000390 <is_collision>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d126      	bne.n	80006b8 <get_state+0xe4>
 800066a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800066e:	2b00      	cmp	r3, #0
 8000670:	d008      	beq.n	8000684 <get_state+0xb0>
               (dir_l && is_collision(point_l.x, point_l.y)) ||
 8000672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000674:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fe89 	bl	8000390 <is_collision>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d119      	bne.n	80006b8 <get_state+0xe4>
 8000684:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000688:	2b00      	cmp	r3, #0
 800068a:	d008      	beq.n	800069e <get_state+0xca>
               (dir_u && is_collision(point_u.x, point_u.y)) ||
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	69ba      	ldr	r2, [r7, #24]
 8000690:	4611      	mov	r1, r2
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fe7c 	bl	8000390 <is_collision>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d10c      	bne.n	80006b8 <get_state+0xe4>
 800069e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00a      	beq.n	80006bc <get_state+0xe8>
               (dir_d && is_collision(point_d.x, point_d.y));
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	693a      	ldr	r2, [r7, #16]
 80006aa:	4611      	mov	r1, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fe6f 	bl	8000390 <is_collision>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <get_state+0xe8>
               (dir_u && is_collision(point_u.x, point_u.y)) ||
 80006b8:	2201      	movs	r2, #1
 80006ba:	e000      	b.n	80006be <get_state+0xea>
 80006bc:	2200      	movs	r2, #0
    state[0] = (dir_r && is_collision(point_r.x, point_r.y)) ||
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]

    // Danger right
    state[1] = (dir_u && is_collision(point_r.x, point_r.y)) ||
               (dir_d && is_collision(point_l.x, point_l.y)) ||
               (dir_l && is_collision(point_u.x, point_u.y)) ||
 80006c2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d008      	beq.n	80006dc <get_state+0x108>
    state[1] = (dir_u && is_collision(point_r.x, point_r.y)) ||
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	6a3a      	ldr	r2, [r7, #32]
 80006ce:	4611      	mov	r1, r2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fe5d 	bl	8000390 <is_collision>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d126      	bne.n	800072a <get_state+0x156>
 80006dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d008      	beq.n	80006f6 <get_state+0x122>
               (dir_d && is_collision(point_l.x, point_l.y)) ||
 80006e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fe50 	bl	8000390 <is_collision>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d119      	bne.n	800072a <get_state+0x156>
 80006f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d008      	beq.n	8000710 <get_state+0x13c>
               (dir_l && is_collision(point_u.x, point_u.y)) ||
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	69ba      	ldr	r2, [r7, #24]
 8000702:	4611      	mov	r1, r2
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fe43 	bl	8000390 <is_collision>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d10c      	bne.n	800072a <get_state+0x156>
 8000710:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00a      	beq.n	800072e <get_state+0x15a>
               (dir_r && is_collision(point_d.x, point_d.y));
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fe36 	bl	8000390 <is_collision>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <get_state+0x15a>
               (dir_l && is_collision(point_u.x, point_u.y)) ||
 800072a:	2201      	movs	r2, #1
 800072c:	e000      	b.n	8000730 <get_state+0x15c>
 800072e:	2200      	movs	r2, #0
    state[1] = (dir_u && is_collision(point_r.x, point_r.y)) ||
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3304      	adds	r3, #4
 8000734:	601a      	str	r2, [r3, #0]

    // Danger left
    state[2] = (dir_d && is_collision(point_r.x, point_r.y)) ||
               (dir_u && is_collision(point_l.x, point_l.y)) ||
               (dir_r && is_collision(point_u.x, point_u.y)) ||
 8000736:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800073a:	2b00      	cmp	r3, #0
 800073c:	d008      	beq.n	8000750 <get_state+0x17c>
    state[2] = (dir_d && is_collision(point_r.x, point_r.y)) ||
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	6a3a      	ldr	r2, [r7, #32]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fe23 	bl	8000390 <is_collision>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d126      	bne.n	800079e <get_state+0x1ca>
 8000750:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000754:	2b00      	cmp	r3, #0
 8000756:	d008      	beq.n	800076a <get_state+0x196>
               (dir_u && is_collision(point_l.x, point_l.y)) ||
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fe16 	bl	8000390 <is_collision>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d119      	bne.n	800079e <get_state+0x1ca>
 800076a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800076e:	2b00      	cmp	r3, #0
 8000770:	d008      	beq.n	8000784 <get_state+0x1b0>
               (dir_r && is_collision(point_u.x, point_u.y)) ||
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fe09 	bl	8000390 <is_collision>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d10c      	bne.n	800079e <get_state+0x1ca>
 8000784:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000788:	2b00      	cmp	r3, #0
 800078a:	d00a      	beq.n	80007a2 <get_state+0x1ce>
               (dir_l && is_collision(point_d.x, point_d.y));
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	4611      	mov	r1, r2
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fdfc 	bl	8000390 <is_collision>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <get_state+0x1ce>
               (dir_r && is_collision(point_u.x, point_u.y)) ||
 800079e:	2201      	movs	r2, #1
 80007a0:	e000      	b.n	80007a4 <get_state+0x1d0>
 80007a2:	2200      	movs	r2, #0
    state[2] = (dir_d && is_collision(point_r.x, point_r.y)) ||
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3308      	adds	r3, #8
 80007a8:	601a      	str	r2, [r3, #0]

    // Current direction
    state[3] = dir_l;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	330c      	adds	r3, #12
 80007ae:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80007b2:	601a      	str	r2, [r3, #0]
    state[4] = dir_r;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3310      	adds	r3, #16
 80007b8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80007bc:	601a      	str	r2, [r3, #0]
    state[5] = dir_u;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3314      	adds	r3, #20
 80007c2:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80007c6:	601a      	str	r2, [r3, #0]
    state[6] = dir_d;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3318      	adds	r3, #24
 80007cc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80007d0:	601a      	str	r2, [r3, #0]

    // Food location
    state[7] = food.x < x;  // food is left
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <get_state+0x268>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007d8:	429a      	cmp	r2, r3
 80007da:	bfcc      	ite	gt
 80007dc:	2301      	movgt	r3, #1
 80007de:	2300      	movle	r3, #0
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	331c      	adds	r3, #28
 80007e6:	601a      	str	r2, [r3, #0]
    state[8] = food.x > x;  // food is right
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <get_state+0x268>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007ee:	429a      	cmp	r2, r3
 80007f0:	bfb4      	ite	lt
 80007f2:	2301      	movlt	r3, #1
 80007f4:	2300      	movge	r3, #0
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3320      	adds	r3, #32
 80007fc:	601a      	str	r2, [r3, #0]
    state[9] = food.y < y;  // food is up
 80007fe:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <get_state+0x268>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000804:	429a      	cmp	r2, r3
 8000806:	bfcc      	ite	gt
 8000808:	2301      	movgt	r3, #1
 800080a:	2300      	movle	r3, #0
 800080c:	b2da      	uxtb	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3324      	adds	r3, #36	@ 0x24
 8000812:	601a      	str	r2, [r3, #0]
    state[10] = food.y > y; // food is down
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <get_state+0x268>)
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800081a:	429a      	cmp	r2, r3
 800081c:	bfb4      	ite	lt
 800081e:	2301      	movlt	r3, #1
 8000820:	2300      	movge	r3, #0
 8000822:	b2da      	uxtb	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3328      	adds	r3, #40	@ 0x28
 8000828:	601a      	str	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	3738      	adds	r7, #56	@ 0x38
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000053c 	.word	0x2000053c
 8000838:	20000860 	.word	0x20000860
 800083c:	20000864 	.word	0x20000864

08000840 <draw_game>:



void draw_game(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	@ 0x28
 8000844:	af00      	add	r7, sp, #0
    lcd_clear_screen(BLACK);
 8000846:	2000      	movs	r0, #0
 8000848:	f000 fb5c 	bl	8000f04 <lcd_clear_screen>

    for (int i = 0; i < snake_length; i++) {
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000850:	e02c      	b.n	80008ac <draw_game+0x6c>
        int px = snake[i].x * BLOCK_SIZE;
 8000852:	4a2e      	ldr	r2, [pc, #184]	@ (800090c <draw_game+0xcc>)
 8000854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000856:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	60bb      	str	r3, [r7, #8]
        int py = snake[i].y * BLOCK_SIZE;
 800085e:	4a2b      	ldr	r2, [pc, #172]	@ (800090c <draw_game+0xcc>)
 8000860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	4413      	add	r3, r2
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	607b      	str	r3, [r7, #4]

        for (int dx = 0; dx < BLOCK_SIZE; dx++) {
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
 8000870:	e016      	b.n	80008a0 <draw_game+0x60>
            for (int dy = 0; dy < BLOCK_SIZE; dy++) {
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
 8000876:	e00d      	b.n	8000894 <draw_game+0x54>
                lcd_put_pixel(px + dx, py + dy, GREEN);
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	18d0      	adds	r0, r2, r3
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	4413      	add	r3, r2
 8000884:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000888:	4619      	mov	r1, r3
 800088a:	f000 fb1f 	bl	8000ecc <lcd_put_pixel>
            for (int dy = 0; dy < BLOCK_SIZE; dy++) {
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3301      	adds	r3, #1
 8000892:	61fb      	str	r3, [r7, #28]
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	2b07      	cmp	r3, #7
 8000898:	ddee      	ble.n	8000878 <draw_game+0x38>
        for (int dx = 0; dx < BLOCK_SIZE; dx++) {
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	3301      	adds	r3, #1
 800089e:	623b      	str	r3, [r7, #32]
 80008a0:	6a3b      	ldr	r3, [r7, #32]
 80008a2:	2b07      	cmp	r3, #7
 80008a4:	dde5      	ble.n	8000872 <draw_game+0x32>
    for (int i = 0; i < snake_length; i++) {
 80008a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a8:	3301      	adds	r3, #1
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80008ac:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <draw_game+0xd0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008b2:	429a      	cmp	r2, r3
 80008b4:	dbcd      	blt.n	8000852 <draw_game+0x12>
            }
        }
    }


    int fx = food.x * BLOCK_SIZE;
 80008b6:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <draw_game+0xd4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	613b      	str	r3, [r7, #16]
    int fy = food.y * BLOCK_SIZE;
 80008be:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <draw_game+0xd4>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	60fb      	str	r3, [r7, #12]
    for (int dx = 0; dx < BLOCK_SIZE; dx++) {
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	e016      	b.n	80008fa <draw_game+0xba>
        for (int dy = 0; dy < BLOCK_SIZE; dy++) {
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	e00d      	b.n	80008ee <draw_game+0xae>
            lcd_put_pixel(fx + dx, fy + dy, RED);
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	18d0      	adds	r0, r2, r3
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	4413      	add	r3, r2
 80008de:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80008e2:	4619      	mov	r1, r3
 80008e4:	f000 faf2 	bl	8000ecc <lcd_put_pixel>
        for (int dy = 0; dy < BLOCK_SIZE; dy++) {
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	3301      	adds	r3, #1
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	2b07      	cmp	r3, #7
 80008f2:	ddee      	ble.n	80008d2 <draw_game+0x92>
    for (int dx = 0; dx < BLOCK_SIZE; dx++) {
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	3301      	adds	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	2b07      	cmp	r3, #7
 80008fe:	dde5      	ble.n	80008cc <draw_game+0x8c>
        }
    }

    lcd_copy();
 8000900:	f000 fb22 	bl	8000f48 <lcd_copy>
}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	@ 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000053c 	.word	0x2000053c
 8000910:	2000085c 	.word	0x2000085c
 8000914:	20000864 	.word	0x20000864

08000918 <get_action>:

void get_action(float output[OUTPUT_SIZE], int action[3]) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b090      	sub	sp, #64	@ 0x40
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
    int state[STATE_SIZE];
    get_state(state);
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe54 	bl	80005d4 <get_state>

    runAI(state, output);
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	6879      	ldr	r1, [r7, #4]
 8000932:	4618      	mov	r0, r3
 8000934:	f003 ff44 	bl	80047c0 <runAI>

    int max_i = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (int i = 1; i < OUTPUT_SIZE; i++) {
 800093c:	2301      	movs	r3, #1
 800093e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000940:	e015      	b.n	800096e <get_action+0x56>
        if (output[i] > output[max_i]) {
 8000942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	ed93 7a00 	vldr	s14, [r3]
 800094e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	edd3 7a00 	vldr	s15, [r3]
 800095a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800095e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000962:	dd01      	ble.n	8000968 <get_action+0x50>
            max_i = i;
 8000964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000966:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (int i = 1; i < OUTPUT_SIZE; i++) {
 8000968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800096a:	3301      	adds	r3, #1
 800096c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800096e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000970:	2b02      	cmp	r3, #2
 8000972:	dde6      	ble.n	8000942 <get_action+0x2a>
        }
    }

    for (int i = 0; i < OUTPUT_SIZE; i++) {
 8000974:	2300      	movs	r3, #0
 8000976:	637b      	str	r3, [r7, #52]	@ 0x34
 8000978:	e00f      	b.n	800099a <get_action+0x82>
        action[i] = (i == max_i) ? 1 : 0;
 800097a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800097c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800097e:	429a      	cmp	r2, r3
 8000980:	bf0c      	ite	eq
 8000982:	2301      	moveq	r3, #1
 8000984:	2300      	movne	r3, #0
 8000986:	b2d9      	uxtb	r1, r3
 8000988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	683a      	ldr	r2, [r7, #0]
 800098e:	4413      	add	r3, r2
 8000990:	460a      	mov	r2, r1
 8000992:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < OUTPUT_SIZE; i++) {
 8000994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000996:	3301      	adds	r3, #1
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
 800099a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800099c:	2b02      	cmp	r3, #2
 800099e:	ddec      	ble.n	800097a <get_action+0x62>
    }
}
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	3740      	adds	r7, #64	@ 0x40
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <playGame>:


void playGame(void) {
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
    float output[OUTPUT_SIZE];
    int action[3];

    get_action(output, action);
 80009b0:	463a      	mov	r2, r7
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ffad 	bl	8000918 <get_action>
    change_Direction(action);
 80009be:	463b      	mov	r3, r7
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fda7 	bl	8000514 <change_Direction>
    update_Snake();
 80009c6:	f7ff fd3b 	bl	8000440 <update_Snake>
    draw_game();
 80009ca:	f7ff ff39 	bl	8000840 <draw_game>
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009de:	463b      	mov	r3, r7
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
 80009ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80009ee:	4b29      	ldr	r3, [pc, #164]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 80009f0:	4a29      	ldr	r2, [pc, #164]	@ (8000a98 <MX_ADC2_Init+0xc0>)
 80009f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009f4:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80009fa:	4b26      	ldr	r3, [pc, #152]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a00:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a06:	4b23      	ldr	r3, [pc, #140]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a0c:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 8000a0e:	2204      	movs	r2, #4
 8000a10:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a12:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a18:	4b1e      	ldr	r3, [pc, #120]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a2c:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a32:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a38:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a4e:	4811      	ldr	r0, [pc, #68]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 8000a50:	f000 fec4 	bl	80017dc <HAL_ADC_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000a5a:	f000 fb2e 	bl	80010ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_ADC2_Init+0xc4>)
 8000a60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a62:	2306      	movs	r3, #6
 8000a64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <MX_ADC2_Init+0xc8>)
 8000a6c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4806      	ldr	r0, [pc, #24]	@ (8000a94 <MX_ADC2_Init+0xbc>)
 8000a7c:	f000 fffe 	bl	8001a7c <HAL_ADC_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000a86:	f000 fb18 	bl	80010ba <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000086c 	.word	0x2000086c
 8000a98:	50040100 	.word	0x50040100
 8000a9c:	2e300800 	.word	0x2e300800
 8000aa0:	407f0000 	.word	0x407f0000

08000aa4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0ac      	sub	sp, #176	@ 0xb0
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2288      	movs	r2, #136	@ 0x88
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f006 f867 	bl	8006b98 <memset>
  if(adcHandle->Instance==ADC2)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a35      	ldr	r2, [pc, #212]	@ (8000ba4 <HAL_ADC_MspInit+0x100>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d162      	bne.n	8000b9a <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ad4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ad8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ada:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000aea:	2310      	movs	r3, #16
 8000aec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000aee:	2307      	movs	r3, #7
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000afa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000afe:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 fd71 	bl	80035ec <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000b10:	f000 fad3 	bl	80010ba <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b14:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <HAL_ADC_MspInit+0x104>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b18:	4a23      	ldr	r2, [pc, #140]	@ (8000ba8 <HAL_ADC_MspInit+0x104>)
 8000b1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b20:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <HAL_ADC_MspInit+0x104>)
 8000b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <HAL_ADC_MspInit+0x104>)
 8000b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b30:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba8 <HAL_ADC_MspInit+0x104>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <HAL_ADC_MspInit+0x104>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <HAL_ADC_MspInit+0x104>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b48:	4a17      	ldr	r2, [pc, #92]	@ (8000ba8 <HAL_ADC_MspInit+0x104>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b50:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <HAL_ADC_MspInit+0x104>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC2_IN11
    PA7     ------> ADC2_IN12
    PC4     ------> ADC2_IN13
    PC5     ------> ADC2_IN14
    */
    GPIO_InitStruct.Pin = JoyStick_X_Pin|GPIO_PIN_7;
 8000b5c:	23c0      	movs	r3, #192	@ 0xc0
 8000b5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b62:	230b      	movs	r3, #11
 8000b64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b78:	f001 fd4a 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JoyStick_Y_Pin|GPIO_PIN_5;
 8000b7c:	2330      	movs	r3, #48	@ 0x30
 8000b7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b82:	230b      	movs	r3, #11
 8000b84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <HAL_ADC_MspInit+0x108>)
 8000b96:	f001 fd3b 	bl	8002610 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	37b0      	adds	r7, #176	@ 0xb0
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	50040100 	.word	0x50040100
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	48000800 	.word	0x48000800

08000bb0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <MX_CRC_Init+0x3c>)
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf0 <MX_CRC_Init+0x40>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <MX_CRC_Init+0x3c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <MX_CRC_Init+0x3c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_CRC_Init+0x3c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <MX_CRC_Init+0x3c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_CRC_Init+0x3c>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <MX_CRC_Init+0x3c>)
 8000bda:	f001 fc27 	bl	800242c <HAL_CRC_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000be4:	f000 fa69 	bl	80010ba <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200008d0 	.word	0x200008d0
 8000bf0:	40023000 	.word	0x40023000

08000bf4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <HAL_CRC_MspInit+0x38>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d10b      	bne.n	8000c1e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c06:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <HAL_CRC_MspInit+0x3c>)
 8000c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c0a:	4a09      	ldr	r2, [pc, #36]	@ (8000c30 <HAL_CRC_MspInit+0x3c>)
 8000c0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c10:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <HAL_CRC_MspInit+0x3c>)
 8000c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023000 	.word	0x40023000
 8000c30:	40021000 	.word	0x40021000

08000c34 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c56:	4b28      	ldr	r3, [pc, #160]	@ (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	4a24      	ldr	r2, [pc, #144]	@ (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6e:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c86:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <MX_GPIO_Init+0xc4>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f641 0104 	movw	r1, #6148	@ 0x1804
 8000c98:	4818      	ldr	r0, [pc, #96]	@ (8000cfc <MX_GPIO_Init+0xc8>)
 8000c9a:	f001 fe63 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000c9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4813      	ldr	r0, [pc, #76]	@ (8000d00 <MX_GPIO_Init+0xcc>)
 8000cb4:	f001 fcac 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoyStick_Button_Pin;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(JoyStick_Button_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <MX_GPIO_Init+0xc8>)
 8000ccc:	f001 fca0 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000cd0:	f641 0304 	movw	r3, #6148	@ 0x1804
 8000cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_GPIO_Init+0xc8>)
 8000cea:	f001 fc91 	bl	8002610 <HAL_GPIO_Init>

}
 8000cee:	bf00      	nop
 8000cf0:	3720      	adds	r7, #32
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	48000400 	.word	0x48000400
 8000d00:	48000800 	.word	0x48000800

08000d04 <lcd_cmd>:




static void lcd_cmd(uint8_t cmd)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <lcd_cmd+0x44>)
 8000d16:	f001 fe25 	bl	8002964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d20:	4809      	ldr	r0, [pc, #36]	@ (8000d48 <lcd_cmd+0x44>)
 8000d22:	f001 fe1f 	bl	8002964 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000d26:	1df9      	adds	r1, r7, #7
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4807      	ldr	r0, [pc, #28]	@ (8000d4c <lcd_cmd+0x48>)
 8000d30:	f003 f9bb 	bl	80040aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d3a:	4803      	ldr	r0, [pc, #12]	@ (8000d48 <lcd_cmd+0x44>)
 8000d3c:	f001 fe12 	bl	8002964 <HAL_GPIO_WritePin>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	48000400 	.word	0x48000400
 8000d4c:	2000a8f4 	.word	0x2000a8f4

08000d50 <lcd_data>:
static void lcd_data(uint8_t data)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <lcd_data+0x44>)
 8000d62:	f001 fdff 	bl	8002964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d6c:	4809      	ldr	r0, [pc, #36]	@ (8000d94 <lcd_data+0x44>)
 8000d6e:	f001 fdf9 	bl	8002964 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8000d72:	1df9      	adds	r1, r7, #7
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4807      	ldr	r0, [pc, #28]	@ (8000d98 <lcd_data+0x48>)
 8000d7c:	f003 f995 	bl	80040aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d86:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <lcd_data+0x44>)
 8000d88:	f001 fdec 	bl	8002964 <HAL_GPIO_WritePin>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	48000400 	.word	0x48000400
 8000d98:	2000a8f4 	.word	0x2000a8f4

08000d9c <lcd_send>:
#define CMD(x)			((x) | 0x100)

static void lcd_send(uint16_t value)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d005      	beq.n	8000dbc <lcd_send+0x20>
		lcd_cmd(value);
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ffa5 	bl	8000d04 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8000dba:	e004      	b.n	8000dc6 <lcd_send+0x2a>
		lcd_data(value);
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ffc5 	bl	8000d50 <lcd_data>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <lcd_data16>:

static void lcd_data16(uint16_t value)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	0a1b      	lsrs	r3, r3, #8
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ffb5 	bl	8000d50 <lcd_data>
	lcd_data(value);
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ffb0 	bl	8000d50 <lcd_data>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <lcd_set_window>:

#define LCD_OFFSET_X  0
#define LCD_OFFSET_Y  0

static void lcd_set_window(int x, int y, int width, int height)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 8000e06:	202a      	movs	r0, #42	@ 0x2a
 8000e08:	f7ff ff7c 	bl	8000d04 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ffdc 	bl	8000dce <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	4413      	add	r3, r2
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	3b01      	subs	r3, #1
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ffd1 	bl	8000dce <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 8000e2c:	202b      	movs	r0, #43	@ 0x2b
 8000e2e:	f7ff ff69 	bl	8000d04 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ffc9 	bl	8000dce <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ffbe 	bl	8000dce <lcd_data16>
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <lcd_init>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

void lcd_init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2104      	movs	r1, #4
 8000e66:	4817      	ldr	r0, [pc, #92]	@ (8000ec4 <lcd_init+0x68>)
 8000e68:	f001 fd7c 	bl	8002964 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000e6c:	2064      	movs	r0, #100	@ 0x64
 8000e6e:	f000 fb05 	bl	800147c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2104      	movs	r1, #4
 8000e76:	4813      	ldr	r0, [pc, #76]	@ (8000ec4 <lcd_init+0x68>)
 8000e78:	f001 fd74 	bl	8002964 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000e7c:	2064      	movs	r0, #100	@ 0x64
 8000e7e:	f000 fafd 	bl	800147c <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	e009      	b.n	8000e9c <lcd_init+0x40>
    lcd_send(init_table[i]);
 8000e88:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec8 <lcd_init+0x6c>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff83 	bl	8000d9c <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b4b      	cmp	r3, #75	@ 0x4b
 8000ea0:	d9f2      	bls.n	8000e88 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 8000ea2:	20c8      	movs	r0, #200	@ 0xc8
 8000ea4:	f000 faea 	bl	800147c <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 8000ea8:	2011      	movs	r0, #17
 8000eaa:	f7ff ff2b 	bl	8000d04 <lcd_cmd>
  HAL_Delay(120);
 8000eae:	2078      	movs	r0, #120	@ 0x78
 8000eb0:	f000 fae4 	bl	800147c <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 8000eb4:	2029      	movs	r0, #41	@ 0x29
 8000eb6:	f7ff ff25 	bl	8000d04 <lcd_cmd>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	080077bc 	.word	0x080077bc

08000ecc <lcd_put_pixel>:
	lcd_draw_image(128, 64, 64, 64, test_image);

}

void lcd_put_pixel(int x, int y, uint16_t color)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	4613      	mov	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	015b      	lsls	r3, r3, #5
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4905      	ldr	r1, [pc, #20]	@ (8000f00 <lcd_put_pixel+0x34>)
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	200008f4 	.word	0x200008f4

08000f04 <lcd_clear_screen>:

void lcd_clear_screen(uint16_t color) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
    for (int y = 0; y < LCD_HEIGHT; y++) {
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	e011      	b.n	8000f38 <lcd_clear_screen+0x34>
        for (int x = 0; x < LCD_WIDTH; x++) {
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	e008      	b.n	8000f2c <lcd_clear_screen+0x28>
            lcd_put_pixel(x, y, color);
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68f9      	ldr	r1, [r7, #12]
 8000f20:	68b8      	ldr	r0, [r7, #8]
 8000f22:	f7ff ffd3 	bl	8000ecc <lcd_put_pixel>
        for (int x = 0; x < LCD_WIDTH; x++) {
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b9f      	cmp	r3, #159	@ 0x9f
 8000f30:	ddf3      	ble.n	8000f1a <lcd_clear_screen+0x16>
    for (int y = 0; y < LCD_HEIGHT; y++) {
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3301      	adds	r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f3c:	ddea      	ble.n	8000f14 <lcd_clear_screen+0x10>
        }
    }
}
 8000f3e:	bf00      	nop
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <lcd_copy>:


void lcd_copy(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
    lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000f4e:	2380      	movs	r3, #128	@ 0x80
 8000f50:	22a0      	movs	r2, #160	@ 0xa0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff ff4f 	bl	8000df8 <lcd_set_window>
    lcd_cmd(ST7735S_RAMWR);
 8000f5a:	202c      	movs	r0, #44	@ 0x2c
 8000f5c:	f7ff fed2 	bl	8000d04 <lcd_cmd>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f66:	4818      	ldr	r0, [pc, #96]	@ (8000fc8 <lcd_copy+0x80>)
 8000f68:	f001 fcfc 	bl	8002964 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f72:	4815      	ldr	r0, [pc, #84]	@ (8000fc8 <lcd_copy+0x80>)
 8000f74:	f001 fcf6 	bl	8002964 <HAL_GPIO_WritePin>

    // Zamień dane z Little Endian na Big Endian przy wysyłaniu
    for (int i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	e016      	b.n	8000fac <lcd_copy+0x64>
        uint16_t color = frame_buffer[i];
 8000f7e:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <lcd_copy+0x84>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f86:	807b      	strh	r3, [r7, #2]
        uint8_t data[2] = {
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	703b      	strb	r3, [r7, #0]
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	707b      	strb	r3, [r7, #1]
            (color >> 8) & 0xFF,  // starszy bajt
            color & 0xFF          // młodszy bajt
        };
        HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
 8000f98:	4639      	mov	r1, r7
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	480b      	ldr	r0, [pc, #44]	@ (8000fd0 <lcd_copy+0x88>)
 8000fa2:	f003 f882 	bl	80040aa <HAL_SPI_Transmit>
    for (int i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8000fb2:	dbe4      	blt.n	8000f7e <lcd_copy+0x36>
    }

    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fba:	4803      	ldr	r0, [pc, #12]	@ (8000fc8 <lcd_copy+0x80>)
 8000fbc:	f001 fcd2 	bl	8002964 <HAL_GPIO_WritePin>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	48000400 	.word	0x48000400
 8000fcc:	200008f4 	.word	0x200008f4
 8000fd0:	2000a8f4 	.word	0x2000a8f4

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd8:	f000 f9db 	bl	8001392 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f81b 	bl	8001016 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f7ff fe28 	bl	8000c34 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000fe4:	f000 f870 	bl	80010c8 <MX_SPI2_Init>
  MX_ADC2_Init();
 8000fe8:	f7ff fcf6 	bl	80009d8 <MX_ADC2_Init>
  MX_CRC_Init();
 8000fec:	f7ff fde0 	bl	8000bb0 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8000ff0:	f003 fc2c 	bl	800484c <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8000ff4:	f7ff ff32 	bl	8000e5c <lcd_init>
  lcd_clear_screen(0x0000);     // czarne tło
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ff83 	bl	8000f04 <lcd_clear_screen>
  lcd_copy();
 8000ffe:	f7ff ffa3 	bl	8000f48 <lcd_copy>
  HAL_Delay(1000);
 8001002:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001006:	f000 fa39 	bl	800147c <HAL_Delay>


	  default : break;

	  }*/
	  playGame();
 800100a:	f7ff fcce 	bl	80009aa <playGame>


    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 800100e:	f003 fc2b 	bl	8004868 <MX_X_CUBE_AI_Process>
	  playGame();
 8001012:	bf00      	nop
 8001014:	e7f9      	b.n	800100a <main+0x36>

08001016 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b096      	sub	sp, #88	@ 0x58
 800101a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2244      	movs	r2, #68	@ 0x44
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f005 fdb7 	bl	8006b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001038:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800103c:	f001 fcb8 	bl	80029b0 <HAL_PWREx_ControlVoltageScaling>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001046:	f000 f838 	bl	80010ba <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800104a:	2310      	movs	r3, #16
 800104c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800104e:	2301      	movs	r3, #1
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001056:	2360      	movs	r3, #96	@ 0x60
 8001058:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105a:	2302      	movs	r3, #2
 800105c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800105e:	2301      	movs	r3, #1
 8001060:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001066:	2328      	movs	r3, #40	@ 0x28
 8001068:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800106a:	2307      	movs	r3, #7
 800106c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800106e:	2302      	movs	r3, #2
 8001070:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001072:	2302      	movs	r3, #2
 8001074:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4618      	mov	r0, r3
 800107c:	f001 fcee 	bl	8002a5c <HAL_RCC_OscConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001086:	f000 f818 	bl	80010ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108a:	230f      	movs	r3, #15
 800108c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108e:	2303      	movs	r3, #3
 8001090:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	2104      	movs	r1, #4
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 f8b6 	bl	8003214 <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010ae:	f000 f804 	bl	80010ba <Error_Handler>
  }
}
 80010b2:	bf00      	nop
 80010b4:	3758      	adds	r7, #88	@ 0x58
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010be:	b672      	cpsid	i
}
 80010c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c2:	bf00      	nop
 80010c4:	e7fd      	b.n	80010c2 <Error_Handler+0x8>
	...

080010c8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_SPI2_Init+0x74>)
 80010ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <MX_SPI2_Init+0x78>)
 80010d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <MX_SPI2_Init+0x74>)
 80010d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <MX_SPI2_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_SPI2_Init+0x74>)
 80010e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_SPI2_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_SPI2_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_SPI2_Init+0x74>)
 80010f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_SPI2_Init+0x74>)
 80010fe:	2210      	movs	r2, #16
 8001100:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_SPI2_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_SPI2_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <MX_SPI2_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_SPI2_Init+0x74>)
 8001116:	2207      	movs	r2, #7
 8001118:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <MX_SPI2_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_SPI2_Init+0x74>)
 8001122:	2208      	movs	r2, #8
 8001124:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_SPI2_Init+0x74>)
 8001128:	f002 ff1c 	bl	8003f64 <HAL_SPI_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001132:	f7ff ffc2 	bl	80010ba <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000a8f4 	.word	0x2000a8f4
 8001140:	40003800 	.word	0x40003800

08001144 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a25      	ldr	r2, [pc, #148]	@ (80011f8 <HAL_SPI_MspInit+0xb4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d144      	bne.n	80011f0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001166:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <HAL_SPI_MspInit+0xb8>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116a:	4a24      	ldr	r2, [pc, #144]	@ (80011fc <HAL_SPI_MspInit+0xb8>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001170:	6593      	str	r3, [r2, #88]	@ 0x58
 8001172:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <HAL_SPI_MspInit+0xb8>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <HAL_SPI_MspInit+0xb8>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	4a1e      	ldr	r2, [pc, #120]	@ (80011fc <HAL_SPI_MspInit+0xb8>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118a:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <HAL_SPI_MspInit+0xb8>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <HAL_SPI_MspInit+0xb8>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	4a18      	ldr	r2, [pc, #96]	@ (80011fc <HAL_SPI_MspInit+0xb8>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a2:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <HAL_SPI_MspInit+0xb8>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011ae:	2308      	movs	r3, #8
 80011b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011be:	2305      	movs	r3, #5
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	480d      	ldr	r0, [pc, #52]	@ (8001200 <HAL_SPI_MspInit+0xbc>)
 80011ca:	f001 fa21 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011e0:	2305      	movs	r3, #5
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	@ (8001204 <HAL_SPI_MspInit+0xc0>)
 80011ec:	f001 fa10 	bl	8002610 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	@ 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40003800 	.word	0x40003800
 80011fc:	40021000 	.word	0x40021000
 8001200:	48000800 	.word	0x48000800
 8001204:	48000400 	.word	0x48000400

08001208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <HAL_MspInit+0x44>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001212:	4a0e      	ldr	r2, [pc, #56]	@ (800124c <HAL_MspInit+0x44>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6613      	str	r3, [r2, #96]	@ 0x60
 800121a:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <HAL_MspInit+0x44>)
 800121c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <HAL_MspInit+0x44>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122a:	4a08      	ldr	r2, [pc, #32]	@ (800124c <HAL_MspInit+0x44>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001230:	6593      	str	r3, [r2, #88]	@ 0x58
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_MspInit+0x44>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <NMI_Handler+0x4>

08001258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <MemManage_Handler+0x4>

08001268 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <UsageFault_Handler+0x4>

08001278 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a6:	f000 f8c9 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b8:	4a14      	ldr	r2, [pc, #80]	@ (800130c <_sbrk+0x5c>)
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <_sbrk+0x60>)
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c4:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <_sbrk+0x64>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <_sbrk+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d207      	bcs.n	80012f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e0:	f005 fcb8 	bl	8006c54 <__errno>
 80012e4:	4603      	mov	r3, r0
 80012e6:	220c      	movs	r2, #12
 80012e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	e009      	b.n	8001304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f0:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f6:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a05      	ldr	r2, [pc, #20]	@ (8001314 <_sbrk+0x64>)
 8001300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20018000 	.word	0x20018000
 8001310:	00000800 	.word	0x00000800
 8001314:	2000a958 	.word	0x2000a958
 8001318:	2000af88 	.word	0x2000af88

0800131c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <SystemInit+0x20>)
 8001322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <SystemInit+0x20>)
 8001328:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800132c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001378 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001344:	f7ff ffea 	bl	800131c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <LoopForever+0x6>)
  ldr r1, =_edata
 800134a:	490d      	ldr	r1, [pc, #52]	@ (8001380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800134c:	4a0d      	ldr	r2, [pc, #52]	@ (8001384 <LoopForever+0xe>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001360:	4c0a      	ldr	r4, [pc, #40]	@ (800138c <LoopForever+0x16>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136e:	f005 fc77 	bl	8006c60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001372:	f7ff fe2f 	bl	8000fd4 <main>

08001376 <LoopForever>:

LoopForever:
    b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001378:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	20000510 	.word	0x20000510
  ldr r2, =_sidata
 8001384:	0800b5c0 	.word	0x0800b5c0
  ldr r2, =_sbss
 8001388:	20000520 	.word	0x20000520
  ldr r4, =_ebss
 800138c:	2000af84 	.word	0x2000af84

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>

08001392 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f001 f811 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a2:	200f      	movs	r0, #15
 80013a4:	f000 f80e 	bl	80013c4 <HAL_InitTick>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	e001      	b.n	80013b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013b4:	f7ff ff28 	bl	8001208 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013d0:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <HAL_InitTick+0x6c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d023      	beq.n	8001420 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013d8:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <HAL_InitTick+0x70>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <HAL_InitTick+0x6c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 f80f 	bl	8002412 <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10f      	bne.n	800141a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d809      	bhi.n	8001414 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f000 ffe7 	bl	80023da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800140c:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <HAL_InitTick+0x74>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e007      	b.n	8001424 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	e004      	b.n	8001424 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e001      	b.n	8001424 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_IncTick+0x20>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <HAL_IncTick+0x24>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <HAL_IncTick+0x24>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008
 8001460:	2000a95c 	.word	0x2000a95c

08001464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return uwTick;
 8001468:	4b03      	ldr	r3, [pc, #12]	@ (8001478 <HAL_GetTick+0x14>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	2000a95c 	.word	0x2000a95c

0800147c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001484:	f7ff ffee 	bl	8001464 <HAL_GetTick>
 8001488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	d005      	beq.n	80014a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <HAL_Delay+0x44>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a2:	bf00      	nop
 80014a4:	f7ff ffde 	bl	8001464 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d8f7      	bhi.n	80014a4 <HAL_Delay+0x28>
  {
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000008 	.word	0x20000008

080014c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	609a      	str	r2, [r3, #8]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	609a      	str	r2, [r3, #8]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3360      	adds	r3, #96	@ 0x60
 800153e:	461a      	mov	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <LL_ADC_SetOffset+0x44>)
 800154e:	4013      	ands	r3, r2
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	4313      	orrs	r3, r2
 800155c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001564:	bf00      	nop
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	03fff000 	.word	0x03fff000

08001574 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3360      	adds	r3, #96	@ 0x60
 8001582:	461a      	mov	r2, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3360      	adds	r3, #96	@ 0x60
 80015b0:	461a      	mov	r2, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	431a      	orrs	r2, r3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015ca:	bf00      	nop
 80015cc:	371c      	adds	r7, #28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b087      	sub	sp, #28
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3330      	adds	r3, #48	@ 0x30
 80015e6:	461a      	mov	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	4413      	add	r3, r2
 80015f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	211f      	movs	r1, #31
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	401a      	ands	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	0e9b      	lsrs	r3, r3, #26
 800160e:	f003 011f 	and.w	r1, r3, #31
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	f003 031f 	and.w	r3, r3, #31
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	431a      	orrs	r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001622:	bf00      	nop
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800162e:	b480      	push	{r7}
 8001630:	b087      	sub	sp, #28
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3314      	adds	r3, #20
 800163e:	461a      	mov	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	0e5b      	lsrs	r3, r3, #25
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	4413      	add	r3, r2
 800164c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	0d1b      	lsrs	r3, r3, #20
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	2107      	movs	r1, #7
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	401a      	ands	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	0d1b      	lsrs	r3, r3, #20
 8001668:	f003 031f 	and.w	r3, r3, #31
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	431a      	orrs	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001678:	bf00      	nop
 800167a:	371c      	adds	r7, #28
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800169c:	43db      	mvns	r3, r3
 800169e:	401a      	ands	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0318 	and.w	r3, r3, #24
 80016a6:	4908      	ldr	r1, [pc, #32]	@ (80016c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016a8:	40d9      	lsrs	r1, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	400b      	ands	r3, r1
 80016ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b2:	431a      	orrs	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	0007ffff 	.word	0x0007ffff

080016cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80016dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6093      	str	r3, [r2, #8]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001704:	d101      	bne.n	800170a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001728:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800172c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001754:	d101      	bne.n	800175a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <LL_ADC_IsEnabled+0x18>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <LL_ADC_IsEnabled+0x1a>
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d101      	bne.n	80017a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d101      	bne.n	80017cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e130      	b.n	8001a58 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001800:	2b00      	cmp	r3, #0
 8001802:	d109      	bne.n	8001818 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff f94d 	bl	8000aa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff67 	bl	80016f0 <LL_ADC_IsDeepPowerDownEnabled>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff4d 	bl	80016cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff82 	bl	8001740 <LL_ADC_IsInternalRegulatorEnabled>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d115      	bne.n	800186e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff66 	bl	8001718 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800184c:	4b84      	ldr	r3, [pc, #528]	@ (8001a60 <HAL_ADC_Init+0x284>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	099b      	lsrs	r3, r3, #6
 8001852:	4a84      	ldr	r2, [pc, #528]	@ (8001a64 <HAL_ADC_Init+0x288>)
 8001854:	fba2 2303 	umull	r2, r3, r2, r3
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	3301      	adds	r3, #1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001860:	e002      	b.n	8001868 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3b01      	subs	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f9      	bne.n	8001862 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff64 	bl	8001740 <LL_ADC_IsInternalRegulatorEnabled>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10d      	bne.n	800189a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001882:	f043 0210 	orr.w	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	f043 0201 	orr.w	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff75 	bl	800178e <LL_ADC_REG_IsConversionOngoing>
 80018a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 80c9 	bne.w	8001a46 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 80c5 	bne.w	8001a46 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018c4:	f043 0202 	orr.w	r2, r3, #2
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff49 	bl	8001768 <LL_ADC_IsEnabled>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d115      	bne.n	8001908 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018dc:	4862      	ldr	r0, [pc, #392]	@ (8001a68 <HAL_ADC_Init+0x28c>)
 80018de:	f7ff ff43 	bl	8001768 <LL_ADC_IsEnabled>
 80018e2:	4604      	mov	r4, r0
 80018e4:	4861      	ldr	r0, [pc, #388]	@ (8001a6c <HAL_ADC_Init+0x290>)
 80018e6:	f7ff ff3f 	bl	8001768 <LL_ADC_IsEnabled>
 80018ea:	4603      	mov	r3, r0
 80018ec:	431c      	orrs	r4, r3
 80018ee:	4860      	ldr	r0, [pc, #384]	@ (8001a70 <HAL_ADC_Init+0x294>)
 80018f0:	f7ff ff3a 	bl	8001768 <LL_ADC_IsEnabled>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4323      	orrs	r3, r4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	4619      	mov	r1, r3
 8001902:	485c      	ldr	r0, [pc, #368]	@ (8001a74 <HAL_ADC_Init+0x298>)
 8001904:	f7ff fdde 	bl	80014c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7e5b      	ldrb	r3, [r3, #25]
 800190c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001912:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001918:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800191e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001926:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d106      	bne.n	8001944 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	3b01      	subs	r3, #1
 800193c:	045b      	lsls	r3, r3, #17
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	d009      	beq.n	8001960 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001950:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001958:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	4b44      	ldr	r3, [pc, #272]	@ (8001a78 <HAL_ADC_Init+0x29c>)
 8001968:	4013      	ands	r3, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	69b9      	ldr	r1, [r7, #24]
 8001970:	430b      	orrs	r3, r1
 8001972:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff1b 	bl	80017b4 <LL_ADC_INJ_IsConversionOngoing>
 800197e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d13d      	bne.n	8001a02 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d13a      	bne.n	8001a02 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001990:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001998:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019a8:	f023 0302 	bic.w	r3, r3, #2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	69b9      	ldr	r1, [r7, #24]
 80019b2:	430b      	orrs	r3, r1
 80019b4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d118      	bne.n	80019f2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80019ca:	f023 0304 	bic.w	r3, r3, #4
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019d6:	4311      	orrs	r1, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80019dc:	4311      	orrs	r1, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019e2:	430a      	orrs	r2, r1
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	611a      	str	r2, [r3, #16]
 80019f0:	e007      	b.n	8001a02 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0201 	bic.w	r2, r2, #1
 8001a00:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d10c      	bne.n	8001a24 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a10:	f023 010f 	bic.w	r1, r3, #15
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	1e5a      	subs	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a22:	e007      	b.n	8001a34 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 020f 	bic.w	r2, r2, #15
 8001a32:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a38:	f023 0303 	bic.w	r3, r3, #3
 8001a3c:	f043 0201 	orr.w	r2, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a44:	e007      	b.n	8001a56 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4a:	f043 0210 	orr.w	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3724      	adds	r7, #36	@ 0x24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd90      	pop	{r4, r7, pc}
 8001a60:	20000000 	.word	0x20000000
 8001a64:	053e2d63 	.word	0x053e2d63
 8001a68:	50040000 	.word	0x50040000
 8001a6c:	50040100 	.word	0x50040100
 8001a70:	50040200 	.word	0x50040200
 8001a74:	50040300 	.word	0x50040300
 8001a78:	fff0c007 	.word	0xfff0c007

08001a7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b0b6      	sub	sp, #216	@ 0xd8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x22>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e3c9      	b.n	8002232 <HAL_ADC_ConfigChannel+0x7b6>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fe6f 	bl	800178e <LL_ADC_REG_IsConversionOngoing>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 83aa 	bne.w	800220c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d824      	bhi.n	8001b12 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	3b02      	subs	r3, #2
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d81b      	bhi.n	8001b0a <HAL_ADC_ConfigChannel+0x8e>
 8001ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad8 <HAL_ADC_ConfigChannel+0x5c>)
 8001ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad8:	08001ae9 	.word	0x08001ae9
 8001adc:	08001af1 	.word	0x08001af1
 8001ae0:	08001af9 	.word	0x08001af9
 8001ae4:	08001b01 	.word	0x08001b01
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001ae8:	230c      	movs	r3, #12
 8001aea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001aee:	e010      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001af0:	2312      	movs	r3, #18
 8001af2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001af6:	e00c      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001af8:	2318      	movs	r3, #24
 8001afa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001afe:	e008      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001b00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b08:	e003      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001b0a:	2306      	movs	r3, #6
 8001b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b10:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001b20:	f7ff fd59 	bl	80015d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fe30 	bl	800178e <LL_ADC_REG_IsConversionOngoing>
 8001b2e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fe3c 	bl	80017b4 <LL_ADC_INJ_IsConversionOngoing>
 8001b3c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f040 81a4 	bne.w	8001e92 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f040 819f 	bne.w	8001e92 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6819      	ldr	r1, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	461a      	mov	r2, r3
 8001b62:	f7ff fd64 	bl	800162e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d00a      	beq.n	8001b9e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6919      	ldr	r1, [r3, #16]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b98:	f7ff fcc8 	bl	800152c <LL_ADC_SetOffset>
 8001b9c:	e179      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fce5 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10a      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x14e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fcda 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	0e9b      	lsrs	r3, r3, #26
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	e01e      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x18c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fccf 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001be8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	e004      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001bfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d105      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x1a4>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	0e9b      	lsrs	r3, r3, #26
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	e018      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x1d6>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001c34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001c3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001c44:	2320      	movs	r3, #32
 8001c46:	e004      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001c48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d106      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fc9e 	bl	80015a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2101      	movs	r1, #1
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fc82 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10a      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x214>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2101      	movs	r1, #1
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fc77 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	0e9b      	lsrs	r3, r3, #26
 8001c8a:	f003 021f 	and.w	r2, r3, #31
 8001c8e:	e01e      	b.n	8001cce <HAL_ADC_ConfigChannel+0x252>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2101      	movs	r1, #1
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fc6c 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ca6:	fa93 f3a3 	rbit	r3, r3
 8001caa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001cae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001cb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	e004      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d105      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x26a>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	0e9b      	lsrs	r3, r3, #26
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	e018      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x29c>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001cfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001cfe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001d02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	e004      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001d0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d106      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2200      	movs	r2, #0
 8001d22:	2101      	movs	r1, #1
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fc3b 	bl	80015a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2102      	movs	r1, #2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fc1f 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10a      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x2da>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2102      	movs	r1, #2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fc14 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	0e9b      	lsrs	r3, r3, #26
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	e01e      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x318>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fc09 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d6c:	fa93 f3a3 	rbit	r3, r3
 8001d70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001d84:	2320      	movs	r3, #32
 8001d86:	e004      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d105      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x330>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0e9b      	lsrs	r3, r3, #26
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	e014      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x35a>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	e004      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d106      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2200      	movs	r2, #0
 8001de0:	2102      	movs	r1, #2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fbdc 	bl	80015a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2103      	movs	r1, #3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fbc0 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10a      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x398>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2103      	movs	r1, #3
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fbb5 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	f003 021f 	and.w	r2, r3, #31
 8001e12:	e017      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x3c8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2103      	movs	r1, #3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fbaa 	bl	8001574 <LL_ADC_GetOffsetChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e2e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001e30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001e36:	2320      	movs	r3, #32
 8001e38:	e003      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001e3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d105      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x3e0>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0e9b      	lsrs	r3, r3, #26
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	e011      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x404>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001e6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001e6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001e74:	2320      	movs	r3, #32
 8001e76:	e003      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001e78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d106      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fb87 	bl	80015a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fc66 	bl	8001768 <LL_ADC_IsEnabled>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 8140 	bne.w	8002124 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	6819      	ldr	r1, [r3, #0]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f7ff fbe7 	bl	8001684 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	4a8f      	ldr	r2, [pc, #572]	@ (80020f8 <HAL_ADC_ConfigChannel+0x67c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	f040 8131 	bne.w	8002124 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10b      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x46e>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	0e9b      	lsrs	r3, r3, #26
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	2b09      	cmp	r3, #9
 8001ee0:	bf94      	ite	ls
 8001ee2:	2301      	movls	r3, #1
 8001ee4:	2300      	movhi	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	e019      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x4a2>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001efa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001efc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001f02:	2320      	movs	r3, #32
 8001f04:	e003      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	bf94      	ite	ls
 8001f18:	2301      	movls	r3, #1
 8001f1a:	2300      	movhi	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d079      	beq.n	8002016 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d107      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x4c2>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	0e9b      	lsrs	r3, r3, #26
 8001f34:	3301      	adds	r3, #1
 8001f36:	069b      	lsls	r3, r3, #26
 8001f38:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f3c:	e015      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x4ee>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001f4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f4e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001f50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001f56:	2320      	movs	r3, #32
 8001f58:	e003      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	3301      	adds	r3, #1
 8001f64:	069b      	lsls	r3, r3, #26
 8001f66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x50e>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	0e9b      	lsrs	r3, r3, #26
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2101      	movs	r1, #1
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	e017      	b.n	8001fba <HAL_ADC_ConfigChannel+0x53e>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	e003      	b.n	8001fae <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	ea42 0103 	orr.w	r1, r2, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10a      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x564>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	0e9b      	lsrs	r3, r3, #26
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	f003 021f 	and.w	r2, r3, #31
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	051b      	lsls	r3, r3, #20
 8001fde:	e018      	b.n	8002012 <HAL_ADC_ConfigChannel+0x596>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	e003      	b.n	8002004 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	3301      	adds	r3, #1
 8002006:	f003 021f 	and.w	r2, r3, #31
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002012:	430b      	orrs	r3, r1
 8002014:	e081      	b.n	800211a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201e:	2b00      	cmp	r3, #0
 8002020:	d107      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x5b6>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0e9b      	lsrs	r3, r3, #26
 8002028:	3301      	adds	r3, #1
 800202a:	069b      	lsls	r3, r3, #26
 800202c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002030:	e015      	b.n	800205e <HAL_ADC_ConfigChannel+0x5e2>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800204a:	2320      	movs	r3, #32
 800204c:	e003      	b.n	8002056 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800204e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	3301      	adds	r3, #1
 8002058:	069b      	lsls	r3, r3, #26
 800205a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002066:	2b00      	cmp	r3, #0
 8002068:	d109      	bne.n	800207e <HAL_ADC_ConfigChannel+0x602>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	0e9b      	lsrs	r3, r3, #26
 8002070:	3301      	adds	r3, #1
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	2101      	movs	r1, #1
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	e017      	b.n	80020ae <HAL_ADC_ConfigChannel+0x632>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	61bb      	str	r3, [r7, #24]
  return result;
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002096:	2320      	movs	r3, #32
 8002098:	e003      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	ea42 0103 	orr.w	r1, r2, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10d      	bne.n	80020da <HAL_ADC_ConfigChannel+0x65e>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	0e9b      	lsrs	r3, r3, #26
 80020c4:	3301      	adds	r3, #1
 80020c6:	f003 021f 	and.w	r2, r3, #31
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	3b1e      	subs	r3, #30
 80020d2:	051b      	lsls	r3, r3, #20
 80020d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020d8:	e01e      	b.n	8002118 <HAL_ADC_ConfigChannel+0x69c>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	60fb      	str	r3, [r7, #12]
  return result;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d104      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80020f2:	2320      	movs	r3, #32
 80020f4:	e006      	b.n	8002104 <HAL_ADC_ConfigChannel+0x688>
 80020f6:	bf00      	nop
 80020f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	3301      	adds	r3, #1
 8002106:	f003 021f 	and.w	r2, r3, #31
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	3b1e      	subs	r3, #30
 8002112:	051b      	lsls	r3, r3, #20
 8002114:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002118:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800211e:	4619      	mov	r1, r3
 8002120:	f7ff fa85 	bl	800162e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b44      	ldr	r3, [pc, #272]	@ (800223c <HAL_ADC_ConfigChannel+0x7c0>)
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d07a      	beq.n	8002226 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002130:	4843      	ldr	r0, [pc, #268]	@ (8002240 <HAL_ADC_ConfigChannel+0x7c4>)
 8002132:	f7ff f9ed 	bl	8001510 <LL_ADC_GetCommonPathInternalCh>
 8002136:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a41      	ldr	r2, [pc, #260]	@ (8002244 <HAL_ADC_ConfigChannel+0x7c8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d12c      	bne.n	800219e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002144:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002148:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d126      	bne.n	800219e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3c      	ldr	r2, [pc, #240]	@ (8002248 <HAL_ADC_ConfigChannel+0x7cc>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x6e8>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a3b      	ldr	r2, [pc, #236]	@ (800224c <HAL_ADC_ConfigChannel+0x7d0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d15d      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002168:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800216c:	4619      	mov	r1, r3
 800216e:	4834      	ldr	r0, [pc, #208]	@ (8002240 <HAL_ADC_ConfigChannel+0x7c4>)
 8002170:	f7ff f9bb 	bl	80014ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002174:	4b36      	ldr	r3, [pc, #216]	@ (8002250 <HAL_ADC_ConfigChannel+0x7d4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	099b      	lsrs	r3, r3, #6
 800217a:	4a36      	ldr	r2, [pc, #216]	@ (8002254 <HAL_ADC_ConfigChannel+0x7d8>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800218e:	e002      	b.n	8002196 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	3b01      	subs	r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f9      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800219c:	e040      	b.n	8002220 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002258 <HAL_ADC_ConfigChannel+0x7dc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d118      	bne.n	80021da <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d112      	bne.n	80021da <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a23      	ldr	r2, [pc, #140]	@ (8002248 <HAL_ADC_ConfigChannel+0x7cc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d004      	beq.n	80021c8 <HAL_ADC_ConfigChannel+0x74c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a22      	ldr	r2, [pc, #136]	@ (800224c <HAL_ADC_ConfigChannel+0x7d0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d12d      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021d0:	4619      	mov	r1, r3
 80021d2:	481b      	ldr	r0, [pc, #108]	@ (8002240 <HAL_ADC_ConfigChannel+0x7c4>)
 80021d4:	f7ff f989 	bl	80014ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021d8:	e024      	b.n	8002224 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1f      	ldr	r2, [pc, #124]	@ (800225c <HAL_ADC_ConfigChannel+0x7e0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d120      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d11a      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a14      	ldr	r2, [pc, #80]	@ (8002248 <HAL_ADC_ConfigChannel+0x7cc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d115      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002202:	4619      	mov	r1, r3
 8002204:	480e      	ldr	r0, [pc, #56]	@ (8002240 <HAL_ADC_ConfigChannel+0x7c4>)
 8002206:	f7ff f970 	bl	80014ea <LL_ADC_SetCommonPathInternalCh>
 800220a:	e00c      	b.n	8002226 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002210:	f043 0220 	orr.w	r2, r3, #32
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800221e:	e002      	b.n	8002226 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002220:	bf00      	nop
 8002222:	e000      	b.n	8002226 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002224:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800222e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002232:	4618      	mov	r0, r3
 8002234:	37d8      	adds	r7, #216	@ 0xd8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	80080000 	.word	0x80080000
 8002240:	50040300 	.word	0x50040300
 8002244:	c7520000 	.word	0xc7520000
 8002248:	50040000 	.word	0x50040000
 800224c:	50040200 	.word	0x50040200
 8002250:	20000000 	.word	0x20000000
 8002254:	053e2d63 	.word	0x053e2d63
 8002258:	cb840000 	.word	0xcb840000
 800225c:	80000001 	.word	0x80000001

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800228c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db0a      	blt.n	80022ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	490c      	ldr	r1, [pc, #48]	@ (8002310 <__NVIC_SetPriority+0x4c>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ec:	e00a      	b.n	8002304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4908      	ldr	r1, [pc, #32]	@ (8002314 <__NVIC_SetPriority+0x50>)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3b04      	subs	r3, #4
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	440b      	add	r3, r1
 8002302:	761a      	strb	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000e100 	.word	0xe000e100
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	@ 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f1c3 0307 	rsb	r3, r3, #7
 8002332:	2b04      	cmp	r3, #4
 8002334:	bf28      	it	cs
 8002336:	2304      	movcs	r3, #4
 8002338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3304      	adds	r3, #4
 800233e:	2b06      	cmp	r3, #6
 8002340:	d902      	bls.n	8002348 <NVIC_EncodePriority+0x30>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3b03      	subs	r3, #3
 8002346:	e000      	b.n	800234a <NVIC_EncodePriority+0x32>
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002360:	f04f 31ff 	mov.w	r1, #4294967295
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43d9      	mvns	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	4313      	orrs	r3, r2
         );
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	@ 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002390:	d301      	bcc.n	8002396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002392:	2301      	movs	r3, #1
 8002394:	e00f      	b.n	80023b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002396:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <SysTick_Config+0x40>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239e:	210f      	movs	r1, #15
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f7ff ff8e 	bl	80022c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <SysTick_Config+0x40>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <SysTick_Config+0x40>)
 80023b0:	2207      	movs	r2, #7
 80023b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	e000e010 	.word	0xe000e010

080023c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ff47 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023ec:	f7ff ff5c 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 80023f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7ff ff8e 	bl	8002318 <NVIC_EncodePriority>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff5d 	bl	80022c4 <__NVIC_SetPriority>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffb0 	bl	8002380 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e054      	b.n	80024e8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7f5b      	ldrb	r3, [r3, #29]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe fbd0 	bl	8000bf4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	791b      	ldrb	r3, [r3, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a22      	ldr	r2, [pc, #136]	@ (80024f0 <HAL_CRC_Init+0xc4>)
 8002468:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0218 	bic.w	r2, r2, #24
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	e00c      	b.n	8002496 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6899      	ldr	r1, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	461a      	mov	r2, r3
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f834 	bl	80024f4 <HAL_CRCEx_Polynomial_Set>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e028      	b.n	80024e8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	795b      	ldrb	r3, [r3, #5]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d105      	bne.n	80024aa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f04f 32ff 	mov.w	r2, #4294967295
 80024a6:	611a      	str	r2, [r3, #16]
 80024a8:	e004      	b.n	80024b4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6912      	ldr	r2, [r2, #16]
 80024b2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699a      	ldr	r2, [r3, #24]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	04c11db7 	.word	0x04c11db7

080024f4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002504:	231f      	movs	r3, #31
 8002506:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	75fb      	strb	r3, [r7, #23]
 8002516:	e063      	b.n	80025e0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002518:	bf00      	nop
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1e5a      	subs	r2, r3, #1
 800251e:	613a      	str	r2, [r7, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_CRCEx_Polynomial_Set+0x44>
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b18      	cmp	r3, #24
 800253c:	d846      	bhi.n	80025cc <HAL_CRCEx_Polynomial_Set+0xd8>
 800253e:	a201      	add	r2, pc, #4	@ (adr r2, 8002544 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002544:	080025d3 	.word	0x080025d3
 8002548:	080025cd 	.word	0x080025cd
 800254c:	080025cd 	.word	0x080025cd
 8002550:	080025cd 	.word	0x080025cd
 8002554:	080025cd 	.word	0x080025cd
 8002558:	080025cd 	.word	0x080025cd
 800255c:	080025cd 	.word	0x080025cd
 8002560:	080025cd 	.word	0x080025cd
 8002564:	080025c1 	.word	0x080025c1
 8002568:	080025cd 	.word	0x080025cd
 800256c:	080025cd 	.word	0x080025cd
 8002570:	080025cd 	.word	0x080025cd
 8002574:	080025cd 	.word	0x080025cd
 8002578:	080025cd 	.word	0x080025cd
 800257c:	080025cd 	.word	0x080025cd
 8002580:	080025cd 	.word	0x080025cd
 8002584:	080025b5 	.word	0x080025b5
 8002588:	080025cd 	.word	0x080025cd
 800258c:	080025cd 	.word	0x080025cd
 8002590:	080025cd 	.word	0x080025cd
 8002594:	080025cd 	.word	0x080025cd
 8002598:	080025cd 	.word	0x080025cd
 800259c:	080025cd 	.word	0x080025cd
 80025a0:	080025cd 	.word	0x080025cd
 80025a4:	080025a9 	.word	0x080025a9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d913      	bls.n	80025d6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80025b2:	e010      	b.n	80025d6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2b07      	cmp	r3, #7
 80025b8:	d90f      	bls.n	80025da <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80025be:	e00c      	b.n	80025da <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	2b0f      	cmp	r3, #15
 80025c4:	d90b      	bls.n	80025de <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80025ca:	e008      	b.n	80025de <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	75fb      	strb	r3, [r7, #23]
        break;
 80025d0:	e006      	b.n	80025e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80025d2:	bf00      	nop
 80025d4:	e004      	b.n	80025e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80025d6:	bf00      	nop
 80025d8:	e002      	b.n	80025e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80025da:	bf00      	nop
 80025dc:	e000      	b.n	80025e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80025de:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10d      	bne.n	8002602 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f023 0118 	bic.w	r1, r3, #24
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	430a      	orrs	r2, r1
 8002600:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002602:	7dfb      	ldrb	r3, [r7, #23]
}
 8002604:	4618      	mov	r0, r3
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800261e:	e17f      	b.n	8002920 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2101      	movs	r1, #1
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	4013      	ands	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8171 	beq.w	800291a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d005      	beq.n	8002650 <HAL_GPIO_Init+0x40>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d130      	bne.n	80026b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002686:	2201      	movs	r2, #1
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 0201 	and.w	r2, r3, #1
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d118      	bne.n	80026f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80026c4:	2201      	movs	r2, #1
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	08db      	lsrs	r3, r3, #3
 80026da:	f003 0201 	and.w	r2, r3, #1
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d017      	beq.n	800272c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d123      	bne.n	8002780 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	08da      	lsrs	r2, r3, #3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3208      	adds	r2, #8
 8002740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	220f      	movs	r2, #15
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	08da      	lsrs	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3208      	adds	r2, #8
 800277a:	6939      	ldr	r1, [r7, #16]
 800277c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0203 	and.w	r2, r3, #3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80ac 	beq.w	800291a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002940 <HAL_GPIO_Init+0x330>)
 80027c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002940 <HAL_GPIO_Init+0x330>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80027ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002940 <HAL_GPIO_Init+0x330>)
 80027d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027da:	4a5a      	ldr	r2, [pc, #360]	@ (8002944 <HAL_GPIO_Init+0x334>)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	220f      	movs	r2, #15
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002804:	d025      	beq.n	8002852 <HAL_GPIO_Init+0x242>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4f      	ldr	r2, [pc, #316]	@ (8002948 <HAL_GPIO_Init+0x338>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d01f      	beq.n	800284e <HAL_GPIO_Init+0x23e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4e      	ldr	r2, [pc, #312]	@ (800294c <HAL_GPIO_Init+0x33c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d019      	beq.n	800284a <HAL_GPIO_Init+0x23a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4d      	ldr	r2, [pc, #308]	@ (8002950 <HAL_GPIO_Init+0x340>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d013      	beq.n	8002846 <HAL_GPIO_Init+0x236>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4c      	ldr	r2, [pc, #304]	@ (8002954 <HAL_GPIO_Init+0x344>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00d      	beq.n	8002842 <HAL_GPIO_Init+0x232>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a4b      	ldr	r2, [pc, #300]	@ (8002958 <HAL_GPIO_Init+0x348>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d007      	beq.n	800283e <HAL_GPIO_Init+0x22e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4a      	ldr	r2, [pc, #296]	@ (800295c <HAL_GPIO_Init+0x34c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d101      	bne.n	800283a <HAL_GPIO_Init+0x22a>
 8002836:	2306      	movs	r3, #6
 8002838:	e00c      	b.n	8002854 <HAL_GPIO_Init+0x244>
 800283a:	2307      	movs	r3, #7
 800283c:	e00a      	b.n	8002854 <HAL_GPIO_Init+0x244>
 800283e:	2305      	movs	r3, #5
 8002840:	e008      	b.n	8002854 <HAL_GPIO_Init+0x244>
 8002842:	2304      	movs	r3, #4
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x244>
 8002846:	2303      	movs	r3, #3
 8002848:	e004      	b.n	8002854 <HAL_GPIO_Init+0x244>
 800284a:	2302      	movs	r3, #2
 800284c:	e002      	b.n	8002854 <HAL_GPIO_Init+0x244>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_GPIO_Init+0x244>
 8002852:	2300      	movs	r3, #0
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	f002 0203 	and.w	r2, r2, #3
 800285a:	0092      	lsls	r2, r2, #2
 800285c:	4093      	lsls	r3, r2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002864:	4937      	ldr	r1, [pc, #220]	@ (8002944 <HAL_GPIO_Init+0x334>)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	3302      	adds	r3, #2
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002872:	4b3b      	ldr	r3, [pc, #236]	@ (8002960 <HAL_GPIO_Init+0x350>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002896:	4a32      	ldr	r2, [pc, #200]	@ (8002960 <HAL_GPIO_Init+0x350>)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800289c:	4b30      	ldr	r3, [pc, #192]	@ (8002960 <HAL_GPIO_Init+0x350>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028c0:	4a27      	ldr	r2, [pc, #156]	@ (8002960 <HAL_GPIO_Init+0x350>)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028c6:	4b26      	ldr	r3, [pc, #152]	@ (8002960 <HAL_GPIO_Init+0x350>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002960 <HAL_GPIO_Init+0x350>)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <HAL_GPIO_Init+0x350>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002914:	4a12      	ldr	r2, [pc, #72]	@ (8002960 <HAL_GPIO_Init+0x350>)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3301      	adds	r3, #1
 800291e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fa22 f303 	lsr.w	r3, r2, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	f47f ae78 	bne.w	8002620 <HAL_GPIO_Init+0x10>
  }
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	40010000 	.word	0x40010000
 8002948:	48000400 	.word	0x48000400
 800294c:	48000800 	.word	0x48000800
 8002950:	48000c00 	.word	0x48000c00
 8002954:	48001000 	.word	0x48001000
 8002958:	48001400 	.word	0x48001400
 800295c:	48001800 	.word	0x48001800
 8002960:	40010400 	.word	0x40010400

08002964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]
 8002970:	4613      	mov	r3, r2
 8002972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002974:	787b      	ldrb	r3, [r7, #1]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800297a:	887a      	ldrh	r2, [r7, #2]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002980:	e002      	b.n	8002988 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002982:	887a      	ldrh	r2, [r7, #2]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002998:	4b04      	ldr	r3, [pc, #16]	@ (80029ac <HAL_PWREx_GetVoltageRange+0x18>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40007000 	.word	0x40007000

080029b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029be:	d130      	bne.n	8002a22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029c0:	4b23      	ldr	r3, [pc, #140]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029cc:	d038      	beq.n	8002a40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ce:	4b20      	ldr	r3, [pc, #128]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029de:	4b1d      	ldr	r3, [pc, #116]	@ (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2232      	movs	r2, #50	@ 0x32
 80029e4:	fb02 f303 	mul.w	r3, r2, r3
 80029e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	0c9b      	lsrs	r3, r3, #18
 80029f0:	3301      	adds	r3, #1
 80029f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029f4:	e002      	b.n	80029fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029fc:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a08:	d102      	bne.n	8002a10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f2      	bne.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a10:	4b0f      	ldr	r3, [pc, #60]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a1c:	d110      	bne.n	8002a40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e00f      	b.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a22:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a2e:	d007      	beq.n	8002a40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a30:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a38:	4a05      	ldr	r2, [pc, #20]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40007000 	.word	0x40007000
 8002a54:	20000000 	.word	0x20000000
 8002a58:	431bde83 	.word	0x431bde83

08002a5c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e3ca      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6e:	4b97      	ldr	r3, [pc, #604]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a78:	4b94      	ldr	r3, [pc, #592]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80e4 	beq.w	8002c58 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x4a>
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	f040 808b 	bne.w	8002bb4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	f040 8087 	bne.w	8002bb4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aa6:	4b89      	ldr	r3, [pc, #548]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_RCC_OscConfig+0x62>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e3a2      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1a      	ldr	r2, [r3, #32]
 8002ac2:	4b82      	ldr	r3, [pc, #520]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d004      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x7c>
 8002ace:	4b7f      	ldr	r3, [pc, #508]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ad6:	e005      	b.n	8002ae4 <HAL_RCC_OscConfig+0x88>
 8002ad8:	4b7c      	ldr	r3, [pc, #496]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d223      	bcs.n	8002b30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fd1d 	bl	800352c <RCC_SetFlashLatencyFromMSIRange>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e383      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002afc:	4b73      	ldr	r3, [pc, #460]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a72      	ldr	r2, [pc, #456]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002b02:	f043 0308 	orr.w	r3, r3, #8
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4b70      	ldr	r3, [pc, #448]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	496d      	ldr	r1, [pc, #436]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b1a:	4b6c      	ldr	r3, [pc, #432]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	4968      	ldr	r1, [pc, #416]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
 8002b2e:	e025      	b.n	8002b7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b30:	4b66      	ldr	r3, [pc, #408]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a65      	ldr	r2, [pc, #404]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002b36:	f043 0308 	orr.w	r3, r3, #8
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b63      	ldr	r3, [pc, #396]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4960      	ldr	r1, [pc, #384]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	495b      	ldr	r1, [pc, #364]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d109      	bne.n	8002b7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fcdd 	bl	800352c <RCC_SetFlashLatencyFromMSIRange>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e343      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b7c:	f000 fc4a 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b52      	ldr	r3, [pc, #328]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	4950      	ldr	r1, [pc, #320]	@ (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
 8002b98:	4a4e      	ldr	r2, [pc, #312]	@ (8002cd4 <HAL_RCC_OscConfig+0x278>)
 8002b9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b9c:	4b4e      	ldr	r3, [pc, #312]	@ (8002cd8 <HAL_RCC_OscConfig+0x27c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe fc0f 	bl	80013c4 <HAL_InitTick>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d052      	beq.n	8002c56 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	e327      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d032      	beq.n	8002c22 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bbc:	4b43      	ldr	r3, [pc, #268]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a42      	ldr	r2, [pc, #264]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fc4c 	bl	8001464 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd0:	f7fe fc48 	bl	8001464 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e310      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002be2:	4b3a      	ldr	r3, [pc, #232]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bee:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a36      	ldr	r2, [pc, #216]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002bf4:	f043 0308 	orr.w	r3, r3, #8
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b34      	ldr	r3, [pc, #208]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	4931      	ldr	r1, [pc, #196]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	492c      	ldr	r1, [pc, #176]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
 8002c20:	e01a      	b.n	8002c58 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c22:	4b2a      	ldr	r3, [pc, #168]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a29      	ldr	r2, [pc, #164]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c2e:	f7fe fc19 	bl	8001464 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c36:	f7fe fc15 	bl	8001464 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e2dd      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c48:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f0      	bne.n	8002c36 <HAL_RCC_OscConfig+0x1da>
 8002c54:	e000      	b.n	8002c58 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c56:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d074      	beq.n	8002d4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d005      	beq.n	8002c76 <HAL_RCC_OscConfig+0x21a>
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	d10e      	bne.n	8002c8e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d10b      	bne.n	8002c8e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c76:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d064      	beq.n	8002d4c <HAL_RCC_OscConfig+0x2f0>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d160      	bne.n	8002d4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e2ba      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x24a>
 8002c98:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	e026      	b.n	8002cf4 <HAL_RCC_OscConfig+0x298>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cae:	d115      	bne.n	8002cdc <HAL_RCC_OscConfig+0x280>
 8002cb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a05      	ldr	r2, [pc, #20]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002cb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a02      	ldr	r2, [pc, #8]	@ (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002cc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	e014      	b.n	8002cf4 <HAL_RCC_OscConfig+0x298>
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	08007854 	.word	0x08007854
 8002cd4:	20000000 	.word	0x20000000
 8002cd8:	20000004 	.word	0x20000004
 8002cdc:	4ba0      	ldr	r3, [pc, #640]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a9f      	ldr	r2, [pc, #636]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b9d      	ldr	r3, [pc, #628]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a9c      	ldr	r2, [pc, #624]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fbb2 	bl	8001464 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d04:	f7fe fbae 	bl	8001464 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	@ 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e276      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d16:	4b92      	ldr	r3, [pc, #584]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x2a8>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fb9e 	bl	8001464 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fe fb9a 	bl	8001464 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	@ 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e262      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d3e:	4b88      	ldr	r3, [pc, #544]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x2d0>
 8002d4a:	e000      	b.n	8002d4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d060      	beq.n	8002e1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_OscConfig+0x310>
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	d119      	bne.n	8002d9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d116      	bne.n	8002d9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d6c:	4b7c      	ldr	r3, [pc, #496]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_OscConfig+0x328>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e23f      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d84:	4b76      	ldr	r3, [pc, #472]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	4973      	ldr	r1, [pc, #460]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d98:	e040      	b.n	8002e1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d023      	beq.n	8002dea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da2:	4b6f      	ldr	r3, [pc, #444]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a6e      	ldr	r2, [pc, #440]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7fe fb59 	bl	8001464 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db6:	f7fe fb55 	bl	8001464 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e21d      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc8:	4b65      	ldr	r3, [pc, #404]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	4b62      	ldr	r3, [pc, #392]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	495f      	ldr	r1, [pc, #380]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
 8002de8:	e018      	b.n	8002e1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dea:	4b5d      	ldr	r3, [pc, #372]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a5c      	ldr	r2, [pc, #368]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002df0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe fb35 	bl	8001464 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfe:	f7fe fb31 	bl	8001464 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1f9      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e10:	4b53      	ldr	r3, [pc, #332]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f0      	bne.n	8002dfe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d03c      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01c      	beq.n	8002e6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e30:	4b4b      	ldr	r3, [pc, #300]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e36:	4a4a      	ldr	r2, [pc, #296]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7fe fb10 	bl	8001464 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e48:	f7fe fb0c 	bl	8001464 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e1d4      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e5a:	4b41      	ldr	r3, [pc, #260]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ef      	beq.n	8002e48 <HAL_RCC_OscConfig+0x3ec>
 8002e68:	e01b      	b.n	8002ea2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e70:	4a3b      	ldr	r2, [pc, #236]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7a:	f7fe faf3 	bl	8001464 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e82:	f7fe faef 	bl	8001464 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e1b7      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e94:	4b32      	ldr	r3, [pc, #200]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1ef      	bne.n	8002e82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80a6 	beq.w	8002ffc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec0:	4b27      	ldr	r3, [pc, #156]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec4:	4a26      	ldr	r2, [pc, #152]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ecc:	4b24      	ldr	r3, [pc, #144]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002edc:	4b21      	ldr	r3, [pc, #132]	@ (8002f64 <HAL_RCC_OscConfig+0x508>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d118      	bne.n	8002f1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f64 <HAL_RCC_OscConfig+0x508>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1d      	ldr	r2, [pc, #116]	@ (8002f64 <HAL_RCC_OscConfig+0x508>)
 8002eee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef4:	f7fe fab6 	bl	8001464 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efc:	f7fe fab2 	bl	8001464 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e17a      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f0e:	4b15      	ldr	r3, [pc, #84]	@ (8002f64 <HAL_RCC_OscConfig+0x508>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d108      	bne.n	8002f34 <HAL_RCC_OscConfig+0x4d8>
 8002f22:	4b0f      	ldr	r3, [pc, #60]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f28:	4a0d      	ldr	r2, [pc, #52]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f32:	e029      	b.n	8002f88 <HAL_RCC_OscConfig+0x52c>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b05      	cmp	r3, #5
 8002f3a:	d115      	bne.n	8002f68 <HAL_RCC_OscConfig+0x50c>
 8002f3c:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f42:	4a07      	ldr	r2, [pc, #28]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002f44:	f043 0304 	orr.w	r3, r3, #4
 8002f48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f4c:	4b04      	ldr	r3, [pc, #16]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f52:	4a03      	ldr	r2, [pc, #12]	@ (8002f60 <HAL_RCC_OscConfig+0x504>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f5c:	e014      	b.n	8002f88 <HAL_RCC_OscConfig+0x52c>
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40007000 	.word	0x40007000
 8002f68:	4b9c      	ldr	r3, [pc, #624]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6e:	4a9b      	ldr	r2, [pc, #620]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f78:	4b98      	ldr	r3, [pc, #608]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7e:	4a97      	ldr	r2, [pc, #604]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d016      	beq.n	8002fbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe fa68 	bl	8001464 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe fa64 	bl	8001464 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e12a      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fae:	4b8b      	ldr	r3, [pc, #556]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ed      	beq.n	8002f98 <HAL_RCC_OscConfig+0x53c>
 8002fbc:	e015      	b.n	8002fea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	f7fe fa51 	bl	8001464 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe fa4d 	bl	8001464 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e113      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fdc:	4b7f      	ldr	r3, [pc, #508]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1ed      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fea:	7ffb      	ldrb	r3, [r7, #31]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d105      	bne.n	8002ffc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff0:	4b7a      	ldr	r3, [pc, #488]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff4:	4a79      	ldr	r2, [pc, #484]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8002ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80fe 	beq.w	8003202 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	2b02      	cmp	r3, #2
 800300c:	f040 80d0 	bne.w	80031b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003010:	4b72      	ldr	r3, [pc, #456]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 0203 	and.w	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	429a      	cmp	r2, r3
 8003022:	d130      	bne.n	8003086 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	3b01      	subs	r3, #1
 8003030:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	429a      	cmp	r2, r3
 8003034:	d127      	bne.n	8003086 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003040:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d11f      	bne.n	8003086 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003050:	2a07      	cmp	r2, #7
 8003052:	bf14      	ite	ne
 8003054:	2201      	movne	r2, #1
 8003056:	2200      	moveq	r2, #0
 8003058:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800305a:	4293      	cmp	r3, r2
 800305c:	d113      	bne.n	8003086 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	3b01      	subs	r3, #1
 800306c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d109      	bne.n	8003086 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	3b01      	subs	r3, #1
 8003080:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d06e      	beq.n	8003164 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	2b0c      	cmp	r3, #12
 800308a:	d069      	beq.n	8003160 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800308c:	4b53      	ldr	r3, [pc, #332]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d105      	bne.n	80030a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003098:	4b50      	ldr	r3, [pc, #320]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0ad      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030a8:	4b4c      	ldr	r3, [pc, #304]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a4b      	ldr	r2, [pc, #300]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 80030ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030b4:	f7fe f9d6 	bl	8001464 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fe f9d2 	bl	8001464 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e09a      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ce:	4b43      	ldr	r3, [pc, #268]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030da:	4b40      	ldr	r3, [pc, #256]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	4b40      	ldr	r3, [pc, #256]	@ (80031e0 <HAL_RCC_OscConfig+0x784>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030ea:	3a01      	subs	r2, #1
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	4311      	orrs	r1, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030f4:	0212      	lsls	r2, r2, #8
 80030f6:	4311      	orrs	r1, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030fc:	0852      	lsrs	r2, r2, #1
 80030fe:	3a01      	subs	r2, #1
 8003100:	0552      	lsls	r2, r2, #21
 8003102:	4311      	orrs	r1, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003108:	0852      	lsrs	r2, r2, #1
 800310a:	3a01      	subs	r2, #1
 800310c:	0652      	lsls	r2, r2, #25
 800310e:	4311      	orrs	r1, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003114:	0912      	lsrs	r2, r2, #4
 8003116:	0452      	lsls	r2, r2, #17
 8003118:	430a      	orrs	r2, r1
 800311a:	4930      	ldr	r1, [pc, #192]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 800311c:	4313      	orrs	r3, r2
 800311e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003120:	4b2e      	ldr	r3, [pc, #184]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a2d      	ldr	r2, [pc, #180]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8003126:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800312a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800312c:	4b2b      	ldr	r3, [pc, #172]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a2a      	ldr	r2, [pc, #168]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8003132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003136:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003138:	f7fe f994 	bl	8001464 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003140:	f7fe f990 	bl	8001464 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e058      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003152:	4b22      	ldr	r3, [pc, #136]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800315e:	e050      	b.n	8003202 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e04f      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003164:	4b1d      	ldr	r3, [pc, #116]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d148      	bne.n	8003202 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003170:	4b1a      	ldr	r3, [pc, #104]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a19      	ldr	r2, [pc, #100]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8003176:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800317a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800317c:	4b17      	ldr	r3, [pc, #92]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a16      	ldr	r2, [pc, #88]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 8003182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003186:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003188:	f7fe f96c 	bl	8001464 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe f968 	bl	8001464 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e030      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a2:	4b0e      	ldr	r3, [pc, #56]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0x734>
 80031ae:	e028      	b.n	8003202 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2b0c      	cmp	r3, #12
 80031b4:	d023      	beq.n	80031fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b6:	4b09      	ldr	r3, [pc, #36]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a08      	ldr	r2, [pc, #32]	@ (80031dc <HAL_RCC_OscConfig+0x780>)
 80031bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c2:	f7fe f94f 	bl	8001464 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c8:	e00c      	b.n	80031e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ca:	f7fe f94b 	bl	8001464 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d905      	bls.n	80031e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e013      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
 80031dc:	40021000 	.word	0x40021000
 80031e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e4:	4b09      	ldr	r3, [pc, #36]	@ (800320c <HAL_RCC_OscConfig+0x7b0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1ec      	bne.n	80031ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031f0:	4b06      	ldr	r3, [pc, #24]	@ (800320c <HAL_RCC_OscConfig+0x7b0>)
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	4905      	ldr	r1, [pc, #20]	@ (800320c <HAL_RCC_OscConfig+0x7b0>)
 80031f6:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <HAL_RCC_OscConfig+0x7b4>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	60cb      	str	r3, [r1, #12]
 80031fc:	e001      	b.n	8003202 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	feeefffc 	.word	0xfeeefffc

08003214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0e7      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003228:	4b75      	ldr	r3, [pc, #468]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d910      	bls.n	8003258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b72      	ldr	r3, [pc, #456]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 0207 	bic.w	r2, r3, #7
 800323e:	4970      	ldr	r1, [pc, #448]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b6e      	ldr	r3, [pc, #440]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0cf      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d010      	beq.n	8003286 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	4b66      	ldr	r3, [pc, #408]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003270:	429a      	cmp	r2, r3
 8003272:	d908      	bls.n	8003286 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003274:	4b63      	ldr	r3, [pc, #396]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4960      	ldr	r1, [pc, #384]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 8003282:	4313      	orrs	r3, r2
 8003284:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d04c      	beq.n	800332c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329a:	4b5a      	ldr	r3, [pc, #360]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d121      	bne.n	80032ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0a6      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b2:	4b54      	ldr	r3, [pc, #336]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d115      	bne.n	80032ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e09a      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e08e      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032da:	4b4a      	ldr	r3, [pc, #296]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e086      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032ea:	4b46      	ldr	r3, [pc, #280]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f023 0203 	bic.w	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4943      	ldr	r1, [pc, #268]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fc:	f7fe f8b2 	bl	8001464 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	e00a      	b.n	800331a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003304:	f7fe f8ae 	bl	8001464 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e06e      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	4b3a      	ldr	r3, [pc, #232]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 020c 	and.w	r2, r3, #12
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	429a      	cmp	r2, r3
 800332a:	d1eb      	bne.n	8003304 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d010      	beq.n	800335a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	4b31      	ldr	r3, [pc, #196]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003344:	429a      	cmp	r2, r3
 8003346:	d208      	bcs.n	800335a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b2e      	ldr	r3, [pc, #184]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	492b      	ldr	r1, [pc, #172]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800335a:	4b29      	ldr	r3, [pc, #164]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d210      	bcs.n	800338a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003368:	4b25      	ldr	r3, [pc, #148]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 0207 	bic.w	r2, r3, #7
 8003370:	4923      	ldr	r1, [pc, #140]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	4313      	orrs	r3, r2
 8003376:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003378:	4b21      	ldr	r3, [pc, #132]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d001      	beq.n	800338a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e036      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003396:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	4918      	ldr	r1, [pc, #96]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d009      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b4:	4b13      	ldr	r3, [pc, #76]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4910      	ldr	r1, [pc, #64]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033c8:	f000 f824 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	490b      	ldr	r1, [pc, #44]	@ (8003408 <HAL_RCC_ClockConfig+0x1f4>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
 80033e4:	4a09      	ldr	r2, [pc, #36]	@ (800340c <HAL_RCC_ClockConfig+0x1f8>)
 80033e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033e8:	4b09      	ldr	r3, [pc, #36]	@ (8003410 <HAL_RCC_ClockConfig+0x1fc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fd ffe9 	bl	80013c4 <HAL_InitTick>
 80033f2:	4603      	mov	r3, r0
 80033f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80033f6:	7afb      	ldrb	r3, [r7, #11]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40022000 	.word	0x40022000
 8003404:	40021000 	.word	0x40021000
 8003408:	08007854 	.word	0x08007854
 800340c:	20000000 	.word	0x20000000
 8003410:	20000004 	.word	0x20000004

08003414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	@ 0x24
 8003418:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	2300      	movs	r3, #0
 8003420:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003422:	4b3e      	ldr	r3, [pc, #248]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800342c:	4b3b      	ldr	r3, [pc, #236]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x34>
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b0c      	cmp	r3, #12
 8003440:	d121      	bne.n	8003486 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d11e      	bne.n	8003486 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003448:	4b34      	ldr	r3, [pc, #208]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d107      	bne.n	8003464 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003454:	4b31      	ldr	r3, [pc, #196]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 8003456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	e005      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003464:	4b2d      	ldr	r3, [pc, #180]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003470:	4a2b      	ldr	r2, [pc, #172]	@ (8003520 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003478:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10d      	bne.n	800349c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003484:	e00a      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b04      	cmp	r3, #4
 800348a:	d102      	bne.n	8003492 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800348c:	4b25      	ldr	r3, [pc, #148]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x110>)
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	e004      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d101      	bne.n	800349c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003498:	4b23      	ldr	r3, [pc, #140]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x114>)
 800349a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d134      	bne.n	800350c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034a2:	4b1e      	ldr	r3, [pc, #120]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d003      	beq.n	80034ba <HAL_RCC_GetSysClockFreq+0xa6>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d003      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0xac>
 80034b8:	e005      	b.n	80034c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x110>)
 80034bc:	617b      	str	r3, [r7, #20]
      break;
 80034be:	e005      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034c0:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x114>)
 80034c2:	617b      	str	r3, [r7, #20]
      break;
 80034c4:	e002      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	617b      	str	r3, [r7, #20]
      break;
 80034ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034cc:	4b13      	ldr	r3, [pc, #76]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	3301      	adds	r3, #1
 80034d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034da:	4b10      	ldr	r3, [pc, #64]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	0a1b      	lsrs	r3, r3, #8
 80034e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	fb03 f202 	mul.w	r2, r3, r2
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034f2:	4b0a      	ldr	r3, [pc, #40]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	0e5b      	lsrs	r3, r3, #25
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	3301      	adds	r3, #1
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	fbb2 f3f3 	udiv	r3, r2, r3
 800350a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800350c:	69bb      	ldr	r3, [r7, #24]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	@ 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	08007864 	.word	0x08007864
 8003524:	00f42400 	.word	0x00f42400
 8003528:	007a1200 	.word	0x007a1200

0800352c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003538:	4b2a      	ldr	r3, [pc, #168]	@ (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003544:	f7ff fa26 	bl	8002994 <HAL_PWREx_GetVoltageRange>
 8003548:	6178      	str	r0, [r7, #20]
 800354a:	e014      	b.n	8003576 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4b25      	ldr	r3, [pc, #148]	@ (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003550:	4a24      	ldr	r2, [pc, #144]	@ (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003556:	6593      	str	r3, [r2, #88]	@ 0x58
 8003558:	4b22      	ldr	r3, [pc, #136]	@ (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003564:	f7ff fa16 	bl	8002994 <HAL_PWREx_GetVoltageRange>
 8003568:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800356a:	4b1e      	ldr	r3, [pc, #120]	@ (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356e:	4a1d      	ldr	r2, [pc, #116]	@ (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003574:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800357c:	d10b      	bne.n	8003596 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b80      	cmp	r3, #128	@ 0x80
 8003582:	d919      	bls.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2ba0      	cmp	r3, #160	@ 0xa0
 8003588:	d902      	bls.n	8003590 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800358a:	2302      	movs	r3, #2
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e013      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003590:	2301      	movs	r3, #1
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	e010      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b80      	cmp	r3, #128	@ 0x80
 800359a:	d902      	bls.n	80035a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800359c:	2303      	movs	r3, #3
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	e00a      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b80      	cmp	r3, #128	@ 0x80
 80035a6:	d102      	bne.n	80035ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035a8:	2302      	movs	r3, #2
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	e004      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b70      	cmp	r3, #112	@ 0x70
 80035b2:	d101      	bne.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b4:	2301      	movs	r3, #1
 80035b6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035b8:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 0207 	bic.w	r2, r3, #7
 80035c0:	4909      	ldr	r1, [pc, #36]	@ (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035c8:	4b07      	ldr	r3, [pc, #28]	@ (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40022000 	.word	0x40022000

080035ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035f4:	2300      	movs	r3, #0
 80035f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f8:	2300      	movs	r3, #0
 80035fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003604:	2b00      	cmp	r3, #0
 8003606:	d041      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800360c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003610:	d02a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003612:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003616:	d824      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003618:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800361c:	d008      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800361e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003622:	d81e      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003628:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800362c:	d010      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800362e:	e018      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003630:	4b86      	ldr	r3, [pc, #536]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4a85      	ldr	r2, [pc, #532]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800363c:	e015      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3304      	adds	r3, #4
 8003642:	2100      	movs	r1, #0
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fabb 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 800364a:	4603      	mov	r3, r0
 800364c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800364e:	e00c      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3320      	adds	r3, #32
 8003654:	2100      	movs	r1, #0
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fba6 	bl	8003da8 <RCCEx_PLLSAI2_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003660:	e003      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	74fb      	strb	r3, [r7, #19]
      break;
 8003666:	e000      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10b      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003670:	4b76      	ldr	r3, [pc, #472]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003676:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800367e:	4973      	ldr	r1, [pc, #460]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003686:	e001      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d041      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800369c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036a0:	d02a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036a6:	d824      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036ac:	d008      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036b2:	d81e      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036bc:	d010      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036be:	e018      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036c0:	4b62      	ldr	r3, [pc, #392]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a61      	ldr	r2, [pc, #388]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036cc:	e015      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fa73 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036de:	e00c      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3320      	adds	r3, #32
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 fb5e 	bl	8003da8 <RCCEx_PLLSAI2_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036f0:	e003      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	74fb      	strb	r3, [r7, #19]
      break;
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036fa:	7cfb      	ldrb	r3, [r7, #19]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10b      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003700:	4b52      	ldr	r3, [pc, #328]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003706:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800370e:	494f      	ldr	r1, [pc, #316]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003716:	e001      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80a0 	beq.w	800386a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372a:	2300      	movs	r3, #0
 800372c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800372e:	4b47      	ldr	r3, [pc, #284]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800373e:	2300      	movs	r3, #0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003744:	4b41      	ldr	r3, [pc, #260]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003748:	4a40      	ldr	r2, [pc, #256]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800374e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003750:	4b3e      	ldr	r3, [pc, #248]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375c:	2301      	movs	r3, #1
 800375e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003760:	4b3b      	ldr	r3, [pc, #236]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a3a      	ldr	r2, [pc, #232]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800376c:	f7fd fe7a 	bl	8001464 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003772:	e009      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003774:	f7fd fe76 	bl	8001464 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d902      	bls.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	74fb      	strb	r3, [r7, #19]
        break;
 8003786:	e005      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003788:	4b31      	ldr	r3, [pc, #196]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ef      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d15c      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800379a:	4b2c      	ldr	r3, [pc, #176]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01f      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d019      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037b8:	4b24      	ldr	r3, [pc, #144]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037c4:	4b21      	ldr	r3, [pc, #132]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ca:	4a20      	ldr	r2, [pc, #128]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037d4:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037da:	4a1c      	ldr	r2, [pc, #112]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037e4:	4a19      	ldr	r2, [pc, #100]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d016      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f6:	f7fd fe35 	bl	8001464 <HAL_GetTick>
 80037fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037fc:	e00b      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fd fe31 	bl	8001464 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d902      	bls.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	74fb      	strb	r3, [r7, #19]
            break;
 8003814:	e006      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003816:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ec      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10c      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800382a:	4b08      	ldr	r3, [pc, #32]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003830:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800383a:	4904      	ldr	r1, [pc, #16]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003842:	e009      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	74bb      	strb	r3, [r7, #18]
 8003848:	e006      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003858:	7c7b      	ldrb	r3, [r7, #17]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d105      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385e:	4b9e      	ldr	r3, [pc, #632]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003862:	4a9d      	ldr	r2, [pc, #628]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003864:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003868:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003876:	4b98      	ldr	r3, [pc, #608]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387c:	f023 0203 	bic.w	r2, r3, #3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003884:	4994      	ldr	r1, [pc, #592]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003898:	4b8f      	ldr	r3, [pc, #572]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389e:	f023 020c 	bic.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a6:	498c      	ldr	r1, [pc, #560]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ba:	4b87      	ldr	r3, [pc, #540]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	4983      	ldr	r1, [pc, #524]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038dc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ea:	497b      	ldr	r1, [pc, #492]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038fe:	4b76      	ldr	r3, [pc, #472]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003904:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800390c:	4972      	ldr	r1, [pc, #456]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003920:	4b6d      	ldr	r3, [pc, #436]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003926:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392e:	496a      	ldr	r1, [pc, #424]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003942:	4b65      	ldr	r3, [pc, #404]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003948:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003950:	4961      	ldr	r1, [pc, #388]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003964:	4b5c      	ldr	r3, [pc, #368]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003972:	4959      	ldr	r1, [pc, #356]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003986:	4b54      	ldr	r3, [pc, #336]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003994:	4950      	ldr	r1, [pc, #320]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039a8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b6:	4948      	ldr	r1, [pc, #288]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039ca:	4b43      	ldr	r3, [pc, #268]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	493f      	ldr	r1, [pc, #252]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d028      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ec:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039fa:	4937      	ldr	r1, [pc, #220]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a0c:	4b32      	ldr	r3, [pc, #200]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4a31      	ldr	r2, [pc, #196]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a16:	60d3      	str	r3, [r2, #12]
 8003a18:	e011      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a22:	d10c      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	2101      	movs	r1, #1
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f8c8 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a34:	7cfb      	ldrb	r3, [r7, #19]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a3a:	7cfb      	ldrb	r3, [r7, #19]
 8003a3c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d028      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a4a:	4b23      	ldr	r3, [pc, #140]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a50:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a58:	491f      	ldr	r1, [pc, #124]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a68:	d106      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a74:	60d3      	str	r3, [r2, #12]
 8003a76:	e011      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3304      	adds	r3, #4
 8003a86:	2101      	movs	r1, #1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 f899 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a92:	7cfb      	ldrb	r3, [r7, #19]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d02b      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab6:	4908      	ldr	r1, [pc, #32]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ac6:	d109      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac8:	4b03      	ldr	r3, [pc, #12]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4a02      	ldr	r2, [pc, #8]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad2:	60d3      	str	r3, [r2, #12]
 8003ad4:	e014      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2101      	movs	r1, #1
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 f867 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003af6:	7cfb      	ldrb	r3, [r7, #19]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d02f      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b12:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b1a:	4928      	ldr	r1, [pc, #160]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b2a:	d10d      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	2102      	movs	r1, #2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 f844 	bl	8003bc0 <RCCEx_PLLSAI1_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d014      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	74bb      	strb	r3, [r7, #18]
 8003b46:	e011      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3320      	adds	r3, #32
 8003b56:	2102      	movs	r1, #2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 f925 	bl	8003da8 <RCCEx_PLLSAI2_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b78:	4b10      	ldr	r3, [pc, #64]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b86:	490d      	ldr	r1, [pc, #52]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00b      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b9a:	4b08      	ldr	r3, [pc, #32]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003baa:	4904      	ldr	r1, [pc, #16]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bb2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40021000 	.word	0x40021000

08003bc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bce:	4b75      	ldr	r3, [pc, #468]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d018      	beq.n	8003c0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bda:	4b72      	ldr	r3, [pc, #456]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0203 	and.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d10d      	bne.n	8003c06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
       ||
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bf2:	4b6c      	ldr	r3, [pc, #432]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	091b      	lsrs	r3, r3, #4
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
       ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d047      	beq.n	8003c96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	e044      	b.n	8003c96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d018      	beq.n	8003c46 <RCCEx_PLLSAI1_Config+0x86>
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d825      	bhi.n	8003c64 <RCCEx_PLLSAI1_Config+0xa4>
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d002      	beq.n	8003c22 <RCCEx_PLLSAI1_Config+0x62>
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d009      	beq.n	8003c34 <RCCEx_PLLSAI1_Config+0x74>
 8003c20:	e020      	b.n	8003c64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c22:	4b60      	ldr	r3, [pc, #384]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d11d      	bne.n	8003c6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c32:	e01a      	b.n	8003c6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c34:	4b5b      	ldr	r3, [pc, #364]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d116      	bne.n	8003c6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c44:	e013      	b.n	8003c6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c46:	4b57      	ldr	r3, [pc, #348]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c52:	4b54      	ldr	r3, [pc, #336]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c62:	e006      	b.n	8003c72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	73fb      	strb	r3, [r7, #15]
      break;
 8003c68:	e004      	b.n	8003c74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c72:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10d      	bne.n	8003c96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6819      	ldr	r1, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	4944      	ldr	r1, [pc, #272]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d17d      	bne.n	8003d98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c9c:	4b41      	ldr	r3, [pc, #260]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a40      	ldr	r2, [pc, #256]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca8:	f7fd fbdc 	bl	8001464 <HAL_GetTick>
 8003cac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cae:	e009      	b.n	8003cc4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cb0:	f7fd fbd8 	bl	8001464 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d902      	bls.n	8003cc4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	73fb      	strb	r3, [r7, #15]
        break;
 8003cc2:	e005      	b.n	8003cd0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cc4:	4b37      	ldr	r3, [pc, #220]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1ef      	bne.n	8003cb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d160      	bne.n	8003d98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d111      	bne.n	8003d00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cdc:	4b31      	ldr	r3, [pc, #196]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6892      	ldr	r2, [r2, #8]
 8003cec:	0211      	lsls	r1, r2, #8
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68d2      	ldr	r2, [r2, #12]
 8003cf2:	0912      	lsrs	r2, r2, #4
 8003cf4:	0452      	lsls	r2, r2, #17
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	492a      	ldr	r1, [pc, #168]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	610b      	str	r3, [r1, #16]
 8003cfe:	e027      	b.n	8003d50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d112      	bne.n	8003d2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d06:	4b27      	ldr	r3, [pc, #156]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003d0e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6892      	ldr	r2, [r2, #8]
 8003d16:	0211      	lsls	r1, r2, #8
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6912      	ldr	r2, [r2, #16]
 8003d1c:	0852      	lsrs	r2, r2, #1
 8003d1e:	3a01      	subs	r2, #1
 8003d20:	0552      	lsls	r2, r2, #21
 8003d22:	430a      	orrs	r2, r1
 8003d24:	491f      	ldr	r1, [pc, #124]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	610b      	str	r3, [r1, #16]
 8003d2a:	e011      	b.n	8003d50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6892      	ldr	r2, [r2, #8]
 8003d3c:	0211      	lsls	r1, r2, #8
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6952      	ldr	r2, [r2, #20]
 8003d42:	0852      	lsrs	r2, r2, #1
 8003d44:	3a01      	subs	r2, #1
 8003d46:	0652      	lsls	r2, r2, #25
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	4916      	ldr	r1, [pc, #88]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d50:	4b14      	ldr	r3, [pc, #80]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a13      	ldr	r2, [pc, #76]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fd fb82 	bl	8001464 <HAL_GetTick>
 8003d60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d62:	e009      	b.n	8003d78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d64:	f7fd fb7e 	bl	8001464 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d902      	bls.n	8003d78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	73fb      	strb	r3, [r7, #15]
          break;
 8003d76:	e005      	b.n	8003d84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d78:	4b0a      	ldr	r3, [pc, #40]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ef      	beq.n	8003d64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d8a:	4b06      	ldr	r3, [pc, #24]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	4904      	ldr	r1, [pc, #16]	@ (8003da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000

08003da8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003db6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d018      	beq.n	8003df4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dc2:	4b67      	ldr	r3, [pc, #412]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0203 	and.w	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d10d      	bne.n	8003dee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
       ||
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003dda:	4b61      	ldr	r3, [pc, #388]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	091b      	lsrs	r3, r3, #4
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
       ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d047      	beq.n	8003e7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
 8003df2:	e044      	b.n	8003e7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d018      	beq.n	8003e2e <RCCEx_PLLSAI2_Config+0x86>
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d825      	bhi.n	8003e4c <RCCEx_PLLSAI2_Config+0xa4>
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d002      	beq.n	8003e0a <RCCEx_PLLSAI2_Config+0x62>
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d009      	beq.n	8003e1c <RCCEx_PLLSAI2_Config+0x74>
 8003e08:	e020      	b.n	8003e4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e0a:	4b55      	ldr	r3, [pc, #340]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d11d      	bne.n	8003e52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e1a:	e01a      	b.n	8003e52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e1c:	4b50      	ldr	r3, [pc, #320]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d116      	bne.n	8003e56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2c:	e013      	b.n	8003e56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e2e:	4b4c      	ldr	r3, [pc, #304]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10f      	bne.n	8003e5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e3a:	4b49      	ldr	r3, [pc, #292]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e4a:	e006      	b.n	8003e5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e50:	e004      	b.n	8003e5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e52:	bf00      	nop
 8003e54:	e002      	b.n	8003e5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10d      	bne.n	8003e7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e62:	4b3f      	ldr	r3, [pc, #252]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6819      	ldr	r1, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	430b      	orrs	r3, r1
 8003e78:	4939      	ldr	r1, [pc, #228]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d167      	bne.n	8003f54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e84:	4b36      	ldr	r3, [pc, #216]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a35      	ldr	r2, [pc, #212]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e90:	f7fd fae8 	bl	8001464 <HAL_GetTick>
 8003e94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e96:	e009      	b.n	8003eac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e98:	f7fd fae4 	bl	8001464 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d902      	bls.n	8003eac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	73fb      	strb	r3, [r7, #15]
        break;
 8003eaa:	e005      	b.n	8003eb8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eac:	4b2c      	ldr	r3, [pc, #176]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ef      	bne.n	8003e98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d14a      	bne.n	8003f54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d111      	bne.n	8003ee8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ec4:	4b26      	ldr	r3, [pc, #152]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6892      	ldr	r2, [r2, #8]
 8003ed4:	0211      	lsls	r1, r2, #8
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68d2      	ldr	r2, [r2, #12]
 8003eda:	0912      	lsrs	r2, r2, #4
 8003edc:	0452      	lsls	r2, r2, #17
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	491f      	ldr	r1, [pc, #124]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	614b      	str	r3, [r1, #20]
 8003ee6:	e011      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ef0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6892      	ldr	r2, [r2, #8]
 8003ef8:	0211      	lsls	r1, r2, #8
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6912      	ldr	r2, [r2, #16]
 8003efe:	0852      	lsrs	r2, r2, #1
 8003f00:	3a01      	subs	r2, #1
 8003f02:	0652      	lsls	r2, r2, #25
 8003f04:	430a      	orrs	r2, r1
 8003f06:	4916      	ldr	r1, [pc, #88]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f0c:	4b14      	ldr	r3, [pc, #80]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a13      	ldr	r2, [pc, #76]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f18:	f7fd faa4 	bl	8001464 <HAL_GetTick>
 8003f1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f1e:	e009      	b.n	8003f34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f20:	f7fd faa0 	bl	8001464 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d902      	bls.n	8003f34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	73fb      	strb	r3, [r7, #15]
          break;
 8003f32:	e005      	b.n	8003f40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f34:	4b0a      	ldr	r3, [pc, #40]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ef      	beq.n	8003f20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f46:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	4904      	ldr	r1, [pc, #16]	@ (8003f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e095      	b.n	80040a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d108      	bne.n	8003f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f86:	d009      	beq.n	8003f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	61da      	str	r2, [r3, #28]
 8003f8e:	e005      	b.n	8003f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd f8c4 	bl	8001144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fdc:	d902      	bls.n	8003fe4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e002      	b.n	8003fea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fe8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003ff2:	d007      	beq.n	8004004 <HAL_SPI_Init+0xa0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ffc:	d002      	beq.n	8004004 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004046:	ea42 0103 	orr.w	r1, r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	0c1b      	lsrs	r3, r3, #16
 8004060:	f003 0204 	and.w	r2, r3, #4
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004080:	ea42 0103 	orr.w	r1, r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b088      	sub	sp, #32
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040ba:	f7fd f9d3 	bl	8001464 <HAL_GetTick>
 80040be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d001      	beq.n	80040d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80040d0:	2302      	movs	r3, #2
 80040d2:	e15c      	b.n	800438e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <HAL_SPI_Transmit+0x36>
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e154      	b.n	800438e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_SPI_Transmit+0x48>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e14d      	b.n	800438e <HAL_SPI_Transmit+0x2e4>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2203      	movs	r2, #3
 80040fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	88fa      	ldrh	r2, [r7, #6]
 8004112:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004144:	d10f      	bne.n	8004166 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004154:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004164:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004170:	2b40      	cmp	r3, #64	@ 0x40
 8004172:	d007      	beq.n	8004184 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004182:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800418c:	d952      	bls.n	8004234 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_SPI_Transmit+0xf2>
 8004196:	8b7b      	ldrh	r3, [r7, #26]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d145      	bne.n	8004228 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a0:	881a      	ldrh	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ac:	1c9a      	adds	r2, r3, #2
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041c0:	e032      	b.n	8004228 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d112      	bne.n	80041f6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d4:	881a      	ldrh	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e0:	1c9a      	adds	r2, r3, #2
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041f4:	e018      	b.n	8004228 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041f6:	f7fd f935 	bl	8001464 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d803      	bhi.n	800420e <HAL_SPI_Transmit+0x164>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d102      	bne.n	8004214 <HAL_SPI_Transmit+0x16a>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d109      	bne.n	8004228 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e0b2      	b.n	800438e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1c7      	bne.n	80041c2 <HAL_SPI_Transmit+0x118>
 8004232:	e083      	b.n	800433c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <HAL_SPI_Transmit+0x198>
 800423c:	8b7b      	ldrh	r3, [r7, #26]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d177      	bne.n	8004332 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d912      	bls.n	8004272 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004250:	881a      	ldrh	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	1c9a      	adds	r2, r3, #2
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b02      	subs	r3, #2
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004270:	e05f      	b.n	8004332 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	7812      	ldrb	r2, [r2, #0]
 800427e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004298:	e04b      	b.n	8004332 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d12b      	bne.n	8004300 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d912      	bls.n	80042d8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b6:	881a      	ldrh	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c2:	1c9a      	adds	r2, r3, #2
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b02      	subs	r3, #2
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042d6:	e02c      	b.n	8004332 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	7812      	ldrb	r2, [r2, #0]
 80042e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042fe:	e018      	b.n	8004332 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004300:	f7fd f8b0 	bl	8001464 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d803      	bhi.n	8004318 <HAL_SPI_Transmit+0x26e>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	d102      	bne.n	800431e <HAL_SPI_Transmit+0x274>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e02d      	b.n	800438e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1ae      	bne.n	800429a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	6839      	ldr	r1, [r7, #0]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f947 	bl	80045d4 <SPI_EndRxTxTransaction>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800438c:	2300      	movs	r3, #0
  }
}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043a8:	f7fd f85c 	bl	8001464 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b0:	1a9b      	subs	r3, r3, r2
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	4413      	add	r3, r2
 80043b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043b8:	f7fd f854 	bl	8001464 <HAL_GetTick>
 80043bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043be:	4b39      	ldr	r3, [pc, #228]	@ (80044a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	015b      	lsls	r3, r3, #5
 80043c4:	0d1b      	lsrs	r3, r3, #20
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ce:	e054      	b.n	800447a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d050      	beq.n	800447a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043d8:	f7fd f844 	bl	8001464 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d902      	bls.n	80043ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d13d      	bne.n	800446a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004406:	d111      	bne.n	800442c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004410:	d004      	beq.n	800441c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800441a:	d107      	bne.n	800442c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800442a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004434:	d10f      	bne.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004454:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e017      	b.n	800449a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	3b01      	subs	r3, #1
 8004478:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	d19b      	bne.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000000 	.word	0x20000000

080044a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08a      	sub	sp, #40	@ 0x28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80044ba:	f7fc ffd3 	bl	8001464 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	4413      	add	r3, r2
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80044ca:	f7fc ffcb 	bl	8001464 <HAL_GetTick>
 80044ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80044d8:	4b3d      	ldr	r3, [pc, #244]	@ (80045d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00da      	lsls	r2, r3, #3
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	0d1b      	lsrs	r3, r3, #20
 80044e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80044f0:	e060      	b.n	80045b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80044f8:	d107      	bne.n	800450a <SPI_WaitFifoStateUntilTimeout+0x62>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d104      	bne.n	800450a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004508:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d050      	beq.n	80045b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004512:	f7fc ffa7 	bl	8001464 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800451e:	429a      	cmp	r2, r3
 8004520:	d902      	bls.n	8004528 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	2b00      	cmp	r3, #0
 8004526:	d13d      	bne.n	80045a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004536:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004540:	d111      	bne.n	8004566 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800454a:	d004      	beq.n	8004556 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004554:	d107      	bne.n	8004566 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004564:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800456e:	d10f      	bne.n	8004590 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800458e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e010      	b.n	80045c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4013      	ands	r3, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d196      	bne.n	80044f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3728      	adds	r7, #40	@ 0x28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000000 	.word	0x20000000

080045d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7ff ff5b 	bl	80044a8 <SPI_WaitFifoStateUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fc:	f043 0220 	orr.w	r2, r3, #32
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e027      	b.n	8004658 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2200      	movs	r2, #0
 8004610:	2180      	movs	r1, #128	@ 0x80
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff fec0 	bl	8004398 <SPI_WaitFlagStateUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d007      	beq.n	800462e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e014      	b.n	8004658 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2200      	movs	r2, #0
 8004636:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7ff ff34 	bl	80044a8 <SPI_WaitFifoStateUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800464a:	f043 0220 	orr.w	r2, r3, #32
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e000      	b.n	8004658 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8004670:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004672:	461a      	mov	r2, r3
        err.type, err.code);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800467a:	6839      	ldr	r1, [r7, #0]
 800467c:	4807      	ldr	r0, [pc, #28]	@ (800469c <ai_log_err+0x3c>)
 800467e:	f002 f943 	bl	8006908 <iprintf>
 8004682:	e009      	b.n	8004698 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8004684:	793b      	ldrb	r3, [r7, #4]
 8004686:	4619      	mov	r1, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800468e:	461a      	mov	r2, r3
 8004690:	4803      	ldr	r0, [pc, #12]	@ (80046a0 <ai_log_err+0x40>)
 8004692:	f002 f939 	bl	8006908 <iprintf>

  do {} while (1);
 8004696:	bf00      	nop
 8004698:	bf00      	nop
 800469a:	e7fd      	b.n	8004698 <ai_log_err+0x38>
 800469c:	080076e4 	.word	0x080076e4
 80046a0:	08007718 	.word	0x08007718

080046a4 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_myai_create_and_init(&myai, act_addr, NULL);
 80046ac:	2200      	movs	r2, #0
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4828      	ldr	r0, [pc, #160]	@ (8004754 <ai_boostrap+0xb0>)
 80046b2:	f000 f9b3 	bl	8004a1c <ai_myai_create_and_init>
 80046b6:	4603      	mov	r3, r0
 80046b8:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 80046ba:	7b3b      	ldrb	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d006      	beq.n	80046ce <ai_boostrap+0x2a>
    ai_log_err(err, "ai_myai_create_and_init");
 80046c0:	4925      	ldr	r1, [pc, #148]	@ (8004758 <ai_boostrap+0xb4>)
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff ffcc 	bl	8004660 <ai_log_err>
    return -1;
 80046c8:	f04f 33ff 	mov.w	r3, #4294967295
 80046cc:	e03e      	b.n	800474c <ai_boostrap+0xa8>
  }

  ai_input = ai_myai_inputs_get(myai, NULL);
 80046ce:	4b21      	ldr	r3, [pc, #132]	@ (8004754 <ai_boostrap+0xb0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2100      	movs	r1, #0
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fa1f 	bl	8004b18 <ai_myai_inputs_get>
 80046da:	4603      	mov	r3, r0
 80046dc:	4a1f      	ldr	r2, [pc, #124]	@ (800475c <ai_boostrap+0xb8>)
 80046de:	6013      	str	r3, [r2, #0]
  ai_output = ai_myai_outputs_get(myai, NULL);
 80046e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004754 <ai_boostrap+0xb0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2100      	movs	r1, #0
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fa30 	bl	8004b4c <ai_myai_outputs_get>
 80046ec:	4603      	mov	r3, r0
 80046ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004760 <ai_boostrap+0xbc>)
 80046f0:	6013      	str	r3, [r2, #0]

#if defined(AI_MYAI_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_MYAI_IN_NUM; idx++) {
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	e00f      	b.n	8004718 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 80046f8:	4b18      	ldr	r3, [pc, #96]	@ (800475c <ai_boostrap+0xb8>)
 80046fa:	6819      	ldr	r1, [r3, #0]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4613      	mov	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	440b      	add	r3, r1
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	4916      	ldr	r1, [pc, #88]	@ (8004764 <ai_boostrap+0xc0>)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_MYAI_IN_NUM; idx++) {
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	3301      	adds	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2b00      	cmp	r3, #0
 800471c:	ddec      	ble.n	80046f8 <ai_boostrap+0x54>

#if defined(AI_MYAI_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_MYAI_OUT_NUM; idx++) {
 800471e:	2300      	movs	r3, #0
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	e00f      	b.n	8004744 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8004724:	4b0e      	ldr	r3, [pc, #56]	@ (8004760 <ai_boostrap+0xbc>)
 8004726:	6819      	ldr	r1, [r3, #0]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4613      	mov	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	490c      	ldr	r1, [pc, #48]	@ (8004768 <ai_boostrap+0xc4>)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_MYAI_OUT_NUM; idx++) {
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	3301      	adds	r3, #1
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	ddec      	ble.n	8004724 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_MYAI_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	2000adac 	.word	0x2000adac
 8004758:	08007748 	.word	0x08007748
 800475c:	2000adb0 	.word	0x2000adb0
 8004760:	2000adb4 	.word	0x2000adb4
 8004764:	2000a960 	.word	0x2000a960
 8004768:	2000a964 	.word	0x2000a964

0800476c <ai_run>:

static int ai_run(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_myai_run(myai, ai_input, ai_output);
 8004772:	4b0f      	ldr	r3, [pc, #60]	@ (80047b0 <ai_run+0x44>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a0f      	ldr	r2, [pc, #60]	@ (80047b4 <ai_run+0x48>)
 8004778:	6811      	ldr	r1, [r2, #0]
 800477a:	4a0f      	ldr	r2, [pc, #60]	@ (80047b8 <ai_run+0x4c>)
 800477c:	6812      	ldr	r2, [r2, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fa3a 	bl	8004bf8 <ai_myai_run>
 8004784:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d00c      	beq.n	80047a6 <ai_run+0x3a>
    ai_log_err(ai_myai_get_error(myai),
 800478c:	4b08      	ldr	r3, [pc, #32]	@ (80047b0 <ai_run+0x44>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 f921 	bl	80049d8 <ai_myai_get_error>
 8004796:	4603      	mov	r3, r0
 8004798:	4908      	ldr	r1, [pc, #32]	@ (80047bc <ai_run+0x50>)
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff ff60 	bl	8004660 <ai_log_err>
        "ai_myai_run");
    return -1;
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295
 80047a4:	e000      	b.n	80047a8 <ai_run+0x3c>
  }

  return 0;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	2000adac 	.word	0x2000adac
 80047b4:	2000adb0 	.word	0x2000adb0
 80047b8:	2000adb4 	.word	0x2000adb4
 80047bc:	08007760 	.word	0x08007760

080047c0 <runAI>:

  */
  return 0;
}

void runAI(int state[STATE_SIZE], float output[OUTPUT_SIZE]) {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
    // 1. Wskazanie na dane wejściowe modelu
    float* input_data = (float*)ai_input->data;
 80047ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004844 <runAI+0x84>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	60fb      	str	r3, [r7, #12]

    // 2. Skopiuj dane z int[] do float[]
    for (int i = 0; i < STATE_SIZE; i++) {
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	e011      	b.n	80047fc <runAI+0x3c>
        input_data[i] = (float)state[i];
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	4413      	add	r3, r2
 80047e0:	6819      	ldr	r1, [r3, #0]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	ee07 1a90 	vmov	s15, r1
 80047ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047f2:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < STATE_SIZE; i++) {
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	3301      	adds	r3, #1
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b0a      	cmp	r3, #10
 8004800:	ddea      	ble.n	80047d8 <runAI+0x18>
    }

    // 3. Uruchom sieć neuronową
    if (ai_run() != 0) {
 8004802:	f7ff ffb3 	bl	800476c <ai_run>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d117      	bne.n	800483c <runAI+0x7c>
        // Błąd działania sieci – możesz dodać np. miganie LED
        return;
    }

    // 4. Pobierz dane wyjściowe
    float* result = (float*)ai_output->data;
 800480c:	4b0e      	ldr	r3, [pc, #56]	@ (8004848 <runAI+0x88>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < OUTPUT_SIZE; i++) {
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	e00c      	b.n	8004834 <runAI+0x74>
        output[i] = result[i];
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	441a      	add	r2, r3
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	6839      	ldr	r1, [r7, #0]
 8004828:	440b      	add	r3, r1
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < OUTPUT_SIZE; i++) {
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	3301      	adds	r3, #1
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b02      	cmp	r3, #2
 8004838:	ddef      	ble.n	800481a <runAI+0x5a>
 800483a:	e000      	b.n	800483e <runAI+0x7e>
        return;
 800483c:	bf00      	nop
    }
}
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	2000adb0 	.word	0x2000adb0
 8004848:	2000adb4 	.word	0x2000adb4

0800484c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8004850:	4803      	ldr	r0, [pc, #12]	@ (8004860 <MX_X_CUBE_AI_Init+0x14>)
 8004852:	f002 f8c1 	bl	80069d8 <puts>

  ai_boostrap(data_activations0);
 8004856:	4803      	ldr	r0, [pc, #12]	@ (8004864 <MX_X_CUBE_AI_Init+0x18>)
 8004858:	f7ff ff24 	bl	80046a4 <ai_boostrap>
    /* USER CODE END 5 */
}
 800485c:	bf00      	nop
 800485e:	bd80      	pop	{r7, pc}
 8004860:	0800776c 	.word	0x0800776c
 8004864:	2000000c 	.word	0x2000000c

08004868 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */

    /* USER CODE END 6 */
}
 800486c:	bf00      	nop
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <myai_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool myai_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_myai_activations_map, 1, params)) {
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	2101      	movs	r1, #1
 8004886:	481b      	ldr	r0, [pc, #108]	@ (80048f4 <myai_configure_activations+0x7c>)
 8004888:	f000 fa8a 	bl	8004da0 <ai_platform_get_activations_map>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d025      	beq.n	80048de <myai_configure_activations+0x66>
    /* Updating activations (byte) offsets */
    
    input_output_array.data = AI_PTR(g_myai_activations_map[0] + 0);
 8004892:	4b18      	ldr	r3, [pc, #96]	@ (80048f4 <myai_configure_activations+0x7c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a18      	ldr	r2, [pc, #96]	@ (80048f8 <myai_configure_activations+0x80>)
 8004898:	6093      	str	r3, [r2, #8]
    input_output_array.data_start = AI_PTR(g_myai_activations_map[0] + 0);
 800489a:	4b16      	ldr	r3, [pc, #88]	@ (80048f4 <myai_configure_activations+0x7c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a16      	ldr	r2, [pc, #88]	@ (80048f8 <myai_configure_activations+0x80>)
 80048a0:	60d3      	str	r3, [r2, #12]
    _linear_1_Gemm_output_0_output_array.data = AI_PTR(g_myai_activations_map[0] + 44);
 80048a2:	4b14      	ldr	r3, [pc, #80]	@ (80048f4 <myai_configure_activations+0x7c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	332c      	adds	r3, #44	@ 0x2c
 80048a8:	4a14      	ldr	r2, [pc, #80]	@ (80048fc <myai_configure_activations+0x84>)
 80048aa:	6093      	str	r3, [r2, #8]
    _linear_1_Gemm_output_0_output_array.data_start = AI_PTR(g_myai_activations_map[0] + 44);
 80048ac:	4b11      	ldr	r3, [pc, #68]	@ (80048f4 <myai_configure_activations+0x7c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	332c      	adds	r3, #44	@ 0x2c
 80048b2:	4a12      	ldr	r2, [pc, #72]	@ (80048fc <myai_configure_activations+0x84>)
 80048b4:	60d3      	str	r3, [r2, #12]
    _relu_Relu_output_0_output_array.data = AI_PTR(g_myai_activations_map[0] + 44);
 80048b6:	4b0f      	ldr	r3, [pc, #60]	@ (80048f4 <myai_configure_activations+0x7c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	332c      	adds	r3, #44	@ 0x2c
 80048bc:	4a10      	ldr	r2, [pc, #64]	@ (8004900 <myai_configure_activations+0x88>)
 80048be:	6093      	str	r3, [r2, #8]
    _relu_Relu_output_0_output_array.data_start = AI_PTR(g_myai_activations_map[0] + 44);
 80048c0:	4b0c      	ldr	r3, [pc, #48]	@ (80048f4 <myai_configure_activations+0x7c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	332c      	adds	r3, #44	@ 0x2c
 80048c6:	4a0e      	ldr	r2, [pc, #56]	@ (8004900 <myai_configure_activations+0x88>)
 80048c8:	60d3      	str	r3, [r2, #12]
    output_output_array.data = AI_PTR(g_myai_activations_map[0] + 0);
 80048ca:	4b0a      	ldr	r3, [pc, #40]	@ (80048f4 <myai_configure_activations+0x7c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004904 <myai_configure_activations+0x8c>)
 80048d0:	6093      	str	r3, [r2, #8]
    output_output_array.data_start = AI_PTR(g_myai_activations_map[0] + 0);
 80048d2:	4b08      	ldr	r3, [pc, #32]	@ (80048f4 <myai_configure_activations+0x7c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a0b      	ldr	r2, [pc, #44]	@ (8004904 <myai_configure_activations+0x8c>)
 80048d8:	60d3      	str	r3, [r2, #12]
    return true;
 80048da:	2301      	movs	r3, #1
 80048dc:	e005      	b.n	80048ea <myai_configure_activations+0x72>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80048de:	2213      	movs	r2, #19
 80048e0:	2130      	movs	r1, #48	@ 0x30
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fade 	bl	8004ea4 <ai_platform_network_set_error>
  return false;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	2000adb8 	.word	0x2000adb8
 80048f8:	20000010 	.word	0x20000010
 80048fc:	20000020 	.word	0x20000020
 8004900:	20000030 	.word	0x20000030
 8004904:	20000040 	.word	0x20000040

08004908 <myai_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool myai_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_myai_weights_map, 1, params)) {
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	2101      	movs	r1, #1
 8004916:	482b      	ldr	r0, [pc, #172]	@ (80049c4 <myai_configure_weights+0xbc>)
 8004918:	f000 f9f0 	bl	8004cfc <ai_platform_get_weights_map>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d045      	beq.n	80049ae <myai_configure_weights+0xa6>
    /* Updating weights (byte) offsets */
    
    _linear_1_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8004922:	4b29      	ldr	r3, [pc, #164]	@ (80049c8 <myai_configure_weights+0xc0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800492a:	4a27      	ldr	r2, [pc, #156]	@ (80049c8 <myai_configure_weights+0xc0>)
 800492c:	6013      	str	r3, [r2, #0]
    _linear_1_Gemm_output_0_weights_array.data = AI_PTR(g_myai_weights_map[0] + 0);
 800492e:	4b25      	ldr	r3, [pc, #148]	@ (80049c4 <myai_configure_weights+0xbc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a25      	ldr	r2, [pc, #148]	@ (80049c8 <myai_configure_weights+0xc0>)
 8004934:	6093      	str	r3, [r2, #8]
    _linear_1_Gemm_output_0_weights_array.data_start = AI_PTR(g_myai_weights_map[0] + 0);
 8004936:	4b23      	ldr	r3, [pc, #140]	@ (80049c4 <myai_configure_weights+0xbc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a23      	ldr	r2, [pc, #140]	@ (80049c8 <myai_configure_weights+0xc0>)
 800493c:	60d3      	str	r3, [r2, #12]
    _linear_1_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800493e:	4b23      	ldr	r3, [pc, #140]	@ (80049cc <myai_configure_weights+0xc4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004946:	4a21      	ldr	r2, [pc, #132]	@ (80049cc <myai_configure_weights+0xc4>)
 8004948:	6013      	str	r3, [r2, #0]
    _linear_1_Gemm_output_0_bias_array.data = AI_PTR(g_myai_weights_map[0] + 11264);
 800494a:	4b1e      	ldr	r3, [pc, #120]	@ (80049c4 <myai_configure_weights+0xbc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8004952:	4a1e      	ldr	r2, [pc, #120]	@ (80049cc <myai_configure_weights+0xc4>)
 8004954:	6093      	str	r3, [r2, #8]
    _linear_1_Gemm_output_0_bias_array.data_start = AI_PTR(g_myai_weights_map[0] + 11264);
 8004956:	4b1b      	ldr	r3, [pc, #108]	@ (80049c4 <myai_configure_weights+0xbc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 800495e:	4a1b      	ldr	r2, [pc, #108]	@ (80049cc <myai_configure_weights+0xc4>)
 8004960:	60d3      	str	r3, [r2, #12]
    output_weights_array.format |= AI_FMT_FLAG_CONST;
 8004962:	4b1b      	ldr	r3, [pc, #108]	@ (80049d0 <myai_configure_weights+0xc8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800496a:	4a19      	ldr	r2, [pc, #100]	@ (80049d0 <myai_configure_weights+0xc8>)
 800496c:	6013      	str	r3, [r2, #0]
    output_weights_array.data = AI_PTR(g_myai_weights_map[0] + 12288);
 800496e:	4b15      	ldr	r3, [pc, #84]	@ (80049c4 <myai_configure_weights+0xbc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004976:	4a16      	ldr	r2, [pc, #88]	@ (80049d0 <myai_configure_weights+0xc8>)
 8004978:	6093      	str	r3, [r2, #8]
    output_weights_array.data_start = AI_PTR(g_myai_weights_map[0] + 12288);
 800497a:	4b12      	ldr	r3, [pc, #72]	@ (80049c4 <myai_configure_weights+0xbc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004982:	4a13      	ldr	r2, [pc, #76]	@ (80049d0 <myai_configure_weights+0xc8>)
 8004984:	60d3      	str	r3, [r2, #12]
    output_bias_array.format |= AI_FMT_FLAG_CONST;
 8004986:	4b13      	ldr	r3, [pc, #76]	@ (80049d4 <myai_configure_weights+0xcc>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800498e:	4a11      	ldr	r2, [pc, #68]	@ (80049d4 <myai_configure_weights+0xcc>)
 8004990:	6013      	str	r3, [r2, #0]
    output_bias_array.data = AI_PTR(g_myai_weights_map[0] + 15360);
 8004992:	4b0c      	ldr	r3, [pc, #48]	@ (80049c4 <myai_configure_weights+0xbc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800499a:	4a0e      	ldr	r2, [pc, #56]	@ (80049d4 <myai_configure_weights+0xcc>)
 800499c:	6093      	str	r3, [r2, #8]
    output_bias_array.data_start = AI_PTR(g_myai_weights_map[0] + 15360);
 800499e:	4b09      	ldr	r3, [pc, #36]	@ (80049c4 <myai_configure_weights+0xbc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 80049a6:	4a0b      	ldr	r2, [pc, #44]	@ (80049d4 <myai_configure_weights+0xcc>)
 80049a8:	60d3      	str	r3, [r2, #12]
    return true;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e005      	b.n	80049ba <myai_configure_weights+0xb2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80049ae:	2212      	movs	r2, #18
 80049b0:	2130      	movs	r1, #48	@ 0x30
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fa76 	bl	8004ea4 <ai_platform_network_set_error>
  return false;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	2000adbc 	.word	0x2000adbc
 80049c8:	20000050 	.word	0x20000050
 80049cc:	20000060 	.word	0x20000060
 80049d0:	20000070 	.word	0x20000070
 80049d4:	20000080 	.word	0x20000080

080049d8 <ai_myai_get_error>:
}


AI_API_ENTRY
ai_error ai_myai_get_error(ai_handle network)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fa53 	bl	8004e8c <ai_platform_network_get_error>
 80049e6:	4603      	mov	r3, r0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <ai_myai_create>:


AI_API_ENTRY
ai_error ai_myai_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80049fa:	2300      	movs	r3, #0
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	2305      	movs	r3, #5
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	2301      	movs	r3, #1
 8004a04:	4a04      	ldr	r2, [pc, #16]	@ (8004a18 <ai_myai_create+0x28>)
 8004a06:	6839      	ldr	r1, [r7, #0]
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fb39 	bl	8005080 <ai_platform_network_create>
 8004a0e:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000410 	.word	0x20000410

08004a1c <ai_myai_create_and_init>:


AI_API_ENTRY
ai_error ai_myai_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b094      	sub	sp, #80	@ 0x50
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_myai_create(network, AI_MYAI_DATA_CONFIG);
 8004a28:	2100      	movs	r1, #0
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f7ff ffe0 	bl	80049f0 <ai_myai_create>
 8004a30:	4603      	mov	r3, r0
 8004a32:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8004a34:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <ai_myai_create_and_init+0x24>
    return err;
 8004a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a3e:	e067      	b.n	8004b10 <ai_myai_create_and_init+0xf4>
  }
  
  if (ai_myai_data_params_get(&params) != true) {
 8004a40:	f107 0310 	add.w	r3, r7, #16
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 f8e7 	bl	8004c18 <ai_myai_data_params_get>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f083 0301 	eor.w	r3, r3, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <ai_myai_create_and_init+0x4c>
    err = ai_myai_get_error(*network);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff ffbc 	bl	80049d8 <ai_myai_get_error>
 8004a60:	4603      	mov	r3, r0
 8004a62:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8004a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a66:	e053      	b.n	8004b10 <ai_myai_create_and_init+0xf4>
  }
#if defined(AI_MYAI_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004a6e:	e012      	b.n	8004a96 <ai_myai_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8004a70:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8004a74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	f107 0310 	add.w	r3, r7, #16
 8004a84:	330c      	adds	r3, #12
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 f92a 	bl	8004ce0 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8004a8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004a90:	3301      	adds	r3, #1
 8004a92:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d004      	beq.n	8004aa6 <ai_myai_create_and_init+0x8a>
 8004a9c:	8bfb      	ldrh	r3, [r7, #30]
 8004a9e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d3e4      	bcc.n	8004a70 <ai_myai_create_and_init+0x54>
  }
#endif
#if defined(AI_MYAI_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004aac:	e012      	b.n	8004ad4 <ai_myai_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8004aae:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8004ab2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	4413      	add	r3, r2
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	f107 0310 	add.w	r3, r7, #16
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 f90b 	bl	8004ce0 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8004aca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004ace:	3301      	adds	r3, #1
 8004ad0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <ai_myai_create_and_init+0xc8>
 8004ada:	8afb      	ldrh	r3, [r7, #22]
 8004adc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d3e4      	bcc.n	8004aae <ai_myai_create_and_init+0x92>
  }
#endif
  if (ai_myai_init(*network, &params) != true) {
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f107 0210 	add.w	r2, r7, #16
 8004aec:	4611      	mov	r1, r2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f846 	bl	8004b80 <ai_myai_init>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f083 0301 	eor.w	r3, r3, #1
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d006      	beq.n	8004b0e <ai_myai_create_and_init+0xf2>
    err = ai_myai_get_error(*network);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff ff67 	bl	80049d8 <ai_myai_get_error>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8004b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3750      	adds	r7, #80	@ 0x50
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <ai_myai_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_myai_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d104      	bne.n	8004b32 <ai_myai_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8004b28:	4b06      	ldr	r3, [pc, #24]	@ (8004b44 <ai_myai_inputs_get+0x2c>)
 8004b2a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a06      	ldr	r2, [pc, #24]	@ (8004b48 <ai_myai_inputs_get+0x30>)
 8004b30:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8004b32:	6839      	ldr	r1, [r7, #0]
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f9bb 	bl	8004eb0 <ai_platform_inputs_get>
 8004b3a:	4603      	mov	r3, r0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000410 	.word	0x20000410
 8004b48:	a1c00100 	.word	0xa1c00100

08004b4c <ai_myai_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_myai_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d104      	bne.n	8004b66 <ai_myai_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8004b5c:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <ai_myai_outputs_get+0x2c>)
 8004b5e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a06      	ldr	r2, [pc, #24]	@ (8004b7c <ai_myai_outputs_get+0x30>)
 8004b64:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8004b66:	6839      	ldr	r1, [r7, #0]
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fa17 	bl	8004f9c <ai_platform_outputs_get>
 8004b6e:	4603      	mov	r3, r0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20000410 	.word	0x20000410
 8004b7c:	a1c00100 	.word	0xa1c00100

08004b80 <ai_myai_init>:


AI_API_ENTRY
ai_bool ai_myai_init(
  ai_handle network, const ai_network_params* params)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8004b8a:	6839      	ldr	r1, [r7, #0]
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fab9 	bl	8005104 <ai_platform_network_init>
 8004b92:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8004b94:	2301      	movs	r3, #1
 8004b96:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <ai_myai_init+0x22>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e026      	b.n	8004bf0 <ai_myai_init+0x70>
  ok &= myai_configure_weights(net_ctx, params);
 8004ba2:	6839      	ldr	r1, [r7, #0]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff feaf 	bl	8004908 <myai_configure_weights>
 8004baa:	4603      	mov	r3, r0
 8004bac:	461a      	mov	r2, r3
 8004bae:	7afb      	ldrb	r3, [r7, #11]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bf14      	ite	ne
 8004bb6:	2301      	movne	r3, #1
 8004bb8:	2300      	moveq	r3, #0
 8004bba:	72fb      	strb	r3, [r7, #11]
  ok &= myai_configure_activations(net_ctx, params);
 8004bbc:	6839      	ldr	r1, [r7, #0]
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f7ff fe5a 	bl	8004878 <myai_configure_activations>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	7afb      	ldrb	r3, [r7, #11]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fb2c 	bl	8005234 <ai_platform_network_post_init>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	7afb      	ldrb	r3, [r7, #11]
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004bee:	7afb      	ldrb	r3, [r7, #11]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <ai_myai_run>:


AI_API_ENTRY
ai_i32 ai_myai_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fb41 	bl	8005290 <ai_platform_network_process>
 8004c0e:	4603      	mov	r3, r0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <ai_myai_data_params_get>:
 * @ingroup myai_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_myai_data_params_get(ai_network_params* params)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <ai_myai_data_params_get+0x12>
 8004c26:	2300      	movs	r3, #0
 8004c28:	e016      	b.n	8004c58 <ai_myai_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8004c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8004c60 <ai_myai_data_params_get+0x48>)
 8004c2c:	f107 0310 	add.w	r3, r7, #16
 8004c30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c34:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MYAI_DATA_ACTIVATIONS_COUNT, g_myai_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8004c38:	4a0a      	ldr	r2, [pc, #40]	@ (8004c64 <ai_myai_data_params_get+0x4c>)
 8004c3a:	f107 0308 	add.w	r3, r7, #8
 8004c3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c42:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MYAI_DATA_WEIGHTS_COUNT, g_myai_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8004c46:	f107 0210 	add.w	r2, r7, #16
 8004c4a:	f107 0308 	add.w	r3, r7, #8
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f8f9 	bl	8004e48 <ai_platform_bind_network_params>
 8004c56:	4603      	mov	r3, r0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	080077ac 	.word	0x080077ac
 8004c64:	080077b4 	.word	0x080077b4

08004c68 <ai_buffer_get_size>:
 8004c68:	b360      	cbz	r0, 8004cc4 <ai_buffer_get_size+0x5c>
 8004c6a:	b430      	push	{r4, r5}
 8004c6c:	6803      	ldr	r3, [r0, #0]
 8004c6e:	4d16      	ldr	r5, [pc, #88]	@ (8004cc8 <ai_buffer_get_size+0x60>)
 8004c70:	6984      	ldr	r4, [r0, #24]
 8004c72:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8004c76:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004c7a:	42ab      	cmp	r3, r5
 8004c7c:	6862      	ldr	r2, [r4, #4]
 8004c7e:	d01b      	beq.n	8004cb8 <ai_buffer_get_size+0x50>
 8004c80:	7d03      	ldrb	r3, [r0, #20]
 8004c82:	6941      	ldr	r1, [r0, #20]
 8004c84:	f1a3 0301 	sub.w	r3, r3, #1
 8004c88:	fab3 f383 	clz	r3, r3
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8004c92:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8004c96:	da0b      	bge.n	8004cb0 <ai_buffer_get_size+0x48>
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d102      	bne.n	8004ca2 <ai_buffer_get_size+0x3a>
 8004c9c:	2802      	cmp	r0, #2
 8004c9e:	d007      	beq.n	8004cb0 <ai_buffer_get_size+0x48>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	4298      	cmp	r0, r3
 8004caa:	fb01 f202 	mul.w	r2, r1, r2
 8004cae:	d1f3      	bne.n	8004c98 <ai_buffer_get_size+0x30>
 8004cb0:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8004cb4:	bc30      	pop	{r4, r5}
 8004cb6:	4770      	bx	lr
 8004cb8:	2900      	cmp	r1, #0
 8004cba:	d0e1      	beq.n	8004c80 <ai_buffer_get_size+0x18>
 8004cbc:	321f      	adds	r2, #31
 8004cbe:	f022 021f 	bic.w	r2, r2, #31
 8004cc2:	e7dd      	b.n	8004c80 <ai_buffer_get_size+0x18>
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	000400c0 	.word	0x000400c0

08004ccc <ai_buffer_array_sane>:
 8004ccc:	b138      	cbz	r0, 8004cde <ai_buffer_array_sane+0x12>
 8004cce:	6843      	ldr	r3, [r0, #4]
 8004cd0:	b123      	cbz	r3, 8004cdc <ai_buffer_array_sane+0x10>
 8004cd2:	8840      	ldrh	r0, [r0, #2]
 8004cd4:	3800      	subs	r0, #0
 8004cd6:	bf18      	it	ne
 8004cd8:	2001      	movne	r0, #1
 8004cda:	4770      	bx	lr
 8004cdc:	4618      	mov	r0, r3
 8004cde:	4770      	bx	lr

08004ce0 <ai_buffer_array_item_set_address>:
 8004ce0:	b158      	cbz	r0, 8004cfa <ai_buffer_array_item_set_address+0x1a>
 8004ce2:	6843      	ldr	r3, [r0, #4]
 8004ce4:	b143      	cbz	r3, 8004cf8 <ai_buffer_array_item_set_address+0x18>
 8004ce6:	8840      	ldrh	r0, [r0, #2]
 8004ce8:	b138      	cbz	r0, 8004cfa <ai_buffer_array_item_set_address+0x1a>
 8004cea:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004cee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	605a      	str	r2, [r3, #4]
 8004cf6:	4770      	bx	lr
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	4770      	bx	lr

08004cfc <ai_platform_get_weights_map>:
 8004cfc:	b1f2      	cbz	r2, 8004d3c <ai_platform_get_weights_map+0x40>
 8004cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d00:	4605      	mov	r5, r0
 8004d02:	b1c8      	cbz	r0, 8004d38 <ai_platform_get_weights_map+0x3c>
 8004d04:	460c      	mov	r4, r1
 8004d06:	b1b9      	cbz	r1, 8004d38 <ai_platform_get_weights_map+0x3c>
 8004d08:	4b24      	ldr	r3, [pc, #144]	@ (8004d9c <ai_platform_get_weights_map+0xa0>)
 8004d0a:	6811      	ldr	r1, [r2, #0]
 8004d0c:	4299      	cmp	r1, r3
 8004d0e:	4616      	mov	r6, r2
 8004d10:	d00b      	beq.n	8004d2a <ai_platform_get_weights_map+0x2e>
 8004d12:	6856      	ldr	r6, [r2, #4]
 8004d14:	b186      	cbz	r6, 8004d38 <ai_platform_get_weights_map+0x3c>
 8004d16:	6837      	ldr	r7, [r6, #0]
 8004d18:	429f      	cmp	r7, r3
 8004d1a:	d011      	beq.n	8004d40 <ai_platform_get_weights_map+0x44>
 8004d1c:	6006      	str	r6, [r0, #0]
 8004d1e:	f1a4 0001 	sub.w	r0, r4, #1
 8004d22:	fab0 f080 	clz	r0, r0
 8004d26:	0940      	lsrs	r0, r0, #5
 8004d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d2a:	1d10      	adds	r0, r2, #4
 8004d2c:	f7ff ffce 	bl	8004ccc <ai_buffer_array_sane>
 8004d30:	b110      	cbz	r0, 8004d38 <ai_platform_get_weights_map+0x3c>
 8004d32:	88f3      	ldrh	r3, [r6, #6]
 8004d34:	429c      	cmp	r4, r3
 8004d36:	d01b      	beq.n	8004d70 <ai_platform_get_weights_map+0x74>
 8004d38:	2000      	movs	r0, #0
 8004d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	4770      	bx	lr
 8004d40:	4631      	mov	r1, r6
 8004d42:	3804      	subs	r0, #4
 8004d44:	2300      	movs	r3, #0
 8004d46:	e004      	b.n	8004d52 <ai_platform_get_weights_map+0x56>
 8004d48:	3301      	adds	r3, #1
 8004d4a:	429c      	cmp	r4, r3
 8004d4c:	f840 2f04 	str.w	r2, [r0, #4]!
 8004d50:	d005      	beq.n	8004d5e <ai_platform_get_weights_map+0x62>
 8004d52:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8004d56:	42ba      	cmp	r2, r7
 8004d58:	d1f6      	bne.n	8004d48 <ai_platform_get_weights_map+0x4c>
 8004d5a:	429c      	cmp	r4, r3
 8004d5c:	d1ec      	bne.n	8004d38 <ai_platform_get_weights_map+0x3c>
 8004d5e:	3401      	adds	r4, #1
 8004d60:	4b0e      	ldr	r3, [pc, #56]	@ (8004d9c <ai_platform_get_weights_map+0xa0>)
 8004d62:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004d66:	1ac0      	subs	r0, r0, r3
 8004d68:	fab0 f080 	clz	r0, r0
 8004d6c:	0940      	lsrs	r0, r0, #5
 8004d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d70:	2100      	movs	r1, #0
 8004d72:	1f28      	subs	r0, r5, #4
 8004d74:	468c      	mov	ip, r1
 8004d76:	e005      	b.n	8004d84 <ai_platform_get_weights_map+0x88>
 8004d78:	f10c 0c01 	add.w	ip, ip, #1
 8004d7c:	4564      	cmp	r4, ip
 8004d7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8004d82:	d005      	beq.n	8004d90 <ai_platform_get_weights_map+0x94>
 8004d84:	68b3      	ldr	r3, [r6, #8]
 8004d86:	440b      	add	r3, r1
 8004d88:	311c      	adds	r1, #28
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f3      	bne.n	8004d78 <ai_platform_get_weights_map+0x7c>
 8004d90:	eba4 000c 	sub.w	r0, r4, ip
 8004d94:	fab0 f080 	clz	r0, r0
 8004d98:	0940      	lsrs	r0, r0, #5
 8004d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d9c:	a1facade 	.word	0xa1facade

08004da0 <ai_platform_get_activations_map>:
 8004da0:	b1fa      	cbz	r2, 8004de2 <ai_platform_get_activations_map+0x42>
 8004da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da4:	4605      	mov	r5, r0
 8004da6:	b1d0      	cbz	r0, 8004dde <ai_platform_get_activations_map+0x3e>
 8004da8:	460c      	mov	r4, r1
 8004daa:	b1c1      	cbz	r1, 8004dde <ai_platform_get_activations_map+0x3e>
 8004dac:	4b25      	ldr	r3, [pc, #148]	@ (8004e44 <ai_platform_get_activations_map+0xa4>)
 8004dae:	6811      	ldr	r1, [r2, #0]
 8004db0:	4299      	cmp	r1, r3
 8004db2:	4616      	mov	r6, r2
 8004db4:	d00b      	beq.n	8004dce <ai_platform_get_activations_map+0x2e>
 8004db6:	6a16      	ldr	r6, [r2, #32]
 8004db8:	b18e      	cbz	r6, 8004dde <ai_platform_get_activations_map+0x3e>
 8004dba:	6837      	ldr	r7, [r6, #0]
 8004dbc:	429f      	cmp	r7, r3
 8004dbe:	d012      	beq.n	8004de6 <ai_platform_get_activations_map+0x46>
 8004dc0:	6006      	str	r6, [r0, #0]
 8004dc2:	f1a4 0001 	sub.w	r0, r4, #1
 8004dc6:	fab0 f080 	clz	r0, r0
 8004dca:	0940      	lsrs	r0, r0, #5
 8004dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dce:	f102 000c 	add.w	r0, r2, #12
 8004dd2:	f7ff ff7b 	bl	8004ccc <ai_buffer_array_sane>
 8004dd6:	b110      	cbz	r0, 8004dde <ai_platform_get_activations_map+0x3e>
 8004dd8:	89f3      	ldrh	r3, [r6, #14]
 8004dda:	429c      	cmp	r4, r3
 8004ddc:	d01b      	beq.n	8004e16 <ai_platform_get_activations_map+0x76>
 8004dde:	2000      	movs	r0, #0
 8004de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de2:	2000      	movs	r0, #0
 8004de4:	4770      	bx	lr
 8004de6:	4631      	mov	r1, r6
 8004de8:	3804      	subs	r0, #4
 8004dea:	2300      	movs	r3, #0
 8004dec:	e004      	b.n	8004df8 <ai_platform_get_activations_map+0x58>
 8004dee:	3301      	adds	r3, #1
 8004df0:	429c      	cmp	r4, r3
 8004df2:	f840 2f04 	str.w	r2, [r0, #4]!
 8004df6:	d005      	beq.n	8004e04 <ai_platform_get_activations_map+0x64>
 8004df8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8004dfc:	42ba      	cmp	r2, r7
 8004dfe:	d1f6      	bne.n	8004dee <ai_platform_get_activations_map+0x4e>
 8004e00:	429c      	cmp	r4, r3
 8004e02:	d1ec      	bne.n	8004dde <ai_platform_get_activations_map+0x3e>
 8004e04:	3401      	adds	r4, #1
 8004e06:	4b0f      	ldr	r3, [pc, #60]	@ (8004e44 <ai_platform_get_activations_map+0xa4>)
 8004e08:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004e0c:	1ac0      	subs	r0, r0, r3
 8004e0e:	fab0 f080 	clz	r0, r0
 8004e12:	0940      	lsrs	r0, r0, #5
 8004e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e16:	2100      	movs	r1, #0
 8004e18:	1f28      	subs	r0, r5, #4
 8004e1a:	468c      	mov	ip, r1
 8004e1c:	e005      	b.n	8004e2a <ai_platform_get_activations_map+0x8a>
 8004e1e:	f10c 0c01 	add.w	ip, ip, #1
 8004e22:	4564      	cmp	r4, ip
 8004e24:	f840 3f04 	str.w	r3, [r0, #4]!
 8004e28:	d005      	beq.n	8004e36 <ai_platform_get_activations_map+0x96>
 8004e2a:	6933      	ldr	r3, [r6, #16]
 8004e2c:	440b      	add	r3, r1
 8004e2e:	311c      	adds	r1, #28
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f3      	bne.n	8004e1e <ai_platform_get_activations_map+0x7e>
 8004e36:	eba4 000c 	sub.w	r0, r4, ip
 8004e3a:	fab0 f080 	clz	r0, r0
 8004e3e:	0940      	lsrs	r0, r0, #5
 8004e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e42:	bf00      	nop
 8004e44:	a1facade 	.word	0xa1facade

08004e48 <ai_platform_bind_network_params>:
 8004e48:	b1a0      	cbz	r0, 8004e74 <ai_platform_bind_network_params+0x2c>
 8004e4a:	b1b1      	cbz	r1, 8004e7a <ai_platform_bind_network_params+0x32>
 8004e4c:	b1c2      	cbz	r2, 8004e80 <ai_platform_bind_network_params+0x38>
 8004e4e:	b410      	push	{r4}
 8004e50:	4603      	mov	r3, r0
 8004e52:	4c0d      	ldr	r4, [pc, #52]	@ (8004e88 <ai_platform_bind_network_params+0x40>)
 8004e54:	f843 4b04 	str.w	r4, [r3], #4
 8004e58:	f100 0c0c 	add.w	ip, r0, #12
 8004e5c:	c903      	ldmia	r1, {r0, r1}
 8004e5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004e62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e66:	e88c 0003 	stmia.w	ip, {r0, r1}
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	4603      	mov	r3, r0
 8004e76:	4618      	mov	r0, r3
 8004e78:	4770      	bx	lr
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	4770      	bx	lr
 8004e80:	4613      	mov	r3, r2
 8004e82:	4618      	mov	r0, r3
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	a1facade 	.word	0xa1facade

08004e8c <ai_platform_network_get_error>:
 8004e8c:	4b04      	ldr	r3, [pc, #16]	@ (8004ea0 <ai_platform_network_get_error+0x14>)
 8004e8e:	6802      	ldr	r2, [r0, #0]
 8004e90:	4393      	bics	r3, r2
 8004e92:	d102      	bne.n	8004e9a <ai_platform_network_get_error+0xe>
 8004e94:	300c      	adds	r0, #12
 8004e96:	f000 bc19 	b.w	80056cc <core_get_error>
 8004e9a:	f241 0010 	movw	r0, #4112	@ 0x1010
 8004e9e:	4770      	bx	lr
 8004ea0:	a1c00100 	.word	0xa1c00100

08004ea4 <ai_platform_network_set_error>:
 8004ea4:	b110      	cbz	r0, 8004eac <ai_platform_network_set_error+0x8>
 8004ea6:	300c      	adds	r0, #12
 8004ea8:	f000 bc16 	b.w	80056d8 <core_set_error>
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop

08004eb0 <ai_platform_inputs_get>:
 8004eb0:	4b39      	ldr	r3, [pc, #228]	@ (8004f98 <ai_platform_inputs_get+0xe8>)
 8004eb2:	6802      	ldr	r2, [r0, #0]
 8004eb4:	4393      	bics	r3, r2
 8004eb6:	d163      	bne.n	8004f80 <ai_platform_inputs_get+0xd0>
 8004eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ebc:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	4605      	mov	r5, r0
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d04e      	beq.n	8004f66 <ai_platform_inputs_get+0xb6>
 8004ec8:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8004eca:	2f00      	cmp	r7, #0
 8004ecc:	d04b      	beq.n	8004f66 <ai_platform_inputs_get+0xb6>
 8004ece:	f04f 0b00 	mov.w	fp, #0
 8004ed2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ed6:	465e      	mov	r6, fp
 8004ed8:	46ba      	mov	sl, r7
 8004eda:	e016      	b.n	8004f0a <ai_platform_inputs_get+0x5a>
 8004edc:	9901      	ldr	r1, [sp, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	507a      	str	r2, [r7, r1]
 8004ee2:	69a1      	ldr	r1, [r4, #24]
 8004ee4:	684c      	ldr	r4, [r1, #4]
 8004ee6:	6028      	str	r0, [r5, #0]
 8004ee8:	f04f 0201 	mov.w	r2, #1
 8004eec:	752a      	strb	r2, [r5, #20]
 8004eee:	6968      	ldr	r0, [r5, #20]
 8004ef0:	60ab      	str	r3, [r5, #8]
 8004ef2:	f368 201f 	bfi	r0, r8, #8, #24
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e9c5 3403 	strd	r3, r4, [r5, #12]
 8004efc:	e9c5 0905 	strd	r0, r9, [r5, #20]
 8004f00:	f8c5 c004 	str.w	ip, [r5, #4]
 8004f04:	3601      	adds	r6, #1
 8004f06:	f10b 0b1c 	add.w	fp, fp, #28
 8004f0a:	f8ba 3000 	ldrh.w	r3, [sl]
 8004f0e:	00f2      	lsls	r2, r6, #3
 8004f10:	42b3      	cmp	r3, r6
 8004f12:	9201      	str	r2, [sp, #4]
 8004f14:	d936      	bls.n	8004f84 <ai_platform_inputs_get+0xd4>
 8004f16:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d032      	beq.n	8004f84 <ai_platform_inputs_get+0xd4>
 8004f1e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8004f22:	b37c      	cbz	r4, 8004f84 <ai_platform_inputs_get+0xd4>
 8004f24:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004f28:	69a2      	ldr	r2, [r4, #24]
 8004f2a:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8004f2e:	6810      	ldr	r0, [r2, #0]
 8004f30:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 8004f34:	68a3      	ldr	r3, [r4, #8]
 8004f36:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8004f3a:	f001 fa8f 	bl	800645c <ai_array_to_buffer_fmt>
 8004f3e:	69a1      	ldr	r1, [r4, #24]
 8004f40:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8004f44:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8004f48:	445d      	add	r5, fp
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0ca      	beq.n	8004ee4 <ai_platform_inputs_get+0x34>
 8004f4e:	2100      	movs	r1, #0
 8004f50:	f847 1036 	str.w	r1, [r7, r6, lsl #3]
 8004f54:	6821      	ldr	r1, [r4, #0]
 8004f56:	6059      	str	r1, [r3, #4]
 8004f58:	b111      	cbz	r1, 8004f60 <ai_platform_inputs_get+0xb0>
 8004f5a:	8849      	ldrh	r1, [r1, #2]
 8004f5c:	2900      	cmp	r1, #0
 8004f5e:	d1bd      	bne.n	8004edc <ai_platform_inputs_get+0x2c>
 8004f60:	69a1      	ldr	r1, [r4, #24]
 8004f62:	2300      	movs	r3, #0
 8004f64:	e7be      	b.n	8004ee4 <ai_platform_inputs_get+0x34>
 8004f66:	2218      	movs	r2, #24
 8004f68:	2111      	movs	r1, #17
 8004f6a:	f105 000c 	add.w	r0, r5, #12
 8004f6e:	2600      	movs	r6, #0
 8004f70:	f000 fbb2 	bl	80056d8 <core_set_error>
 8004f74:	4630      	mov	r0, r6
 8004f76:	b104      	cbz	r4, 8004f7a <ai_platform_inputs_get+0xca>
 8004f78:	8026      	strh	r6, [r4, #0]
 8004f7a:	b005      	add	sp, #20
 8004f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f80:	2000      	movs	r0, #0
 8004f82:	4770      	bx	lr
 8004f84:	b2b6      	uxth	r6, r6
 8004f86:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8004f8a:	2e00      	cmp	r6, #0
 8004f8c:	d0eb      	beq.n	8004f66 <ai_platform_inputs_get+0xb6>
 8004f8e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004f92:	6858      	ldr	r0, [r3, #4]
 8004f94:	e7ef      	b.n	8004f76 <ai_platform_inputs_get+0xc6>
 8004f96:	bf00      	nop
 8004f98:	a1c00100 	.word	0xa1c00100

08004f9c <ai_platform_outputs_get>:
 8004f9c:	4b37      	ldr	r3, [pc, #220]	@ (800507c <ai_platform_outputs_get+0xe0>)
 8004f9e:	6802      	ldr	r2, [r0, #0]
 8004fa0:	4393      	bics	r3, r2
 8004fa2:	d169      	bne.n	8005078 <ai_platform_outputs_get+0xdc>
 8004fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa8:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	b085      	sub	sp, #20
 8004fae:	4605      	mov	r5, r0
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	d94b      	bls.n	800504c <ai_platform_outputs_get+0xb0>
 8004fb4:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8004fb6:	f04f 0b00 	mov.w	fp, #0
 8004fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fbe:	465e      	mov	r6, fp
 8004fc0:	46d8      	mov	r8, fp
 8004fc2:	46ba      	mov	sl, r7
 8004fc4:	e016      	b.n	8004ff4 <ai_platform_outputs_get+0x58>
 8004fc6:	9901      	ldr	r1, [sp, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	507a      	str	r2, [r7, r1]
 8004fcc:	69a9      	ldr	r1, [r5, #24]
 8004fce:	684d      	ldr	r5, [r1, #4]
 8004fd0:	6020      	str	r0, [r4, #0]
 8004fd2:	f04f 0201 	mov.w	r2, #1
 8004fd6:	7522      	strb	r2, [r4, #20]
 8004fd8:	6960      	ldr	r0, [r4, #20]
 8004fda:	f8c4 c004 	str.w	ip, [r4, #4]
 8004fde:	f369 201f 	bfi	r0, r9, #8, #24
 8004fe2:	e9c4 5004 	strd	r5, r0, [r4, #16]
 8004fe6:	e9c4 3802 	strd	r3, r8, [r4, #8]
 8004fea:	9b00      	ldr	r3, [sp, #0]
 8004fec:	61a3      	str	r3, [r4, #24]
 8004fee:	3601      	adds	r6, #1
 8004ff0:	f10b 0b1c 	add.w	fp, fp, #28
 8004ff4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004ff8:	00f2      	lsls	r2, r6, #3
 8004ffa:	42b3      	cmp	r3, r6
 8004ffc:	9201      	str	r2, [sp, #4]
 8004ffe:	d932      	bls.n	8005066 <ai_platform_outputs_get+0xca>
 8005000:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005004:	b37b      	cbz	r3, 8005066 <ai_platform_outputs_get+0xca>
 8005006:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 800500a:	b365      	cbz	r5, 8005066 <ai_platform_outputs_get+0xca>
 800500c:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005010:	69aa      	ldr	r2, [r5, #24]
 8005012:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005016:	68ab      	ldr	r3, [r5, #8]
 8005018:	6810      	ldr	r0, [r2, #0]
 800501a:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800501e:	68eb      	ldr	r3, [r5, #12]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	f001 fa1b 	bl	800645c <ai_array_to_buffer_fmt>
 8005026:	69a9      	ldr	r1, [r5, #24]
 8005028:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800502c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8005030:	445c      	add	r4, fp
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0cb      	beq.n	8004fce <ai_platform_outputs_get+0x32>
 8005036:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
 800503a:	6829      	ldr	r1, [r5, #0]
 800503c:	6059      	str	r1, [r3, #4]
 800503e:	b111      	cbz	r1, 8005046 <ai_platform_outputs_get+0xaa>
 8005040:	8849      	ldrh	r1, [r1, #2]
 8005042:	2900      	cmp	r1, #0
 8005044:	d1bf      	bne.n	8004fc6 <ai_platform_outputs_get+0x2a>
 8005046:	69a9      	ldr	r1, [r5, #24]
 8005048:	2300      	movs	r3, #0
 800504a:	e7c0      	b.n	8004fce <ai_platform_outputs_get+0x32>
 800504c:	2218      	movs	r2, #24
 800504e:	2111      	movs	r1, #17
 8005050:	f105 000c 	add.w	r0, r5, #12
 8005054:	2600      	movs	r6, #0
 8005056:	f000 fb3f 	bl	80056d8 <core_set_error>
 800505a:	4630      	mov	r0, r6
 800505c:	b104      	cbz	r4, 8005060 <ai_platform_outputs_get+0xc4>
 800505e:	8026      	strh	r6, [r4, #0]
 8005060:	b005      	add	sp, #20
 8005062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005066:	b2b6      	uxth	r6, r6
 8005068:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800506c:	2e00      	cmp	r6, #0
 800506e:	d0ed      	beq.n	800504c <ai_platform_outputs_get+0xb0>
 8005070:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005074:	6858      	ldr	r0, [r3, #4]
 8005076:	e7f1      	b.n	800505c <ai_platform_outputs_get+0xc0>
 8005078:	2000      	movs	r0, #0
 800507a:	4770      	bx	lr
 800507c:	a1c00100 	.word	0xa1c00100

08005080 <ai_platform_network_create>:
 8005080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005084:	b083      	sub	sp, #12
 8005086:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800508a:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800508e:	b320      	cbz	r0, 80050da <ai_platform_network_create+0x5a>
 8005090:	6002      	str	r2, [r0, #0]
 8005092:	4616      	mov	r6, r2
 8005094:	461f      	mov	r7, r3
 8005096:	4604      	mov	r4, r0
 8005098:	f000 fb16 	bl	80056c8 <core_init>
 800509c:	b970      	cbnz	r0, 80050bc <ai_platform_network_create+0x3c>
 800509e:	2530      	movs	r5, #48	@ 0x30
 80050a0:	2300      	movs	r3, #0
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	2410      	movs	r4, #16
 80050a6:	464a      	mov	r2, r9
 80050a8:	4641      	mov	r1, r8
 80050aa:	4638      	mov	r0, r7
 80050ac:	f001 fa58 	bl	8006560 <ai_version_get>
 80050b0:	60b0      	str	r0, [r6, #8]
 80050b2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80050b6:	b003      	add	sp, #12
 80050b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050bc:	2200      	movs	r2, #0
 80050be:	4641      	mov	r1, r8
 80050c0:	4638      	mov	r0, r7
 80050c2:	f001 fa4d 	bl	8006560 <ai_version_get>
 80050c6:	2200      	movs	r2, #0
 80050c8:	4605      	mov	r5, r0
 80050ca:	2105      	movs	r1, #5
 80050cc:	2001      	movs	r0, #1
 80050ce:	f001 fa47 	bl	8006560 <ai_version_get>
 80050d2:	4285      	cmp	r5, r0
 80050d4:	d008      	beq.n	80050e8 <ai_platform_network_create+0x68>
 80050d6:	2501      	movs	r5, #1
 80050d8:	e7e2      	b.n	80050a0 <ai_platform_network_create+0x20>
 80050da:	2510      	movs	r5, #16
 80050dc:	462c      	mov	r4, r5
 80050de:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80050e2:	b003      	add	sp, #12
 80050e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050e8:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <ai_platform_network_create+0x80>)
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	a801      	add	r0, sp, #4
 80050ee:	f000 faff 	bl	80056f0 <ai_check_custom_types>
 80050f2:	b110      	cbz	r0, 80050fa <ai_platform_network_create+0x7a>
 80050f4:	2400      	movs	r4, #0
 80050f6:	4625      	mov	r5, r4
 80050f8:	e7d5      	b.n	80050a6 <ai_platform_network_create+0x26>
 80050fa:	2502      	movs	r5, #2
 80050fc:	e7d0      	b.n	80050a0 <ai_platform_network_create+0x20>
 80050fe:	bf00      	nop
 8005100:	84048403 	.word	0x84048403

08005104 <ai_platform_network_init>:
 8005104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005108:	4a48      	ldr	r2, [pc, #288]	@ (800522c <ai_platform_network_init+0x128>)
 800510a:	4604      	mov	r4, r0
 800510c:	6800      	ldr	r0, [r0, #0]
 800510e:	460b      	mov	r3, r1
 8005110:	ea00 0102 	and.w	r1, r0, r2
 8005114:	4382      	bics	r2, r0
 8005116:	d13b      	bne.n	8005190 <ai_platform_network_init+0x8c>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d078      	beq.n	800520e <ai_platform_network_init+0x10a>
 800511c:	4a44      	ldr	r2, [pc, #272]	@ (8005230 <ai_platform_network_init+0x12c>)
 800511e:	681d      	ldr	r5, [r3, #0]
 8005120:	4295      	cmp	r5, r2
 8005122:	d10a      	bne.n	800513a <ai_platform_network_init+0x36>
 8005124:	4288      	cmp	r0, r1
 8005126:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 800512a:	e9d3 6301 	ldrd	r6, r3, [r3, #4]
 800512e:	d03d      	beq.n	80051ac <ai_platform_network_init+0xa8>
 8005130:	2303      	movs	r3, #3
 8005132:	6123      	str	r3, [r4, #16]
 8005134:	4620      	mov	r0, r4
 8005136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800513a:	2101      	movs	r1, #1
 800513c:	4618      	mov	r0, r3
 800513e:	461d      	mov	r5, r3
 8005140:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8005144:	f7ff fd90 	bl	8004c68 <ai_buffer_get_size>
 8005148:	f105 071c 	add.w	r7, r5, #28
 800514c:	4606      	mov	r6, r0
 800514e:	2101      	movs	r1, #1
 8005150:	4638      	mov	r0, r7
 8005152:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8005156:	f7ff fd87 	bl	8004c68 <ai_buffer_get_size>
 800515a:	2e00      	cmp	r6, #0
 800515c:	bf0a      	itet	eq
 800515e:	4631      	moveq	r1, r6
 8005160:	2101      	movne	r1, #1
 8005162:	4635      	moveq	r5, r6
 8005164:	b1b0      	cbz	r0, 8005194 <ai_platform_network_init+0x90>
 8005166:	f1b9 0f00 	cmp.w	r9, #0
 800516a:	d057      	beq.n	800521c <ai_platform_network_init+0x118>
 800516c:	f04f 0e01 	mov.w	lr, #1
 8005170:	f1b8 0f00 	cmp.w	r8, #0
 8005174:	d011      	beq.n	800519a <ai_platform_network_init+0x96>
 8005176:	4b2d      	ldr	r3, [pc, #180]	@ (800522c <ai_platform_network_init+0x128>)
 8005178:	6822      	ldr	r2, [r4, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d1d8      	bne.n	8005130 <ai_platform_network_init+0x2c>
 800517e:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8005180:	428b      	cmp	r3, r1
 8005182:	d21b      	bcs.n	80051bc <ai_platform_network_init+0xb8>
 8005184:	2212      	movs	r2, #18
 8005186:	2116      	movs	r1, #22
 8005188:	f104 000c 	add.w	r0, r4, #12
 800518c:	f000 faa4 	bl	80056d8 <core_set_error>
 8005190:	2000      	movs	r0, #0
 8005192:	e7d0      	b.n	8005136 <ai_platform_network_init+0x32>
 8005194:	4607      	mov	r7, r0
 8005196:	4686      	mov	lr, r0
 8005198:	e7ea      	b.n	8005170 <ai_platform_network_init+0x6c>
 800519a:	2e00      	cmp	r6, #0
 800519c:	d0eb      	beq.n	8005176 <ai_platform_network_init+0x72>
 800519e:	2212      	movs	r2, #18
 80051a0:	2110      	movs	r1, #16
 80051a2:	f104 000c 	add.w	r0, r4, #12
 80051a6:	f000 fa97 	bl	80056d8 <core_set_error>
 80051aa:	e7f1      	b.n	8005190 <ai_platform_network_init+0x8c>
 80051ac:	e9c4 6308 	strd	r6, r3, [r4, #32]
 80051b0:	62e5      	str	r5, [r4, #44]	@ 0x2c
 80051b2:	62a2      	str	r2, [r4, #40]	@ 0x28
 80051b4:	4620      	mov	r0, r4
 80051b6:	f000 fac5 	bl	8005744 <ai_layers_init_all>
 80051ba:	e7b9      	b.n	8005130 <ai_platform_network_init+0x2c>
 80051bc:	b1e1      	cbz	r1, 80051f8 <ai_platform_network_init+0xf4>
 80051be:	46ac      	mov	ip, r5
 80051c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80051c4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80051c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051c8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80051cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80051d0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80051d2:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 80051d6:	4573      	cmp	r3, lr
 80051d8:	6226      	str	r6, [r4, #32]
 80051da:	d311      	bcc.n	8005200 <ai_platform_network_init+0xfc>
 80051dc:	f1be 0f00 	cmp.w	lr, #0
 80051e0:	d007      	beq.n	80051f2 <ai_platform_network_init+0xee>
 80051e2:	463e      	mov	r6, r7
 80051e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80051e6:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80051e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ea:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80051ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80051f2:	ea4f 420e 	mov.w	r2, lr, lsl #16
 80051f6:	e7dc      	b.n	80051b2 <ai_platform_network_init+0xae>
 80051f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80051fa:	6221      	str	r1, [r4, #32]
 80051fc:	4573      	cmp	r3, lr
 80051fe:	d2ed      	bcs.n	80051dc <ai_platform_network_init+0xd8>
 8005200:	2213      	movs	r2, #19
 8005202:	2116      	movs	r1, #22
 8005204:	f104 000c 	add.w	r0, r4, #12
 8005208:	f000 fa66 	bl	80056d8 <core_set_error>
 800520c:	e7c0      	b.n	8005190 <ai_platform_network_init+0x8c>
 800520e:	2211      	movs	r2, #17
 8005210:	2110      	movs	r1, #16
 8005212:	f104 000c 	add.w	r0, r4, #12
 8005216:	f000 fa5f 	bl	80056d8 <core_set_error>
 800521a:	e7b9      	b.n	8005190 <ai_platform_network_init+0x8c>
 800521c:	2213      	movs	r2, #19
 800521e:	2110      	movs	r1, #16
 8005220:	f104 000c 	add.w	r0, r4, #12
 8005224:	f000 fa58 	bl	80056d8 <core_set_error>
 8005228:	e7b2      	b.n	8005190 <ai_platform_network_init+0x8c>
 800522a:	bf00      	nop
 800522c:	a1c00100 	.word	0xa1c00100
 8005230:	a1facade 	.word	0xa1facade

08005234 <ai_platform_network_post_init>:
 8005234:	4b15      	ldr	r3, [pc, #84]	@ (800528c <ai_platform_network_post_init+0x58>)
 8005236:	6802      	ldr	r2, [r0, #0]
 8005238:	ea02 0103 	and.w	r1, r2, r3
 800523c:	4393      	bics	r3, r2
 800523e:	d123      	bne.n	8005288 <ai_platform_network_post_init+0x54>
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	6903      	ldr	r3, [r0, #16]
 8005244:	079b      	lsls	r3, r3, #30
 8005246:	4604      	mov	r4, r0
 8005248:	d503      	bpl.n	8005252 <ai_platform_network_post_init+0x1e>
 800524a:	428a      	cmp	r2, r1
 800524c:	d008      	beq.n	8005260 <ai_platform_network_post_init+0x2c>
 800524e:	2001      	movs	r0, #1
 8005250:	bd70      	pop	{r4, r5, r6, pc}
 8005252:	2210      	movs	r2, #16
 8005254:	2111      	movs	r1, #17
 8005256:	300c      	adds	r0, #12
 8005258:	f000 fa3e 	bl	80056d8 <core_set_error>
 800525c:	2000      	movs	r0, #0
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	f000 fa80 	bl	8005764 <ai_layers_post_init_all>
 8005264:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8005266:	2e00      	cmp	r6, #0
 8005268:	d0f1      	beq.n	800524e <ai_platform_network_post_init+0x1a>
 800526a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800526c:	2d00      	cmp	r5, #0
 800526e:	d0ee      	beq.n	800524e <ai_platform_network_post_init+0x1a>
 8005270:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005272:	4629      	mov	r1, r5
 8005274:	2000      	movs	r0, #0
 8005276:	47b0      	blx	r6
 8005278:	692b      	ldr	r3, [r5, #16]
 800527a:	42ab      	cmp	r3, r5
 800527c:	d0e7      	beq.n	800524e <ai_platform_network_post_init+0x1a>
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0e5      	beq.n	800524e <ai_platform_network_post_init+0x1a>
 8005282:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8005284:	461d      	mov	r5, r3
 8005286:	e7f3      	b.n	8005270 <ai_platform_network_post_init+0x3c>
 8005288:	2000      	movs	r0, #0
 800528a:	4770      	bx	lr
 800528c:	a1c00100 	.word	0xa1c00100

08005290 <ai_platform_network_process>:
 8005290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005294:	4bb7      	ldr	r3, [pc, #732]	@ (8005574 <ai_platform_network_process+0x2e4>)
 8005296:	4607      	mov	r7, r0
 8005298:	6800      	ldr	r0, [r0, #0]
 800529a:	4383      	bics	r3, r0
 800529c:	b085      	sub	sp, #20
 800529e:	f040 812d 	bne.w	80054fc <ai_platform_network_process+0x26c>
 80052a2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 811d 	beq.w	80054e4 <ai_platform_network_process+0x254>
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 80052b0:	f003 0303 	and.w	r3, r3, #3
 80052b4:	2600      	movs	r6, #0
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	61be      	str	r6, [r7, #24]
 80052ba:	f040 8129 	bne.w	8005510 <ai_platform_network_process+0x280>
 80052be:	2900      	cmp	r1, #0
 80052c0:	f000 8116 	beq.w	80054f0 <ai_platform_network_process+0x260>
 80052c4:	f1b9 0f00 	cmp.w	r9, #0
 80052c8:	f000 8112 	beq.w	80054f0 <ai_platform_network_process+0x260>
 80052cc:	f8b9 3000 	ldrh.w	r3, [r9]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 810d 	beq.w	80054f0 <ai_platform_network_process+0x260>
 80052d6:	698b      	ldr	r3, [r1, #24]
 80052d8:	e9cd 7202 	strd	r7, r2, [sp, #8]
 80052dc:	f8d3 b000 	ldr.w	fp, [r3]
 80052e0:	460c      	mov	r4, r1
 80052e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d072      	beq.n	80053d0 <ai_platform_network_process+0x140>
 80052ea:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 80052ee:	2d00      	cmp	r5, #0
 80052f0:	d06e      	beq.n	80053d0 <ai_platform_network_process+0x140>
 80052f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80052f6:	f8d3 a000 	ldr.w	sl, [r3]
 80052fa:	0133      	lsls	r3, r6, #4
 80052fc:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	f000 81ba 	beq.w	800567a <ai_platform_network_process+0x3ea>
 8005306:	69ab      	ldr	r3, [r5, #24]
 8005308:	2101      	movs	r1, #1
 800530a:	4620      	mov	r0, r4
 800530c:	685f      	ldr	r7, [r3, #4]
 800530e:	f7ff fcab 	bl	8004c68 <ai_buffer_get_size>
 8005312:	4287      	cmp	r7, r0
 8005314:	f0c0 8103 	bcc.w	800551e <ai_platform_network_process+0x28e>
 8005318:	68e8      	ldr	r0, [r5, #12]
 800531a:	69a1      	ldr	r1, [r4, #24]
 800531c:	68c2      	ldr	r2, [r0, #12]
 800531e:	68cb      	ldr	r3, [r1, #12]
 8005320:	429a      	cmp	r2, r3
 8005322:	f040 80fc 	bne.w	800551e <ai_platform_network_process+0x28e>
 8005326:	6882      	ldr	r2, [r0, #8]
 8005328:	688b      	ldr	r3, [r1, #8]
 800532a:	429a      	cmp	r2, r3
 800532c:	f040 80f7 	bne.w	800551e <ai_platform_network_process+0x28e>
 8005330:	6842      	ldr	r2, [r0, #4]
 8005332:	684b      	ldr	r3, [r1, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	f040 80f2 	bne.w	800551e <ai_platform_network_process+0x28e>
 800533a:	69ab      	ldr	r3, [r5, #24]
 800533c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005340:	f001 f8fc 	bl	800653c <ai_array_get_data_byte_size>
 8005344:	9001      	str	r0, [sp, #4]
 8005346:	4628      	mov	r0, r5
 8005348:	f001 f910 	bl	800656c <get_tensor_byte_size>
 800534c:	9b01      	ldr	r3, [sp, #4]
 800534e:	4283      	cmp	r3, r0
 8005350:	f0c0 80e5 	bcc.w	800551e <ai_platform_network_process+0x28e>
 8005354:	69ab      	ldr	r3, [r5, #24]
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	f001 f880 	bl	800645c <ai_array_to_buffer_fmt>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	4058      	eors	r0, r3
 8005360:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 8005364:	f040 8193 	bne.w	800568e <ai_platform_network_process+0x3fe>
 8005368:	6863      	ldr	r3, [r4, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 8185 	beq.w	800567a <ai_platform_network_process+0x3ea>
 8005370:	69a3      	ldr	r3, [r4, #24]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8182 	beq.w	800567e <ai_platform_network_process+0x3ee>
 800537a:	459b      	cmp	fp, r3
 800537c:	4628      	mov	r0, r5
 800537e:	bf38      	it	cc
 8005380:	469b      	movcc	fp, r3
 8005382:	f001 f8f3 	bl	800656c <get_tensor_byte_size>
 8005386:	f8c8 0008 	str.w	r0, [r8, #8]
 800538a:	69a3      	ldr	r3, [r4, #24]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	fb00 f303 	mul.w	r3, r0, r3
 8005392:	f8c8 300c 	str.w	r3, [r8, #12]
 8005396:	6861      	ldr	r1, [r4, #4]
 8005398:	f8c8 1004 	str.w	r1, [r8, #4]
 800539c:	0132      	lsls	r2, r6, #4
 800539e:	440b      	add	r3, r1
 80053a0:	f84a 3002 	str.w	r3, [sl, r2]
 80053a4:	69a8      	ldr	r0, [r5, #24]
 80053a6:	6803      	ldr	r3, [r0, #0]
 80053a8:	009a      	lsls	r2, r3, #2
 80053aa:	f106 0601 	add.w	r6, r6, #1
 80053ae:	f104 041c 	add.w	r4, r4, #28
 80053b2:	f100 80a7 	bmi.w	8005504 <ai_platform_network_process+0x274>
 80053b6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	4419      	add	r1, r3
 80053be:	6081      	str	r1, [r0, #8]
 80053c0:	69ab      	ldr	r3, [r5, #24]
 80053c2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80053c6:	60da      	str	r2, [r3, #12]
 80053c8:	f8b9 3000 	ldrh.w	r3, [r9]
 80053cc:	42b3      	cmp	r3, r6
 80053ce:	d888      	bhi.n	80052e2 <ai_platform_network_process+0x52>
 80053d0:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
 80053d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80053d6:	f1b8 0f00 	cmp.w	r8, #0
 80053da:	f000 80b5 	beq.w	8005548 <ai_platform_network_process+0x2b8>
 80053de:	2b01      	cmp	r3, #1
 80053e0:	f240 80a5 	bls.w	800552e <ai_platform_network_process+0x29e>
 80053e4:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 80053e8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 809e 	beq.w	800552e <ai_platform_network_process+0x29e>
 80053f2:	4645      	mov	r5, r8
 80053f4:	2600      	movs	r6, #0
 80053f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 80a3 	beq.w	8005546 <ai_platform_network_process+0x2b6>
 8005400:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8005404:	2c00      	cmp	r4, #0
 8005406:	f000 809e 	beq.w	8005546 <ai_platform_network_process+0x2b6>
 800540a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800540e:	f8d3 a000 	ldr.w	sl, [r3]
 8005412:	0133      	lsls	r3, r6, #4
 8005414:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	f000 8140 	beq.w	800569e <ai_platform_network_process+0x40e>
 800541e:	69a3      	ldr	r3, [r4, #24]
 8005420:	2101      	movs	r1, #1
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	9301      	str	r3, [sp, #4]
 8005426:	4628      	mov	r0, r5
 8005428:	f7ff fc1e 	bl	8004c68 <ai_buffer_get_size>
 800542c:	9b01      	ldr	r3, [sp, #4]
 800542e:	4283      	cmp	r3, r0
 8005430:	d37d      	bcc.n	800552e <ai_platform_network_process+0x29e>
 8005432:	68e0      	ldr	r0, [r4, #12]
 8005434:	69a9      	ldr	r1, [r5, #24]
 8005436:	68c2      	ldr	r2, [r0, #12]
 8005438:	68cb      	ldr	r3, [r1, #12]
 800543a:	429a      	cmp	r2, r3
 800543c:	d177      	bne.n	800552e <ai_platform_network_process+0x29e>
 800543e:	6882      	ldr	r2, [r0, #8]
 8005440:	688b      	ldr	r3, [r1, #8]
 8005442:	429a      	cmp	r2, r3
 8005444:	d173      	bne.n	800552e <ai_platform_network_process+0x29e>
 8005446:	6842      	ldr	r2, [r0, #4]
 8005448:	684b      	ldr	r3, [r1, #4]
 800544a:	429a      	cmp	r2, r3
 800544c:	d16f      	bne.n	800552e <ai_platform_network_process+0x29e>
 800544e:	69a3      	ldr	r3, [r4, #24]
 8005450:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005454:	f001 f872 	bl	800653c <ai_array_get_data_byte_size>
 8005458:	9001      	str	r0, [sp, #4]
 800545a:	4620      	mov	r0, r4
 800545c:	f001 f886 	bl	800656c <get_tensor_byte_size>
 8005460:	9b01      	ldr	r3, [sp, #4]
 8005462:	4283      	cmp	r3, r0
 8005464:	d363      	bcc.n	800552e <ai_platform_network_process+0x29e>
 8005466:	69a3      	ldr	r3, [r4, #24]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	f000 fff7 	bl	800645c <ai_array_to_buffer_fmt>
 800546e:	682b      	ldr	r3, [r5, #0]
 8005470:	4043      	eors	r3, r0
 8005472:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 8005476:	f040 8119 	bne.w	80056ac <ai_platform_network_process+0x41c>
 800547a:	686b      	ldr	r3, [r5, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 810e 	beq.w	800569e <ai_platform_network_process+0x40e>
 8005482:	69ab      	ldr	r3, [r5, #24]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 8117 	beq.w	80056ba <ai_platform_network_process+0x42a>
 800548c:	459b      	cmp	fp, r3
 800548e:	4620      	mov	r0, r4
 8005490:	bf38      	it	cc
 8005492:	469b      	movcc	fp, r3
 8005494:	f001 f86a 	bl	800656c <get_tensor_byte_size>
 8005498:	f8c8 0008 	str.w	r0, [r8, #8]
 800549c:	69aa      	ldr	r2, [r5, #24]
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	4603      	mov	r3, r0
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	f8c8 300c 	str.w	r3, [r8, #12]
 80054aa:	6869      	ldr	r1, [r5, #4]
 80054ac:	f8c8 1004 	str.w	r1, [r8, #4]
 80054b0:	0132      	lsls	r2, r6, #4
 80054b2:	440b      	add	r3, r1
 80054b4:	f84a 3002 	str.w	r3, [sl, r2]
 80054b8:	69a0      	ldr	r0, [r4, #24]
 80054ba:	6803      	ldr	r3, [r0, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	f106 0601 	add.w	r6, r6, #1
 80054c2:	f105 051c 	add.w	r5, r5, #28
 80054c6:	d439      	bmi.n	800553c <ai_platform_network_process+0x2ac>
 80054c8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	4419      	add	r1, r3
 80054d0:	6081      	str	r1, [r0, #8]
 80054d2:	69a3      	ldr	r3, [r4, #24]
 80054d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80054d8:	60da      	str	r2, [r3, #12]
 80054da:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80054de:	429e      	cmp	r6, r3
 80054e0:	d389      	bcc.n	80053f6 <ai_platform_network_process+0x166>
 80054e2:	e030      	b.n	8005546 <ai_platform_network_process+0x2b6>
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	f002 0203 	and.w	r2, r2, #3
 80054ec:	2a03      	cmp	r2, #3
 80054ee:	d10f      	bne.n	8005510 <ai_platform_network_process+0x280>
 80054f0:	2217      	movs	r2, #23
 80054f2:	2112      	movs	r1, #18
 80054f4:	f107 000c 	add.w	r0, r7, #12
 80054f8:	f000 f8ee 	bl	80056d8 <core_set_error>
 80054fc:	2000      	movs	r0, #0
 80054fe:	b005      	add	sp, #20
 8005500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005504:	f8b9 3000 	ldrh.w	r3, [r9]
 8005508:	429e      	cmp	r6, r3
 800550a:	f4ff aeea 	bcc.w	80052e2 <ai_platform_network_process+0x52>
 800550e:	e75f      	b.n	80053d0 <ai_platform_network_process+0x140>
 8005510:	2230      	movs	r2, #48	@ 0x30
 8005512:	2111      	movs	r1, #17
 8005514:	f107 000c 	add.w	r0, r7, #12
 8005518:	f000 f8de 	bl	80056d8 <core_set_error>
 800551c:	e7ee      	b.n	80054fc <ai_platform_network_process+0x26c>
 800551e:	9f02      	ldr	r7, [sp, #8]
 8005520:	2218      	movs	r2, #24
 8005522:	2112      	movs	r1, #18
 8005524:	f107 000c 	add.w	r0, r7, #12
 8005528:	f000 f8d6 	bl	80056d8 <core_set_error>
 800552c:	e7e6      	b.n	80054fc <ai_platform_network_process+0x26c>
 800552e:	2218      	movs	r2, #24
 8005530:	2113      	movs	r1, #19
 8005532:	f107 000c 	add.w	r0, r7, #12
 8005536:	f000 f8cf 	bl	80056d8 <core_set_error>
 800553a:	e7df      	b.n	80054fc <ai_platform_network_process+0x26c>
 800553c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005540:	429e      	cmp	r6, r3
 8005542:	f4ff af58 	bcc.w	80053f6 <ai_platform_network_process+0x166>
 8005546:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005548:	fa1f fb8b 	uxth.w	fp, fp
 800554c:	f8a7 b018 	strh.w	fp, [r7, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 808c 	beq.w	800566e <ai_platform_network_process+0x3de>
 8005556:	2b01      	cmp	r3, #1
 8005558:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 800555a:	f000 808b 	beq.w	8005674 <ai_platform_network_process+0x3e4>
 800555e:	f106 080c 	add.w	r8, r6, #12
 8005562:	8b78      	ldrh	r0, [r7, #26]
 8005564:	4583      	cmp	fp, r0
 8005566:	d9ca      	bls.n	80054fe <ai_platform_network_process+0x26e>
 8005568:	4645      	mov	r5, r8
 800556a:	46bb      	mov	fp, r7
 800556c:	f04f 0800 	mov.w	r8, #0
 8005570:	b9ae      	cbnz	r6, 800559e <ai_platform_network_process+0x30e>
 8005572:	e02d      	b.n	80055d0 <ai_platform_network_process+0x340>
 8005574:	a1c00100 	.word	0xa1c00100
 8005578:	68df      	ldr	r7, [r3, #12]
 800557a:	1bc9      	subs	r1, r1, r7
 800557c:	4408      	add	r0, r1
 800557e:	6098      	str	r0, [r3, #8]
 8005580:	6993      	ldr	r3, [r2, #24]
 8005582:	6862      	ldr	r2, [r4, #4]
 8005584:	60da      	str	r2, [r3, #12]
 8005586:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800558a:	f859 200a 	ldr.w	r2, [r9, sl]
 800558e:	440b      	add	r3, r1
 8005590:	4293      	cmp	r3, r2
 8005592:	bf24      	itt	cs
 8005594:	68e3      	ldrcs	r3, [r4, #12]
 8005596:	1ad3      	subcs	r3, r2, r3
 8005598:	6063      	str	r3, [r4, #4]
 800559a:	f108 0801 	add.w	r8, r8, #1
 800559e:	8833      	ldrh	r3, [r6, #0]
 80055a0:	4543      	cmp	r3, r8
 80055a2:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80055a6:	d913      	bls.n	80055d0 <ai_platform_network_process+0x340>
 80055a8:	6873      	ldr	r3, [r6, #4]
 80055aa:	b18b      	cbz	r3, 80055d0 <ai_platform_network_process+0x340>
 80055ac:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 80055b0:	b172      	cbz	r2, 80055d0 <ai_platform_network_process+0x340>
 80055b2:	68b1      	ldr	r1, [r6, #8]
 80055b4:	6993      	ldr	r3, [r2, #24]
 80055b6:	f8d1 9000 	ldr.w	r9, [r1]
 80055ba:	681f      	ldr	r7, [r3, #0]
 80055bc:	6899      	ldr	r1, [r3, #8]
 80055be:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80055c2:	00bf      	lsls	r7, r7, #2
 80055c4:	6860      	ldr	r0, [r4, #4]
 80055c6:	d5d7      	bpl.n	8005578 <ai_platform_network_process+0x2e8>
 80055c8:	68a2      	ldr	r2, [r4, #8]
 80055ca:	f000 fea9 	bl	8006320 <st_int8_copy>
 80055ce:	e7da      	b.n	8005586 <ai_platform_network_process+0x2f6>
 80055d0:	4658      	mov	r0, fp
 80055d2:	f000 f8e5 	bl	80057a0 <ai_layers_forward_all>
 80055d6:	2400      	movs	r4, #0
 80055d8:	b9b5      	cbnz	r5, 8005608 <ai_platform_network_process+0x378>
 80055da:	e03b      	b.n	8005654 <ai_platform_network_process+0x3c4>
 80055dc:	f859 300a 	ldr.w	r3, [r9, sl]
 80055e0:	eb01 020c 	add.w	r2, r1, ip
 80055e4:	429a      	cmp	r2, r3
 80055e6:	bf24      	itt	cs
 80055e8:	f8d8 200c 	ldrcs.w	r2, [r8, #12]
 80055ec:	1a9a      	subcs	r2, r3, r2
 80055ee:	f8c8 2004 	str.w	r2, [r8, #4]
 80055f2:	6981      	ldr	r1, [r0, #24]
 80055f4:	e9d1 3702 	ldrd	r3, r7, [r1, #8]
 80055f8:	1bdb      	subs	r3, r3, r7
 80055fa:	441a      	add	r2, r3
 80055fc:	608a      	str	r2, [r1, #8]
 80055fe:	6983      	ldr	r3, [r0, #24]
 8005600:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005604:	60da      	str	r2, [r3, #12]
 8005606:	3401      	adds	r4, #1
 8005608:	882b      	ldrh	r3, [r5, #0]
 800560a:	42a3      	cmp	r3, r4
 800560c:	d922      	bls.n	8005654 <ai_platform_network_process+0x3c4>
 800560e:	686b      	ldr	r3, [r5, #4]
 8005610:	b303      	cbz	r3, 8005654 <ai_platform_network_process+0x3c4>
 8005612:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005616:	b1e8      	cbz	r0, 8005654 <ai_platform_network_process+0x3c4>
 8005618:	68ab      	ldr	r3, [r5, #8]
 800561a:	6982      	ldr	r2, [r0, #24]
 800561c:	f8d3 9000 	ldr.w	r9, [r3]
 8005620:	6813      	ldr	r3, [r2, #0]
 8005622:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	e9d8 1c01 	ldrd	r1, ip, [r8, #4]
 800562c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8005630:	d5d4      	bpl.n	80055dc <ai_platform_network_process+0x34c>
 8005632:	6890      	ldr	r0, [r2, #8]
 8005634:	4662      	mov	r2, ip
 8005636:	f000 fe73 	bl	8006320 <st_int8_copy>
 800563a:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800563e:	f859 200a 	ldr.w	r2, [r9, sl]
 8005642:	440b      	add	r3, r1
 8005644:	4293      	cmp	r3, r2
 8005646:	bf24      	itt	cs
 8005648:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800564c:	1ad3      	subcs	r3, r2, r3
 800564e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005652:	e7d8      	b.n	8005606 <ai_platform_network_process+0x376>
 8005654:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 8005658:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800565c:	3001      	adds	r0, #1
 800565e:	b280      	uxth	r0, r0
 8005660:	4283      	cmp	r3, r0
 8005662:	f8ab 001a 	strh.w	r0, [fp, #26]
 8005666:	d881      	bhi.n	800556c <ai_platform_network_process+0x2dc>
 8005668:	b005      	add	sp, #20
 800566a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566e:	461e      	mov	r6, r3
 8005670:	4698      	mov	r8, r3
 8005672:	e776      	b.n	8005562 <ai_platform_network_process+0x2d2>
 8005674:	f04f 0800 	mov.w	r8, #0
 8005678:	e773      	b.n	8005562 <ai_platform_network_process+0x2d2>
 800567a:	9f02      	ldr	r7, [sp, #8]
 800567c:	e738      	b.n	80054f0 <ai_platform_network_process+0x260>
 800567e:	9f02      	ldr	r7, [sp, #8]
 8005680:	2221      	movs	r2, #33	@ 0x21
 8005682:	2112      	movs	r1, #18
 8005684:	f107 000c 	add.w	r0, r7, #12
 8005688:	f000 f826 	bl	80056d8 <core_set_error>
 800568c:	e736      	b.n	80054fc <ai_platform_network_process+0x26c>
 800568e:	9f02      	ldr	r7, [sp, #8]
 8005690:	2219      	movs	r2, #25
 8005692:	2112      	movs	r1, #18
 8005694:	f107 000c 	add.w	r0, r7, #12
 8005698:	f000 f81e 	bl	80056d8 <core_set_error>
 800569c:	e72e      	b.n	80054fc <ai_platform_network_process+0x26c>
 800569e:	2217      	movs	r2, #23
 80056a0:	2113      	movs	r1, #19
 80056a2:	f107 000c 	add.w	r0, r7, #12
 80056a6:	f000 f817 	bl	80056d8 <core_set_error>
 80056aa:	e727      	b.n	80054fc <ai_platform_network_process+0x26c>
 80056ac:	2219      	movs	r2, #25
 80056ae:	2113      	movs	r1, #19
 80056b0:	f107 000c 	add.w	r0, r7, #12
 80056b4:	f000 f810 	bl	80056d8 <core_set_error>
 80056b8:	e720      	b.n	80054fc <ai_platform_network_process+0x26c>
 80056ba:	2221      	movs	r2, #33	@ 0x21
 80056bc:	2113      	movs	r1, #19
 80056be:	f107 000c 	add.w	r0, r7, #12
 80056c2:	f000 f809 	bl	80056d8 <core_set_error>
 80056c6:	e719      	b.n	80054fc <ai_platform_network_process+0x26c>

080056c8 <core_init>:
 80056c8:	2001      	movs	r0, #1
 80056ca:	4770      	bx	lr

080056cc <core_get_error>:
 80056cc:	4603      	mov	r3, r0
 80056ce:	2200      	movs	r2, #0
 80056d0:	6800      	ldr	r0, [r0, #0]
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop

080056d8 <core_set_error>:
 80056d8:	4603      	mov	r3, r0
 80056da:	7800      	ldrb	r0, [r0, #0]
 80056dc:	b108      	cbz	r0, 80056e2 <core_set_error+0xa>
 80056de:	2000      	movs	r0, #0
 80056e0:	4770      	bx	lr
 80056e2:	7019      	strb	r1, [r3, #0]
 80056e4:	6819      	ldr	r1, [r3, #0]
 80056e6:	f362 211f 	bfi	r1, r2, #8, #24
 80056ea:	2001      	movs	r0, #1
 80056ec:	6019      	str	r1, [r3, #0]
 80056ee:	4770      	bx	lr

080056f0 <ai_check_custom_types>:
 80056f0:	b082      	sub	sp, #8
 80056f2:	4b13      	ldr	r3, [pc, #76]	@ (8005740 <ai_check_custom_types+0x50>)
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	b118      	cbz	r0, 8005700 <ai_check_custom_types+0x10>
 80056f8:	7803      	ldrb	r3, [r0, #0]
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	d002      	beq.n	8005704 <ai_check_custom_types+0x14>
 80056fe:	2000      	movs	r0, #0
 8005700:	b002      	add	sp, #8
 8005702:	4770      	bx	lr
 8005704:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005708:	4293      	cmp	r3, r2
 800570a:	d004      	beq.n	8005716 <ai_check_custom_types+0x26>
 800570c:	2001      	movs	r0, #1
 800570e:	f080 0001 	eor.w	r0, r0, #1
 8005712:	b002      	add	sp, #8
 8005714:	4770      	bx	lr
 8005716:	7842      	ldrb	r2, [r0, #1]
 8005718:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800571c:	429a      	cmp	r2, r3
 800571e:	f100 0001 	add.w	r0, r0, #1
 8005722:	d1f3      	bne.n	800570c <ai_check_custom_types+0x1c>
 8005724:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005728:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800572c:	429a      	cmp	r2, r3
 800572e:	d1ed      	bne.n	800570c <ai_check_custom_types+0x1c>
 8005730:	7842      	ldrb	r2, [r0, #1]
 8005732:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005736:	429a      	cmp	r2, r3
 8005738:	d1e8      	bne.n	800570c <ai_check_custom_types+0x1c>
 800573a:	2000      	movs	r0, #0
 800573c:	e7e7      	b.n	800570e <ai_check_custom_types+0x1e>
 800573e:	bf00      	nop
 8005740:	84048403 	.word	0x84048403

08005744 <ai_layers_init_all>:
 8005744:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005746:	4601      	mov	r1, r0
 8005748:	b153      	cbz	r3, 8005760 <ai_layers_init_all+0x1c>
 800574a:	2000      	movs	r0, #0
 800574c:	461a      	mov	r2, r3
 800574e:	60d9      	str	r1, [r3, #12]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	4293      	cmp	r3, r2
 8005754:	f100 0001 	add.w	r0, r0, #1
 8005758:	d003      	beq.n	8005762 <ai_layers_init_all+0x1e>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f6      	bne.n	800574c <ai_layers_init_all+0x8>
 800575e:	4770      	bx	lr
 8005760:	4618      	mov	r0, r3
 8005762:	4770      	bx	lr

08005764 <ai_layers_post_init_all>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005768:	b1b4      	cbz	r4, 8005798 <ai_layers_post_init_all+0x34>
 800576a:	6863      	ldr	r3, [r4, #4]
 800576c:	07db      	lsls	r3, r3, #31
 800576e:	f04f 0500 	mov.w	r5, #0
 8005772:	d504      	bpl.n	800577e <ai_layers_post_init_all+0x1a>
 8005774:	6a23      	ldr	r3, [r4, #32]
 8005776:	4620      	mov	r0, r4
 8005778:	b10b      	cbz	r3, 800577e <ai_layers_post_init_all+0x1a>
 800577a:	4798      	blx	r3
 800577c:	3501      	adds	r5, #1
 800577e:	6923      	ldr	r3, [r4, #16]
 8005780:	42a3      	cmp	r3, r4
 8005782:	d007      	beq.n	8005794 <ai_layers_post_init_all+0x30>
 8005784:	b133      	cbz	r3, 8005794 <ai_layers_post_init_all+0x30>
 8005786:	461c      	mov	r4, r3
 8005788:	6863      	ldr	r3, [r4, #4]
 800578a:	07db      	lsls	r3, r3, #31
 800578c:	d4f2      	bmi.n	8005774 <ai_layers_post_init_all+0x10>
 800578e:	6923      	ldr	r3, [r4, #16]
 8005790:	42a3      	cmp	r3, r4
 8005792:	d1f7      	bne.n	8005784 <ai_layers_post_init_all+0x20>
 8005794:	4628      	mov	r0, r5
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	4625      	mov	r5, r4
 800579a:	4628      	mov	r0, r5
 800579c:	bd38      	pop	{r3, r4, r5, pc}
 800579e:	bf00      	nop

080057a0 <ai_layers_forward_all>:
 80057a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a4:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 80057a8:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80057aa:	63c5      	str	r5, [r0, #60]	@ 0x3c
 80057ac:	4604      	mov	r4, r0
 80057ae:	f1b8 0f00 	cmp.w	r8, #0
 80057b2:	d02a      	beq.n	800580a <ai_layers_forward_all+0x6a>
 80057b4:	b32d      	cbz	r5, 8005802 <ai_layers_forward_all+0x62>
 80057b6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80057b8:	4629      	mov	r1, r5
 80057ba:	2001      	movs	r0, #1
 80057bc:	47c0      	blx	r8
 80057be:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 80057c0:	b1fe      	cbz	r6, 8005802 <ai_layers_forward_all+0x62>
 80057c2:	2700      	movs	r7, #0
 80057c4:	4631      	mov	r1, r6
 80057c6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80057c8:	2002      	movs	r0, #2
 80057ca:	47c0      	blx	r8
 80057cc:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80057ce:	4628      	mov	r0, r5
 80057d0:	696b      	ldr	r3, [r5, #20]
 80057d2:	4798      	blx	r3
 80057d4:	692e      	ldr	r6, [r5, #16]
 80057d6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80057d8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80057da:	42b5      	cmp	r5, r6
 80057dc:	f04f 0003 	mov.w	r0, #3
 80057e0:	d007      	beq.n	80057f2 <ai_layers_forward_all+0x52>
 80057e2:	47c0      	blx	r8
 80057e4:	3701      	adds	r7, #1
 80057e6:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80057e8:	2e00      	cmp	r6, #0
 80057ea:	d1eb      	bne.n	80057c4 <ai_layers_forward_all+0x24>
 80057ec:	4638      	mov	r0, r7
 80057ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f2:	2003      	movs	r0, #3
 80057f4:	47c0      	blx	r8
 80057f6:	2300      	movs	r3, #0
 80057f8:	3701      	adds	r7, #1
 80057fa:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80057fc:	4638      	mov	r0, r7
 80057fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005802:	2700      	movs	r7, #0
 8005804:	4638      	mov	r0, r7
 8005806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800580a:	2d00      	cmp	r5, #0
 800580c:	d0f9      	beq.n	8005802 <ai_layers_forward_all+0x62>
 800580e:	4647      	mov	r7, r8
 8005810:	696b      	ldr	r3, [r5, #20]
 8005812:	4628      	mov	r0, r5
 8005814:	4798      	blx	r3
 8005816:	462b      	mov	r3, r5
 8005818:	692d      	ldr	r5, [r5, #16]
 800581a:	429d      	cmp	r5, r3
 800581c:	d004      	beq.n	8005828 <ai_layers_forward_all+0x88>
 800581e:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8005820:	3701      	adds	r7, #1
 8005822:	2d00      	cmp	r5, #0
 8005824:	d1f4      	bne.n	8005810 <ai_layers_forward_all+0x70>
 8005826:	e7e1      	b.n	80057ec <ai_layers_forward_all+0x4c>
 8005828:	2300      	movs	r3, #0
 800582a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800582c:	3701      	adds	r7, #1
 800582e:	e7dd      	b.n	80057ec <ai_layers_forward_all+0x4c>

08005830 <forward_dense>:
 8005830:	6982      	ldr	r2, [r0, #24]
 8005832:	8813      	ldrh	r3, [r2, #0]
 8005834:	b90b      	cbnz	r3, 800583a <forward_dense+0xa>
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	deff      	udf	#255	@ 0xff
 800583a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800583e:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8005842:	f8da 0004 	ldr.w	r0, [sl, #4]
 8005846:	b08e      	sub	sp, #56	@ 0x38
 8005848:	b100      	cbz	r0, 800584c <forward_dense+0x1c>
 800584a:	6800      	ldr	r0, [r0, #0]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d061      	beq.n	8005914 <forward_dense+0xe4>
 8005850:	f8da 2010 	ldr.w	r2, [sl, #16]
 8005854:	b102      	cbz	r2, 8005858 <forward_dense+0x28>
 8005856:	6812      	ldr	r2, [r2, #0]
 8005858:	2b02      	cmp	r3, #2
 800585a:	d035      	beq.n	80058c8 <forward_dense+0x98>
 800585c:	f8da 501c 	ldr.w	r5, [sl, #28]
 8005860:	2d00      	cmp	r5, #0
 8005862:	d055      	beq.n	8005910 <forward_dense+0xe0>
 8005864:	f8ba 4018 	ldrh.w	r4, [sl, #24]
 8005868:	6829      	ldr	r1, [r5, #0]
 800586a:	2c01      	cmp	r4, #1
 800586c:	d955      	bls.n	800591a <forward_dense+0xea>
 800586e:	686d      	ldr	r5, [r5, #4]
 8005870:	698e      	ldr	r6, [r1, #24]
 8005872:	68c4      	ldr	r4, [r0, #12]
 8005874:	68d1      	ldr	r1, [r2, #12]
 8005876:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800587a:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800587e:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
 8005882:	6831      	ldr	r1, [r6, #0]
 8005884:	2b03      	cmp	r3, #3
 8005886:	fb07 f804 	mul.w	r8, r7, r4
 800588a:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 800588e:	d046      	beq.n	800591e <forward_dense+0xee>
 8005890:	f8da 4028 	ldr.w	r4, [sl, #40]	@ 0x28
 8005894:	b11c      	cbz	r4, 800589e <forward_dense+0x6e>
 8005896:	6824      	ldr	r4, [r4, #0]
 8005898:	b10c      	cbz	r4, 800589e <forward_dense+0x6e>
 800589a:	69a3      	ldr	r3, [r4, #24]
 800589c:	689c      	ldr	r4, [r3, #8]
 800589e:	6983      	ldr	r3, [r0, #24]
 80058a0:	6992      	ldr	r2, [r2, #24]
 80058a2:	6899      	ldr	r1, [r3, #8]
 80058a4:	6890      	ldr	r0, [r2, #8]
 80058a6:	b10d      	cbz	r5, 80058ac <forward_dense+0x7c>
 80058a8:	69ab      	ldr	r3, [r5, #24]
 80058aa:	689d      	ldr	r5, [r3, #8]
 80058ac:	4f1d      	ldr	r7, [pc, #116]	@ (8005924 <forward_dense+0xf4>)
 80058ae:	45bc      	cmp	ip, r7
 80058b0:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 80058b4:	d022      	beq.n	80058fc <forward_dense+0xcc>
 80058b6:	4e1c      	ldr	r6, [pc, #112]	@ (8005928 <forward_dense+0xf8>)
 80058b8:	45b4      	cmp	ip, r6
 80058ba:	d015      	beq.n	80058e8 <forward_dense+0xb8>
 80058bc:	4b1b      	ldr	r3, [pc, #108]	@ (800592c <forward_dense+0xfc>)
 80058be:	459c      	cmp	ip, r3
 80058c0:	d005      	beq.n	80058ce <forward_dense+0x9e>
 80058c2:	b00e      	add	sp, #56	@ 0x38
 80058c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c8:	2300      	movs	r3, #0
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	deff      	udf	#255	@ 0xff
 80058ce:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80058d2:	a807      	add	r0, sp, #28
 80058d4:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 80058d8:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 80058dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80058de:	f000 f939 	bl	8005b54 <forward_lite_dense_if32of32wf32>
 80058e2:	b00e      	add	sp, #56	@ 0x38
 80058e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e8:	e9cd 9803 	strd	r9, r8, [sp, #12]
 80058ec:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 80058f0:	9400      	str	r4, [sp, #0]
 80058f2:	f000 fa85 	bl	8005e00 <forward_lite_dense_if32of32wf32_lut4>
 80058f6:	b00e      	add	sp, #56	@ 0x38
 80058f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fc:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8005900:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 8005904:	9400      	str	r4, [sp, #0]
 8005906:	f000 fbbf 	bl	8006088 <forward_lite_dense_if32of32wf32_lut8>
 800590a:	b00e      	add	sp, #56	@ 0x38
 800590c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005910:	4629      	mov	r1, r5
 8005912:	e7ad      	b.n	8005870 <forward_dense+0x40>
 8005914:	2300      	movs	r3, #0
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	deff      	udf	#255	@ 0xff
 800591a:	2500      	movs	r5, #0
 800591c:	e7a8      	b.n	8005870 <forward_dense+0x40>
 800591e:	2300      	movs	r3, #0
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	deff      	udf	#255	@ 0xff
 8005924:	00d01040 	.word	0x00d01040
 8005928:	00f01040 	.word	0x00f01040
 800592c:	00821040 	.word	0x00821040

08005930 <forward_relu>:
 8005930:	6982      	ldr	r2, [r0, #24]
 8005932:	8813      	ldrh	r3, [r2, #0]
 8005934:	b90b      	cbnz	r3, 800593a <forward_relu+0xa>
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	deff      	udf	#255	@ 0xff
 800593a:	b470      	push	{r4, r5, r6}
 800593c:	6852      	ldr	r2, [r2, #4]
 800593e:	6854      	ldr	r4, [r2, #4]
 8005940:	b104      	cbz	r4, 8005944 <forward_relu+0x14>
 8005942:	6824      	ldr	r4, [r4, #0]
 8005944:	2b01      	cmp	r3, #1
 8005946:	f000 8088 	beq.w	8005a5a <forward_relu+0x12a>
 800594a:	6913      	ldr	r3, [r2, #16]
 800594c:	b103      	cbz	r3, 8005950 <forward_relu+0x20>
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6999      	ldr	r1, [r3, #24]
 8005952:	69a2      	ldr	r2, [r4, #24]
 8005954:	68a3      	ldr	r3, [r4, #8]
 8005956:	69c6      	ldr	r6, [r0, #28]
 8005958:	6888      	ldr	r0, [r1, #8]
 800595a:	6891      	ldr	r1, [r2, #8]
 800595c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8005960:	b196      	cbz	r6, 8005988 <forward_relu+0x58>
 8005962:	6872      	ldr	r2, [r6, #4]
 8005964:	2a01      	cmp	r2, #1
 8005966:	d03b      	beq.n	80059e0 <forward_relu+0xb0>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d06d      	beq.n	8005a48 <forward_relu+0x118>
 800596c:	68e5      	ldr	r5, [r4, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005974:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005978:	429d      	cmp	r5, r3
 800597a:	fb04 f202 	mul.w	r2, r4, r2
 800597e:	d1f9      	bne.n	8005974 <forward_relu+0x44>
 8005980:	68b3      	ldr	r3, [r6, #8]
 8005982:	bc70      	pop	{r4, r5, r6}
 8005984:	f000 b86e 	b.w	8005a64 <forward_lite_nl_relu_generic_if32of32_kernel>
 8005988:	2b00      	cmp	r3, #0
 800598a:	d05f      	beq.n	8005a4c <forward_relu+0x11c>
 800598c:	68e5      	ldr	r5, [r4, #12]
 800598e:	2201      	movs	r2, #1
 8005990:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005994:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005998:	429d      	cmp	r5, r3
 800599a:	fb04 f202 	mul.w	r2, r4, r2
 800599e:	d1f9      	bne.n	8005994 <forward_relu+0x64>
 80059a0:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80059a4:	3a01      	subs	r2, #1
 80059a6:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 80059aa:	428c      	cmp	r4, r1
 80059ac:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80059b0:	d314      	bcc.n	80059dc <forward_relu+0xac>
 80059b2:	1a61      	subs	r1, r4, r1
 80059b4:	f021 0103 	bic.w	r1, r1, #3
 80059b8:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8005a60 <forward_relu+0x130>
 80059bc:	1d23      	adds	r3, r4, #4
 80059be:	3004      	adds	r0, #4
 80059c0:	1a62      	subs	r2, r4, r1
 80059c2:	ed73 7a01 	vldmdb	r3!, {s15}
 80059c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ce:	bfb8      	it	lt
 80059d0:	eef0 7a47 	vmovlt.f32	s15, s14
 80059d4:	429a      	cmp	r2, r3
 80059d6:	ed60 7a01 	vstmdb	r0!, {s15}
 80059da:	d1f2      	bne.n	80059c2 <forward_relu+0x92>
 80059dc:	bc70      	pop	{r4, r5, r6}
 80059de:	4770      	bx	lr
 80059e0:	b3b3      	cbz	r3, 8005a50 <forward_relu+0x120>
 80059e2:	68e5      	ldr	r5, [r4, #12]
 80059e4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80059e8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80059ec:	429d      	cmp	r5, r3
 80059ee:	fb04 f202 	mul.w	r2, r4, r2
 80059f2:	d1f9      	bne.n	80059e8 <forward_relu+0xb8>
 80059f4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80059f8:	3a01      	subs	r2, #1
 80059fa:	68b3      	ldr	r3, [r6, #8]
 80059fc:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8005a00:	428c      	cmp	r4, r1
 8005a02:	ed93 7a00 	vldr	s14, [r3]
 8005a06:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005a0a:	d3e7      	bcc.n	80059dc <forward_relu+0xac>
 8005a0c:	1a61      	subs	r1, r4, r1
 8005a0e:	f021 0103 	bic.w	r1, r1, #3
 8005a12:	2500      	movs	r5, #0
 8005a14:	1d23      	adds	r3, r4, #4
 8005a16:	1a62      	subs	r2, r4, r1
 8005a18:	3004      	adds	r0, #4
 8005a1a:	ed73 7a01 	vldmdb	r3!, {s15}
 8005a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a26:	d50a      	bpl.n	8005a3e <forward_relu+0x10e>
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	ed60 7a01 	vstmdb	r0!, {s15}
 8005a2e:	d0d5      	beq.n	80059dc <forward_relu+0xac>
 8005a30:	ed73 7a01 	vldmdb	r3!, {s15}
 8005a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a3c:	d4f4      	bmi.n	8005a28 <forward_relu+0xf8>
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	f840 5d04 	str.w	r5, [r0, #-4]!
 8005a44:	d1e9      	bne.n	8005a1a <forward_relu+0xea>
 8005a46:	e7c9      	b.n	80059dc <forward_relu+0xac>
 8005a48:	2201      	movs	r2, #1
 8005a4a:	e799      	b.n	8005980 <forward_relu+0x50>
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	e7b0      	b.n	80059b2 <forward_relu+0x82>
 8005a50:	68b3      	ldr	r3, [r6, #8]
 8005a52:	460c      	mov	r4, r1
 8005a54:	ed93 7a00 	vldr	s14, [r3]
 8005a58:	e7d8      	b.n	8005a0c <forward_relu+0xdc>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	deff      	udf	#255	@ 0xff
 8005a60:	00000000 	.word	0x00000000

08005a64 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8005a64:	b500      	push	{lr}
 8005a66:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a6a:	ed93 7a00 	vldr	s14, [r3]
 8005a6e:	ed93 6a01 	vldr	s12, [r3, #4]
 8005a72:	f102 4c80 	add.w	ip, r2, #1073741824	@ 0x40000000
 8005a76:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005a7a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a82:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 8005a86:	eb01 028c 	add.w	r2, r1, ip, lsl #2
 8005a8a:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8005a8e:	d422      	bmi.n	8005ad6 <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 8005a90:	428a      	cmp	r2, r1
 8005a92:	d31e      	bcc.n	8005ad2 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8005a94:	1d13      	adds	r3, r2, #4
 8005a96:	3004      	adds	r0, #4
 8005a98:	eba2 020e 	sub.w	r2, r2, lr
 8005a9c:	e00c      	b.n	8005ab8 <forward_lite_nl_relu_generic_if32of32_kernel+0x54>
 8005a9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa6:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005aaa:	db01      	blt.n	8005ab0 <forward_lite_nl_relu_generic_if32of32_kernel+0x4c>
 8005aac:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	ed60 7a01 	vstmdb	r0!, {s15}
 8005ab6:	d00c      	beq.n	8005ad2 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8005ab8:	ed73 7a01 	vldmdb	r3!, {s15}
 8005abc:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac4:	daeb      	bge.n	8005a9e <forward_lite_nl_relu_generic_if32of32_kernel+0x3a>
 8005ac6:	eef0 7a66 	vmov.f32	s15, s13
 8005aca:	4293      	cmp	r3, r2
 8005acc:	ed60 7a01 	vstmdb	r0!, {s15}
 8005ad0:	d1f2      	bne.n	8005ab8 <forward_lite_nl_relu_generic_if32of32_kernel+0x54>
 8005ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ad6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ade:	d015      	beq.n	8005b0c <forward_lite_nl_relu_generic_if32of32_kernel+0xa8>
 8005ae0:	428a      	cmp	r2, r1
 8005ae2:	d3f6      	bcc.n	8005ad2 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8005ae4:	1d13      	adds	r3, r2, #4
 8005ae6:	3004      	adds	r0, #4
 8005ae8:	eba2 020e 	sub.w	r2, r2, lr
 8005aec:	ed73 7a01 	vldmdb	r3!, {s15}
 8005af0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005afc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005b00:	d822      	bhi.n	8005b48 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8005b02:	4293      	cmp	r3, r2
 8005b04:	ed60 6a01 	vstmdb	r0!, {s13}
 8005b08:	d1f0      	bne.n	8005aec <forward_lite_nl_relu_generic_if32of32_kernel+0x88>
 8005b0a:	e7e2      	b.n	8005ad2 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8005b0c:	428a      	cmp	r2, r1
 8005b0e:	d3e0      	bcc.n	8005ad2 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8005b10:	1d13      	adds	r3, r2, #4
 8005b12:	2100      	movs	r1, #0
 8005b14:	3004      	adds	r0, #4
 8005b16:	eba2 020e 	sub.w	r2, r2, lr
 8005b1a:	ed73 7a01 	vldmdb	r3!, {s15}
 8005b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b26:	dd0a      	ble.n	8005b3e <forward_lite_nl_relu_generic_if32of32_kernel+0xda>
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	ed60 7a01 	vstmdb	r0!, {s15}
 8005b2e:	d0d0      	beq.n	8005ad2 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8005b30:	ed73 7a01 	vldmdb	r3!, {s15}
 8005b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3c:	dcf4      	bgt.n	8005b28 <forward_lite_nl_relu_generic_if32of32_kernel+0xc4>
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	f840 1d04 	str.w	r1, [r0, #-4]!
 8005b44:	d1e9      	bne.n	8005b1a <forward_lite_nl_relu_generic_if32of32_kernel+0xb6>
 8005b46:	e7c4      	b.n	8005ad2 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	ed60 7a01 	vstmdb	r0!, {s15}
 8005b4e:	d1cd      	bne.n	8005aec <forward_lite_nl_relu_generic_if32of32_kernel+0x88>
 8005b50:	e7bf      	b.n	8005ad2 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8005b52:	bf00      	nop

08005b54 <forward_lite_dense_if32of32wf32>:
 8005b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b58:	e9d0 c305 	ldrd	ip, r3, [r0, #20]
 8005b5c:	6801      	ldr	r1, [r0, #0]
 8005b5e:	fb03 f30c 	mul.w	r3, r3, ip
 8005b62:	4602      	mov	r2, r0
 8005b64:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8005b68:	4281      	cmp	r1, r0
 8005b6a:	6857      	ldr	r7, [r2, #4]
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	f080 811f 	bcs.w	8005db0 <forward_lite_dense_if32of32wf32+0x25c>
 8005b72:	6915      	ldr	r5, [r2, #16]
 8005b74:	ea4f 068c 	mov.w	r6, ip, lsl #2
 8005b78:	4664      	mov	r4, ip
 8005b7a:	eb01 0806 	add.w	r8, r1, r6
 8005b7e:	4588      	cmp	r8, r1
 8005b80:	6896      	ldr	r6, [r2, #8]
 8005b82:	f240 8109 	bls.w	8005d98 <forward_lite_dense_if32of32wf32+0x244>
 8005b86:	f1a5 0e10 	sub.w	lr, r5, #16
 8005b8a:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8005b8e:	e9cd 0100 	strd	r0, r1, [sp]
 8005b92:	f10e 0e01 	add.w	lr, lr, #1
 8005b96:	ea4f 1b8e 	mov.w	fp, lr, lsl #6
 8005b9a:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8005b9e:	eb07 1e8e 	add.w	lr, r7, lr, lsl #6
 8005ba2:	468c      	mov	ip, r1
 8005ba4:	2d0f      	cmp	r5, #15
 8005ba6:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8005dfc <forward_lite_dense_if32of32wf32+0x2a8>
 8005baa:	f240 8104 	bls.w	8005db6 <forward_lite_dense_if32of32wf32+0x262>
 8005bae:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8005bb2:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 8005bbc:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 8005bc0:	ed11 6a10 	vldr	s12, [r1, #-64]	@ 0xffffffc0
 8005bc4:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8005bc8:	ed53 4a0d 	vldr	s9, [r3, #-52]	@ 0xffffffcc
 8005bcc:	ed13 5a0c 	vldr	s10, [r3, #-48]	@ 0xffffffd0
 8005bd0:	ed51 3a0a 	vldr	s7, [r1, #-40]	@ 0xffffffd8
 8005bd4:	ed13 3a0a 	vldr	s6, [r3, #-40]	@ 0xffffffd8
 8005bd8:	ed13 4a09 	vldr	s8, [r3, #-36]	@ 0xffffffdc
 8005bdc:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 8005be0:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8005be4:	ed11 2a05 	vldr	s4, [r1, #-20]	@ 0xffffffec
 8005be8:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8005bec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005bf0:	ed51 5a0e 	vldr	s11, [r1, #-56]	@ 0xffffffc8
 8005bf4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005bf8:	3810      	subs	r0, #16
 8005bfa:	280f      	cmp	r0, #15
 8005bfc:	ed53 6a0e 	vldr	s13, [r3, #-56]	@ 0xffffffc8
 8005c00:	ed11 6a0d 	vldr	s12, [r1, #-52]	@ 0xffffffcc
 8005c04:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8005c08:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 8005c0c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005c10:	ed51 5a1c 	vldr	s11, [r1, #-112]	@ 0xffffff90
 8005c14:	ed51 6a1b 	vldr	s13, [r1, #-108]	@ 0xffffff94
 8005c18:	eee4 7a86 	vfma.f32	s15, s9, s12
 8005c1c:	ed13 6a1b 	vldr	s12, [r3, #-108]	@ 0xffffff94
 8005c20:	ed51 4a19 	vldr	s9, [r1, #-100]	@ 0xffffff9c
 8005c24:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005c28:	ed11 5a18 	vldr	s10, [r1, #-96]	@ 0xffffffa0
 8005c2c:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8005c30:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005c34:	ed11 6a17 	vldr	s12, [r1, #-92]	@ 0xffffffa4
 8005c38:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8005c3c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005c40:	ed11 3a14 	vldr	s6, [r1, #-80]	@ 0xffffffb0
 8005c44:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8005c48:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005c4c:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 8005c50:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 8005c54:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005c58:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8005c5c:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 8005c60:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005c64:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 8005c68:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 8005c6c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005c70:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005c74:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005c78:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005c7c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005c80:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005c84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c88:	d896      	bhi.n	8005bb8 <forward_lite_dense_if32of32wf32+0x64>
 8005c8a:	eb06 010b 	add.w	r1, r6, fp
 8005c8e:	f005 000f 	and.w	r0, r5, #15
 8005c92:	4673      	mov	r3, lr
 8005c94:	2803      	cmp	r0, #3
 8005c96:	d95f      	bls.n	8005d58 <forward_lite_dense_if32of32wf32+0x204>
 8005c98:	edd1 6a01 	vldr	s13, [r1, #4]
 8005c9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ca0:	ed93 6a00 	vldr	s12, [r3]
 8005ca4:	ed93 5a02 	vldr	s10, [r3, #8]
 8005ca8:	edd1 5a02 	vldr	s11, [r1, #8]
 8005cac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005cb0:	edd1 6a00 	vldr	s13, [r1]
 8005cb4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005cb8:	1f04      	subs	r4, r0, #4
 8005cba:	2c03      	cmp	r4, #3
 8005cbc:	ed93 6a03 	vldr	s12, [r3, #12]
 8005cc0:	edd1 6a03 	vldr	s13, [r1, #12]
 8005cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cc8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005ccc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005cd0:	eeb0 7a67 	vmov.f32	s14, s15
 8005cd4:	d938      	bls.n	8005d48 <forward_lite_dense_if32of32wf32+0x1f4>
 8005cd6:	edd1 6a05 	vldr	s13, [r1, #20]
 8005cda:	edd3 7a05 	vldr	s15, [r3, #20]
 8005cde:	ed93 6a04 	vldr	s12, [r3, #16]
 8005ce2:	ed93 5a06 	vldr	s10, [r3, #24]
 8005ce6:	edd1 5a06 	vldr	s11, [r1, #24]
 8005cea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005cee:	edd1 6a04 	vldr	s13, [r1, #16]
 8005cf2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005cf6:	f1a0 0a08 	sub.w	sl, r0, #8
 8005cfa:	f1ba 0f03 	cmp.w	sl, #3
 8005cfe:	ed93 6a07 	vldr	s12, [r3, #28]
 8005d02:	edd1 6a07 	vldr	s13, [r1, #28]
 8005d06:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005d0a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d12:	d919      	bls.n	8005d48 <forward_lite_dense_if32of32wf32+0x1f4>
 8005d14:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8005d18:	edd1 7a09 	vldr	s15, [r1, #36]	@ 0x24
 8005d1c:	ed91 6a08 	vldr	s12, [r1, #32]
 8005d20:	ed91 5a0a 	vldr	s10, [r1, #40]	@ 0x28
 8005d24:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8005d28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005d2c:	edd3 6a08 	vldr	s13, [r3, #32]
 8005d30:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d34:	ed91 6a0b 	vldr	s12, [r1, #44]	@ 0x2c
 8005d38:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8005d3c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005d40:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d48:	08a4      	lsrs	r4, r4, #2
 8005d4a:	3401      	adds	r4, #1
 8005d4c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8005d50:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8005d54:	f000 0003 	and.w	r0, r0, #3
 8005d58:	b1a8      	cbz	r0, 8005d86 <forward_lite_dense_if32of32wf32+0x232>
 8005d5a:	edd3 6a00 	vldr	s13, [r3]
 8005d5e:	edd1 7a00 	vldr	s15, [r1]
 8005d62:	2801      	cmp	r0, #1
 8005d64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d68:	d00d      	beq.n	8005d86 <forward_lite_dense_if32of32wf32+0x232>
 8005d6a:	edd3 6a01 	vldr	s13, [r3, #4]
 8005d6e:	edd1 7a01 	vldr	s15, [r1, #4]
 8005d72:	2802      	cmp	r0, #2
 8005d74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d78:	d005      	beq.n	8005d86 <forward_lite_dense_if32of32wf32+0x232>
 8005d7a:	edd1 6a02 	vldr	s13, [r1, #8]
 8005d7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d82:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d86:	444e      	add	r6, r9
 8005d88:	ecac 7a01 	vstmia	ip!, {s14}
 8005d8c:	45e0      	cmp	r8, ip
 8005d8e:	f63f af09 	bhi.w	8005ba4 <forward_lite_dense_if32of32wf32+0x50>
 8005d92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d96:	6954      	ldr	r4, [r2, #20]
 8005d98:	68d3      	ldr	r3, [r2, #12]
 8005d9a:	b983      	cbnz	r3, 8005dbe <forward_lite_dense_if32of32wf32+0x26a>
 8005d9c:	6915      	ldr	r5, [r2, #16]
 8005d9e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005da2:	4288      	cmp	r0, r1
 8005da4:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8005da8:	ea4f 0684 	mov.w	r6, r4, lsl #2
 8005dac:	f63f aee5 	bhi.w	8005b7a <forward_lite_dense_if32of32wf32+0x26>
 8005db0:	b003      	add	sp, #12
 8005db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db6:	4628      	mov	r0, r5
 8005db8:	4631      	mov	r1, r6
 8005dba:	463b      	mov	r3, r7
 8005dbc:	e76a      	b.n	8005c94 <forward_lite_dense_if32of32wf32+0x140>
 8005dbe:	2c00      	cmp	r4, #0
 8005dc0:	d0ec      	beq.n	8005d9c <forward_lite_dense_if32of32wf32+0x248>
 8005dc2:	edd1 7a00 	vldr	s15, [r1]
 8005dc6:	ed93 7a00 	vldr	s14, [r3]
 8005dca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dce:	edc1 7a00 	vstr	s15, [r1]
 8005dd2:	6954      	ldr	r4, [r2, #20]
 8005dd4:	2c01      	cmp	r4, #1
 8005dd6:	d9e1      	bls.n	8005d9c <forward_lite_dense_if32of32wf32+0x248>
 8005dd8:	1d0d      	adds	r5, r1, #4
 8005dda:	2301      	movs	r3, #1
 8005ddc:	68d4      	ldr	r4, [r2, #12]
 8005dde:	ed95 7a00 	vldr	s14, [r5]
 8005de2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005de6:	edd4 7a00 	vldr	s15, [r4]
 8005dea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dee:	3301      	adds	r3, #1
 8005df0:	ece5 7a01 	vstmia	r5!, {s15}
 8005df4:	6954      	ldr	r4, [r2, #20]
 8005df6:	429c      	cmp	r4, r3
 8005df8:	d8f0      	bhi.n	8005ddc <forward_lite_dense_if32of32wf32+0x288>
 8005dfa:	e7cf      	b.n	8005d9c <forward_lite_dense_if32of32wf32+0x248>
 8005dfc:	00000000 	.word	0x00000000

08005e00 <forward_lite_dense_if32of32wf32_lut4>:
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	b08d      	sub	sp, #52	@ 0x34
 8005e06:	4604      	mov	r4, r0
 8005e08:	920a      	str	r2, [sp, #40]	@ 0x28
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8005e10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005e14:	fb02 f303 	mul.w	r3, r2, r3
 8005e18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e1c:	e9dd 6717 	ldrd	r6, r7, [sp, #92]	@ 0x5c
 8005e20:	460d      	mov	r5, r1
 8005e22:	9308      	str	r3, [sp, #32]
 8005e24:	f1b8 0f00 	cmp.w	r8, #0
 8005e28:	d004      	beq.n	8005e34 <forward_lite_dense_if32of32wf32_lut4+0x34>
 8005e2a:	2240      	movs	r2, #64	@ 0x40
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	f000 fa77 	bl	8006320 <st_int8_copy>
 8005e32:	4640      	mov	r0, r8
 8005e34:	9b08      	ldr	r3, [sp, #32]
 8005e36:	429c      	cmp	r4, r3
 8005e38:	f080 8108 	bcs.w	800604c <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8005e3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e3e:	9405      	str	r4, [sp, #20]
 8005e40:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8005e44:	f007 0301 	and.w	r3, r7, #1
 8005e48:	08fa      	lsrs	r2, r7, #3
 8005e4a:	9303      	str	r3, [sp, #12]
 8005e4c:	00bb      	lsls	r3, r7, #2
 8005e4e:	eb05 1b42 	add.w	fp, r5, r2, lsl #5
 8005e52:	9202      	str	r2, [sp, #8]
 8005e54:	f027 0901 	bic.w	r9, r7, #1
 8005e58:	0092      	lsls	r2, r2, #2
 8005e5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e5c:	9b05      	ldr	r3, [sp, #20]
 8005e5e:	9204      	str	r2, [sp, #16]
 8005e60:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 8005e64:	f105 0120 	add.w	r1, r5, #32
 8005e68:	46e6      	mov	lr, ip
 8005e6a:	f8cd c01c 	str.w	ip, [sp, #28]
 8005e6e:	465c      	mov	r4, fp
 8005e70:	9617      	str	r6, [sp, #92]	@ 0x5c
 8005e72:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8005e76:	9a07      	ldr	r2, [sp, #28]
 8005e78:	eb03 0a02 	add.w	sl, r3, r2
 8005e7c:	459a      	cmp	sl, r3
 8005e7e:	f1a1 0220 	sub.w	r2, r1, #32
 8005e82:	9206      	str	r2, [sp, #24]
 8005e84:	f240 80e5 	bls.w	8006052 <forward_lite_dense_if32of32wf32_lut4+0x252>
 8005e88:	f109 3bff 	add.w	fp, r9, #4294967295
 8005e8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e8e:	4698      	mov	r8, r3
 8005e90:	465d      	mov	r5, fp
 8005e92:	9b02      	ldr	r3, [sp, #8]
 8005e94:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8006084 <forward_lite_dense_if32of32wf32_lut4+0x284>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80bc 	beq.w	8006016 <forward_lite_dense_if32of32wf32_lut4+0x216>
 8005e9e:	9b04      	ldr	r3, [sp, #16]
 8005ea0:	eb02 0c03 	add.w	ip, r2, r3
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	7817      	ldrb	r7, [r2, #0]
 8005ea8:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8005eac:	7856      	ldrb	r6, [r2, #1]
 8005eae:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8005eb2:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 8005eb6:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 8005eba:	ed13 5a04 	vldr	s10, [r3, #-16]
 8005ebe:	ed53 5a03 	vldr	s11, [r3, #-12]
 8005ec2:	ed13 6a02 	vldr	s12, [r3, #-8]
 8005ec6:	ed53 6a01 	vldr	s13, [r3, #-4]
 8005eca:	f007 0e0f 	and.w	lr, r7, #15
 8005ece:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8005ed2:	edde 7a00 	vldr	s15, [lr]
 8005ed6:	093f      	lsrs	r7, r7, #4
 8005ed8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005edc:	ed97 3a00 	vldr	s6, [r7]
 8005ee0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8005ee4:	0937      	lsrs	r7, r6, #4
 8005ee6:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005eea:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005eee:	f006 060f 	and.w	r6, r6, #15
 8005ef2:	edd7 3a00 	vldr	s7, [r7]
 8005ef6:	7897      	ldrb	r7, [r2, #2]
 8005ef8:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005efc:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005f00:	ea4f 1e17 	mov.w	lr, r7, lsr #4
 8005f04:	ed96 4a00 	vldr	s8, [r6]
 8005f08:	78d6      	ldrb	r6, [r2, #3]
 8005f0a:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005f0e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8005f12:	f007 070f 	and.w	r7, r7, #15
 8005f16:	edde 4a00 	vldr	s9, [lr]
 8005f1a:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005f1e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005f22:	3204      	adds	r2, #4
 8005f24:	ed97 5a00 	vldr	s10, [r7]
 8005f28:	0937      	lsrs	r7, r6, #4
 8005f2a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005f2e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005f32:	f006 060f 	and.w	r6, r6, #15
 8005f36:	edd7 5a00 	vldr	s11, [r7]
 8005f3a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005f3e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005f42:	4562      	cmp	r2, ip
 8005f44:	ed96 6a00 	vldr	s12, [r6]
 8005f48:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005f4c:	f103 0320 	add.w	r3, r3, #32
 8005f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f54:	d1a7      	bne.n	8005ea6 <forward_lite_dense_if32of32wf32_lut4+0xa6>
 8005f56:	46a6      	mov	lr, r4
 8005f58:	45ce      	cmp	lr, r9
 8005f5a:	d261      	bcs.n	8006020 <forward_lite_dense_if32of32wf32_lut4+0x220>
 8005f5c:	eba5 070e 	sub.w	r7, r5, lr
 8005f60:	ea4f 0bd7 	mov.w	fp, r7, lsr #3
 8005f64:	f10e 0208 	add.w	r2, lr, #8
 8005f68:	f10c 36ff 	add.w	r6, ip, #4294967295
 8005f6c:	eb0c 07d7 	add.w	r7, ip, r7, lsr #3
 8005f70:	f8cd a004 	str.w	sl, [sp, #4]
 8005f74:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8005f78:	ed52 5a01 	vldr	s11, [r2, #-4]
 8005f7c:	ed52 6a02 	vldr	s13, [r2, #-8]
 8005f80:	f003 0a0f 	and.w	sl, r3, #15
 8005f84:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8005f88:	edda 7a00 	vldr	s15, [sl]
 8005f8c:	091b      	lsrs	r3, r3, #4
 8005f8e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005f92:	ed93 6a00 	vldr	s12, [r3]
 8005f96:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005f9a:	42b7      	cmp	r7, r6
 8005f9c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005fa0:	f102 0208 	add.w	r2, r2, #8
 8005fa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fa8:	d1e4      	bne.n	8005f74 <forward_lite_dense_if32of32wf32_lut4+0x174>
 8005faa:	f10b 0b01 	add.w	fp, fp, #1
 8005fae:	f8dd a004 	ldr.w	sl, [sp, #4]
 8005fb2:	eb0c 020b 	add.w	r2, ip, fp
 8005fb6:	eb0e 0ecb 	add.w	lr, lr, fp, lsl #3
 8005fba:	9b03      	ldr	r3, [sp, #12]
 8005fbc:	b30b      	cbz	r3, 8006002 <forward_lite_dense_if32of32wf32_lut4+0x202>
 8005fbe:	f812 3b01 	ldrb.w	r3, [r2], #1
 8005fc2:	edde 7a00 	vldr	s15, [lr]
 8005fc6:	091b      	lsrs	r3, r3, #4
 8005fc8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005fcc:	edd3 6a00 	vldr	s13, [r3]
 8005fd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005fd4:	eca8 7a01 	vstmia	r8!, {s14}
 8005fd8:	45c2      	cmp	sl, r8
 8005fda:	f63f af5a 	bhi.w	8005e92 <forward_lite_dense_if32of32wf32_lut4+0x92>
 8005fde:	9b05      	ldr	r3, [sp, #20]
 8005fe0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fe2:	189d      	adds	r5, r3, r2
 8005fe4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005fe6:	b9eb      	cbnz	r3, 8006024 <forward_lite_dense_if32of32wf32_lut4+0x224>
 8005fe8:	9b08      	ldr	r3, [sp, #32]
 8005fea:	42ab      	cmp	r3, r5
 8005fec:	d92e      	bls.n	800604c <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8005fee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ff0:	4499      	add	r9, r3
 8005ff2:	441c      	add	r4, r3
 8005ff4:	4419      	add	r1, r3
 8005ff6:	9b05      	ldr	r3, [sp, #20]
 8005ff8:	459a      	cmp	sl, r3
 8005ffa:	d92c      	bls.n	8006056 <forward_lite_dense_if32of32wf32_lut4+0x256>
 8005ffc:	9505      	str	r5, [sp, #20]
 8005ffe:	462b      	mov	r3, r5
 8006000:	e739      	b.n	8005e76 <forward_lite_dense_if32of32wf32_lut4+0x76>
 8006002:	eca8 7a01 	vstmia	r8!, {s14}
 8006006:	45c2      	cmp	sl, r8
 8006008:	d9e9      	bls.n	8005fde <forward_lite_dense_if32of32wf32_lut4+0x1de>
 800600a:	9b02      	ldr	r3, [sp, #8]
 800600c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006084 <forward_lite_dense_if32of32wf32_lut4+0x284>
 8006010:	2b00      	cmp	r3, #0
 8006012:	f47f af44 	bne.w	8005e9e <forward_lite_dense_if32of32wf32_lut4+0x9e>
 8006016:	f8dd e018 	ldr.w	lr, [sp, #24]
 800601a:	45ce      	cmp	lr, r9
 800601c:	4694      	mov	ip, r2
 800601e:	d39d      	bcc.n	8005f5c <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8006020:	4662      	mov	r2, ip
 8006022:	e7ca      	b.n	8005fba <forward_lite_dense_if32of32wf32_lut4+0x1ba>
 8006024:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0de      	beq.n	8005fe8 <forward_lite_dense_if32of32wf32_lut4+0x1e8>
 800602a:	9b07      	ldr	r3, [sp, #28]
 800602c:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 8006030:	1aea      	subs	r2, r5, r3
 8006032:	edd2 7a00 	vldr	s15, [r2]
 8006036:	ecbc 7a01 	vldmia	ip!, {s14}
 800603a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800603e:	ece2 7a01 	vstmia	r2!, {s15}
 8006042:	42aa      	cmp	r2, r5
 8006044:	d1f5      	bne.n	8006032 <forward_lite_dense_if32of32wf32_lut4+0x232>
 8006046:	9b08      	ldr	r3, [sp, #32]
 8006048:	42ab      	cmp	r3, r5
 800604a:	d8d0      	bhi.n	8005fee <forward_lite_dense_if32of32wf32_lut4+0x1ee>
 800604c:	b00d      	add	sp, #52	@ 0x34
 800604e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006052:	461d      	mov	r5, r3
 8006054:	e7c6      	b.n	8005fe4 <forward_lite_dense_if32of32wf32_lut4+0x1e4>
 8006056:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800605a:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800605c:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800605e:	eba5 0c0c 	sub.w	ip, r5, ip
 8006062:	b169      	cbz	r1, 8006080 <forward_lite_dense_if32of32wf32_lut4+0x280>
 8006064:	4663      	mov	r3, ip
 8006066:	4632      	mov	r2, r6
 8006068:	ed93 7a00 	vldr	s14, [r3]
 800606c:	ecf2 7a01 	vldmia	r2!, {s15}
 8006070:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006074:	ece3 7a01 	vstmia	r3!, {s15}
 8006078:	429d      	cmp	r5, r3
 800607a:	d1f5      	bne.n	8006068 <forward_lite_dense_if32of32wf32_lut4+0x268>
 800607c:	2900      	cmp	r1, #0
 800607e:	d1f1      	bne.n	8006064 <forward_lite_dense_if32of32wf32_lut4+0x264>
 8006080:	e7fe      	b.n	8006080 <forward_lite_dense_if32of32wf32_lut4+0x280>
 8006082:	bf00      	nop
 8006084:	00000000 	.word	0x00000000

08006088 <forward_lite_dense_if32of32wf32_lut8>:
 8006088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608c:	b087      	sub	sp, #28
 800608e:	4605      	mov	r5, r0
 8006090:	9205      	str	r2, [sp, #20]
 8006092:	4618      	mov	r0, r3
 8006094:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	@ 0x4c
 8006098:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800609a:	fb02 f303 	mul.w	r3, r2, r3
 800609e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80060a2:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 80060a6:	460f      	mov	r7, r1
 80060a8:	9303      	str	r3, [sp, #12]
 80060aa:	b12c      	cbz	r4, 80060b8 <forward_lite_dense_if32of32wf32_lut8+0x30>
 80060ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060b0:	4621      	mov	r1, r4
 80060b2:	f000 f935 	bl	8006320 <st_int8_copy>
 80060b6:	4620      	mov	r0, r4
 80060b8:	9b03      	ldr	r3, [sp, #12]
 80060ba:	429d      	cmp	r5, r3
 80060bc:	f080 8115 	bcs.w	80062ea <forward_lite_dense_if32of32wf32_lut8+0x262>
 80060c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060c2:	9500      	str	r5, [sp, #0]
 80060c4:	ea4f 09d6 	mov.w	r9, r6, lsr #3
 80060c8:	0099      	lsls	r1, r3, #2
 80060ca:	9b00      	ldr	r3, [sp, #0]
 80060cc:	9104      	str	r1, [sp, #16]
 80060ce:	00b2      	lsls	r2, r6, #2
 80060d0:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 80060d4:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 80060d8:	464d      	mov	r5, r9
 80060da:	4689      	mov	r9, r1
 80060dc:	4611      	mov	r1, r2
 80060de:	465a      	mov	r2, fp
 80060e0:	eb03 0b09 	add.w	fp, r3, r9
 80060e4:	3720      	adds	r7, #32
 80060e6:	459b      	cmp	fp, r3
 80060e8:	f006 0407 	and.w	r4, r6, #7
 80060ec:	f1a7 0e20 	sub.w	lr, r7, #32
 80060f0:	f240 80d6 	bls.w	80062a0 <forward_lite_dense_if32of32wf32_lut8+0x218>
 80060f4:	e9cd 9e01 	strd	r9, lr, [sp, #4]
 80060f8:	469c      	mov	ip, r3
 80060fa:	9b05      	ldr	r3, [sp, #20]
 80060fc:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800631c <forward_lite_dense_if32of32wf32_lut8+0x294>
 8006100:	2d00      	cmp	r5, #0
 8006102:	f000 80db 	beq.w	80062bc <forward_lite_dense_if32of32wf32_lut8+0x234>
 8006106:	eb03 090a 	add.w	r9, r3, sl
 800610a:	463e      	mov	r6, r7
 800610c:	f893 e001 	ldrb.w	lr, [r3, #1]
 8006110:	ed16 3a07 	vldr	s6, [r6, #-28]	@ 0xffffffe4
 8006114:	ed56 3a08 	vldr	s7, [r6, #-32]	@ 0xffffffe0
 8006118:	ed16 4a06 	vldr	s8, [r6, #-24]	@ 0xffffffe8
 800611c:	ed56 4a05 	vldr	s9, [r6, #-20]	@ 0xffffffec
 8006120:	ed16 5a04 	vldr	s10, [r6, #-16]
 8006124:	ed56 5a03 	vldr	s11, [r6, #-12]
 8006128:	ed16 6a02 	vldr	s12, [r6, #-8]
 800612c:	ed56 6a01 	vldr	s13, [r6, #-4]
 8006130:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8006134:	edde 7a00 	vldr	s15, [lr]
 8006138:	f893 e000 	ldrb.w	lr, [r3]
 800613c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8006140:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006144:	ed9e 3a00 	vldr	s6, [lr]
 8006148:	f893 e002 	ldrb.w	lr, [r3, #2]
 800614c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006150:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8006154:	3308      	adds	r3, #8
 8006156:	edde 3a00 	vldr	s7, [lr]
 800615a:	f813 ec05 	ldrb.w	lr, [r3, #-5]
 800615e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006162:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8006166:	3620      	adds	r6, #32
 8006168:	ed9e 4a00 	vldr	s8, [lr]
 800616c:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 8006170:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006174:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8006178:	edde 4a00 	vldr	s9, [lr]
 800617c:	f813 ec03 	ldrb.w	lr, [r3, #-3]
 8006180:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006184:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8006188:	ed9e 5a00 	vldr	s10, [lr]
 800618c:	f813 ec02 	ldrb.w	lr, [r3, #-2]
 8006190:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006194:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8006198:	edde 5a00 	vldr	s11, [lr]
 800619c:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 80061a0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80061a4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80061a8:	454b      	cmp	r3, r9
 80061aa:	ed9e 6a00 	vldr	s12, [lr]
 80061ae:	eee6 7a26 	vfma.f32	s15, s12, s13
 80061b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061b6:	d1a9      	bne.n	800610c <forward_lite_dense_if32of32wf32_lut8+0x84>
 80061b8:	4643      	mov	r3, r8
 80061ba:	2c00      	cmp	r4, #0
 80061bc:	d07c      	beq.n	80062b8 <forward_lite_dense_if32of32wf32_lut8+0x230>
 80061be:	f899 6000 	ldrb.w	r6, [r9]
 80061c2:	edd3 7a00 	vldr	s15, [r3]
 80061c6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80061ca:	edd6 6a00 	vldr	s13, [r6]
 80061ce:	2c01      	cmp	r4, #1
 80061d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80061d4:	d045      	beq.n	8006262 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 80061d6:	f899 6001 	ldrb.w	r6, [r9, #1]
 80061da:	edd3 7a01 	vldr	s15, [r3, #4]
 80061de:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80061e2:	edd6 6a00 	vldr	s13, [r6]
 80061e6:	2c02      	cmp	r4, #2
 80061e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80061ec:	d039      	beq.n	8006262 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 80061ee:	f899 6002 	ldrb.w	r6, [r9, #2]
 80061f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80061f6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80061fa:	edd6 6a00 	vldr	s13, [r6]
 80061fe:	2c03      	cmp	r4, #3
 8006200:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006204:	d02d      	beq.n	8006262 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 8006206:	f899 6003 	ldrb.w	r6, [r9, #3]
 800620a:	edd3 6a03 	vldr	s13, [r3, #12]
 800620e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006212:	edd6 7a00 	vldr	s15, [r6]
 8006216:	2c04      	cmp	r4, #4
 8006218:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800621c:	d021      	beq.n	8006262 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 800621e:	f899 6004 	ldrb.w	r6, [r9, #4]
 8006222:	edd3 6a04 	vldr	s13, [r3, #16]
 8006226:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800622a:	edd6 7a00 	vldr	s15, [r6]
 800622e:	2c05      	cmp	r4, #5
 8006230:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006234:	d015      	beq.n	8006262 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 8006236:	f899 6005 	ldrb.w	r6, [r9, #5]
 800623a:	edd3 6a05 	vldr	s13, [r3, #20]
 800623e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006242:	edd6 7a00 	vldr	s15, [r6]
 8006246:	2c06      	cmp	r4, #6
 8006248:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800624c:	d009      	beq.n	8006262 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 800624e:	edd3 7a06 	vldr	s15, [r3, #24]
 8006252:	f899 3006 	ldrb.w	r3, [r9, #6]
 8006256:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800625a:	edd3 6a00 	vldr	s13, [r3]
 800625e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006262:	eb09 0304 	add.w	r3, r9, r4
 8006266:	ecac 7a01 	vstmia	ip!, {s14}
 800626a:	45e3      	cmp	fp, ip
 800626c:	f63f af46 	bhi.w	80060fc <forward_lite_dense_if32of32wf32_lut8+0x74>
 8006270:	e9dd 3900 	ldrd	r3, r9, [sp]
 8006274:	9e04      	ldr	r6, [sp, #16]
 8006276:	eb03 0e06 	add.w	lr, r3, r6
 800627a:	bb1a      	cbnz	r2, 80062c4 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 800627c:	9b03      	ldr	r3, [sp, #12]
 800627e:	4573      	cmp	r3, lr
 8006280:	d933      	bls.n	80062ea <forward_lite_dense_if32of32wf32_lut8+0x262>
 8006282:	9b00      	ldr	r3, [sp, #0]
 8006284:	459b      	cmp	fp, r3
 8006286:	4488      	add	r8, r1
 8006288:	440f      	add	r7, r1
 800628a:	d942      	bls.n	8006312 <forward_lite_dense_if32of32wf32_lut8+0x28a>
 800628c:	4673      	mov	r3, lr
 800628e:	eb03 0b09 	add.w	fp, r3, r9
 8006292:	459b      	cmp	fp, r3
 8006294:	f8cd e000 	str.w	lr, [sp]
 8006298:	f1a7 0e20 	sub.w	lr, r7, #32
 800629c:	f63f af2a 	bhi.w	80060f4 <forward_lite_dense_if32of32wf32_lut8+0x6c>
 80062a0:	b97a      	cbnz	r2, 80062c2 <forward_lite_dense_if32of32wf32_lut8+0x23a>
 80062a2:	461d      	mov	r5, r3
 80062a4:	9b03      	ldr	r3, [sp, #12]
 80062a6:	42ab      	cmp	r3, r5
 80062a8:	4649      	mov	r1, r9
 80062aa:	4693      	mov	fp, r2
 80062ac:	d91d      	bls.n	80062ea <forward_lite_dense_if32of32wf32_lut8+0x262>
 80062ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80062b0:	4249      	negs	r1, r1
 80062b2:	465b      	mov	r3, fp
 80062b4:	b9e3      	cbnz	r3, 80062f0 <forward_lite_dense_if32of32wf32_lut8+0x268>
 80062b6:	e7fe      	b.n	80062b6 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 80062b8:	464b      	mov	r3, r9
 80062ba:	e7d4      	b.n	8006266 <forward_lite_dense_if32of32wf32_lut8+0x1de>
 80062bc:	4699      	mov	r9, r3
 80062be:	9b02      	ldr	r3, [sp, #8]
 80062c0:	e77b      	b.n	80061ba <forward_lite_dense_if32of32wf32_lut8+0x132>
 80062c2:	469e      	mov	lr, r3
 80062c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0d8      	beq.n	800627c <forward_lite_dense_if32of32wf32_lut8+0x1f4>
 80062ca:	ebae 0309 	sub.w	r3, lr, r9
 80062ce:	4616      	mov	r6, r2
 80062d0:	edd3 7a00 	vldr	s15, [r3]
 80062d4:	ecb6 7a01 	vldmia	r6!, {s14}
 80062d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062dc:	ece3 7a01 	vstmia	r3!, {s15}
 80062e0:	4573      	cmp	r3, lr
 80062e2:	d1f5      	bne.n	80062d0 <forward_lite_dense_if32of32wf32_lut8+0x248>
 80062e4:	9b03      	ldr	r3, [sp, #12]
 80062e6:	4573      	cmp	r3, lr
 80062e8:	d8cb      	bhi.n	8006282 <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 80062ea:	b007      	add	sp, #28
 80062ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f0:	2a00      	cmp	r2, #0
 80062f2:	d0df      	beq.n	80062b4 <forward_lite_dense_if32of32wf32_lut8+0x22c>
 80062f4:	469b      	mov	fp, r3
 80062f6:	4429      	add	r1, r5
 80062f8:	460b      	mov	r3, r1
 80062fa:	465a      	mov	r2, fp
 80062fc:	ed93 7a00 	vldr	s14, [r3]
 8006300:	ecf2 7a01 	vldmia	r2!, {s15}
 8006304:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006308:	ece3 7a01 	vstmia	r3!, {s15}
 800630c:	42ab      	cmp	r3, r5
 800630e:	d1f5      	bne.n	80062fc <forward_lite_dense_if32of32wf32_lut8+0x274>
 8006310:	e7f2      	b.n	80062f8 <forward_lite_dense_if32of32wf32_lut8+0x270>
 8006312:	4649      	mov	r1, r9
 8006314:	4693      	mov	fp, r2
 8006316:	4675      	mov	r5, lr
 8006318:	e7c9      	b.n	80062ae <forward_lite_dense_if32of32wf32_lut8+0x226>
 800631a:	bf00      	nop
 800631c:	00000000 	.word	0x00000000

08006320 <st_int8_copy>:
 8006320:	4288      	cmp	r0, r1
 8006322:	d021      	beq.n	8006368 <st_int8_copy+0x48>
 8006324:	b302      	cbz	r2, 8006368 <st_int8_copy+0x48>
 8006326:	4288      	cmp	r0, r1
 8006328:	d313      	bcc.n	8006352 <st_int8_copy+0x32>
 800632a:	2a03      	cmp	r2, #3
 800632c:	d81d      	bhi.n	800636a <st_int8_copy+0x4a>
 800632e:	3a01      	subs	r2, #1
 8006330:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006334:	f801 3b01 	strb.w	r3, [r1], #1
 8006338:	b1b2      	cbz	r2, 8006368 <st_int8_copy+0x48>
 800633a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800633e:	f801 3b01 	strb.w	r3, [r1], #1
 8006342:	2a01      	cmp	r2, #1
 8006344:	f000 8088 	beq.w	8006458 <st_int8_copy+0x138>
 8006348:	f810 3b01 	ldrb.w	r3, [r0], #1
 800634c:	f801 3b01 	strb.w	r3, [r1], #1
 8006350:	4770      	bx	lr
 8006352:	1883      	adds	r3, r0, r2
 8006354:	428b      	cmp	r3, r1
 8006356:	d9e8      	bls.n	800632a <st_int8_copy+0xa>
 8006358:	440a      	add	r2, r1
 800635a:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800635e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006362:	4298      	cmp	r0, r3
 8006364:	d1f9      	bne.n	800635a <st_int8_copy+0x3a>
 8006366:	4770      	bx	lr
 8006368:	4770      	bx	lr
 800636a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800636e:	f001 0e03 	and.w	lr, r1, #3
 8006372:	f1ce 0304 	rsb	r3, lr, #4
 8006376:	eba2 0c03 	sub.w	ip, r2, r3
 800637a:	f000 0803 	and.w	r8, r0, #3
 800637e:	f1ce 0203 	rsb	r2, lr, #3
 8006382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006386:	f801 3b01 	strb.w	r3, [r1], #1
 800638a:	b182      	cbz	r2, 80063ae <st_int8_copy+0x8e>
 800638c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006390:	f801 3b01 	strb.w	r3, [r1], #1
 8006394:	2a01      	cmp	r2, #1
 8006396:	d00a      	beq.n	80063ae <st_int8_copy+0x8e>
 8006398:	f810 3b01 	ldrb.w	r3, [r0], #1
 800639c:	f801 3b01 	strb.w	r3, [r1], #1
 80063a0:	f1be 0f01 	cmp.w	lr, #1
 80063a4:	d003      	beq.n	80063ae <st_int8_copy+0x8e>
 80063a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80063aa:	f801 3b01 	strb.w	r3, [r1], #1
 80063ae:	45c6      	cmp	lr, r8
 80063b0:	d02a      	beq.n	8006408 <st_int8_copy+0xe8>
 80063b2:	ea5f 121c 	movs.w	r2, ip, lsr #4
 80063b6:	d00a      	beq.n	80063ce <st_int8_copy+0xae>
 80063b8:	f850 3b04 	ldr.w	r3, [r0], #4
 80063bc:	f850 4b04 	ldr.w	r4, [r0], #4
 80063c0:	f850 5b04 	ldr.w	r5, [r0], #4
 80063c4:	f850 6b04 	ldr.w	r6, [r0], #4
 80063c8:	c178      	stmia	r1!, {r3, r4, r5, r6}
 80063ca:	3a01      	subs	r2, #1
 80063cc:	d1f4      	bne.n	80063b8 <st_int8_copy+0x98>
 80063ce:	f01c 0f08 	tst.w	ip, #8
 80063d2:	d004      	beq.n	80063de <st_int8_copy+0xbe>
 80063d4:	f850 3b04 	ldr.w	r3, [r0], #4
 80063d8:	f850 4b04 	ldr.w	r4, [r0], #4
 80063dc:	c118      	stmia	r1!, {r3, r4}
 80063de:	f01c 0f04 	tst.w	ip, #4
 80063e2:	d003      	beq.n	80063ec <st_int8_copy+0xcc>
 80063e4:	f850 3b04 	ldr.w	r3, [r0], #4
 80063e8:	f841 3b04 	str.w	r3, [r1], #4
 80063ec:	f01c 0f02 	tst.w	ip, #2
 80063f0:	d003      	beq.n	80063fa <st_int8_copy+0xda>
 80063f2:	f830 3b02 	ldrh.w	r3, [r0], #2
 80063f6:	f821 3b02 	strh.w	r3, [r1], #2
 80063fa:	f01c 0f01 	tst.w	ip, #1
 80063fe:	d001      	beq.n	8006404 <st_int8_copy+0xe4>
 8006400:	7803      	ldrb	r3, [r0, #0]
 8006402:	700b      	strb	r3, [r1, #0]
 8006404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006408:	ea5f 199c 	movs.w	r9, ip, lsr #6
 800640c:	d00e      	beq.n	800642c <st_int8_copy+0x10c>
 800640e:	4688      	mov	r8, r1
 8006410:	4686      	mov	lr, r0
 8006412:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006416:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800641a:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800641e:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006422:	f1b9 0901 	subs.w	r9, r9, #1
 8006426:	4641      	mov	r1, r8
 8006428:	4670      	mov	r0, lr
 800642a:	d1f0      	bne.n	800640e <st_int8_copy+0xee>
 800642c:	f01c 0f20 	tst.w	ip, #32
 8006430:	d007      	beq.n	8006442 <st_int8_copy+0x122>
 8006432:	4688      	mov	r8, r1
 8006434:	4686      	mov	lr, r0
 8006436:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800643a:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800643e:	4641      	mov	r1, r8
 8006440:	4670      	mov	r0, lr
 8006442:	f01c 0f10 	tst.w	ip, #16
 8006446:	d001      	beq.n	800644c <st_int8_copy+0x12c>
 8006448:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 800644a:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800644c:	f01c 0f08 	tst.w	ip, #8
 8006450:	d0c5      	beq.n	80063de <st_int8_copy+0xbe>
 8006452:	c818      	ldmia	r0!, {r3, r4}
 8006454:	c118      	stmia	r1!, {r3, r4}
 8006456:	e7c2      	b.n	80063de <st_int8_copy+0xbe>
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop

0800645c <ai_array_to_buffer_fmt>:
 800645c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006460:	2b02      	cmp	r3, #2
 8006462:	d055      	beq.n	8006510 <ai_array_to_buffer_fmt+0xb4>
 8006464:	4a2d      	ldr	r2, [pc, #180]	@ (800651c <ai_array_to_buffer_fmt+0xc0>)
 8006466:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800646a:	4293      	cmp	r3, r2
 800646c:	d010      	beq.n	8006490 <ai_array_to_buffer_fmt+0x34>
 800646e:	dc21      	bgt.n	80064b4 <ai_array_to_buffer_fmt+0x58>
 8006470:	4a2b      	ldr	r2, [pc, #172]	@ (8006520 <ai_array_to_buffer_fmt+0xc4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00c      	beq.n	8006490 <ai_array_to_buffer_fmt+0x34>
 8006476:	dd0f      	ble.n	8006498 <ai_array_to_buffer_fmt+0x3c>
 8006478:	4a2a      	ldr	r2, [pc, #168]	@ (8006524 <ai_array_to_buffer_fmt+0xc8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d008      	beq.n	8006490 <ai_array_to_buffer_fmt+0x34>
 800647e:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8006482:	4293      	cmp	r3, r2
 8006484:	d004      	beq.n	8006490 <ai_array_to_buffer_fmt+0x34>
 8006486:	4a28      	ldr	r2, [pc, #160]	@ (8006528 <ai_array_to_buffer_fmt+0xcc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	bf0c      	ite	eq
 800648c:	4613      	moveq	r3, r2
 800648e:	2340      	movne	r3, #64	@ 0x40
 8006490:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8006494:	4318      	orrs	r0, r3
 8006496:	4770      	bx	lr
 8006498:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800649c:	4293      	cmp	r3, r2
 800649e:	d0f7      	beq.n	8006490 <ai_array_to_buffer_fmt+0x34>
 80064a0:	dd2c      	ble.n	80064fc <ai_array_to_buffer_fmt+0xa0>
 80064a2:	4a22      	ldr	r2, [pc, #136]	@ (800652c <ai_array_to_buffer_fmt+0xd0>)
 80064a4:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80064a8:	4293      	cmp	r3, r2
 80064aa:	bf0c      	ite	eq
 80064ac:	4613      	moveq	r3, r2
 80064ae:	2340      	movne	r3, #64	@ 0x40
 80064b0:	4318      	orrs	r0, r3
 80064b2:	4770      	bx	lr
 80064b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006530 <ai_array_to_buffer_fmt+0xd4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d0ea      	beq.n	8006490 <ai_array_to_buffer_fmt+0x34>
 80064ba:	dd10      	ble.n	80064de <ai_array_to_buffer_fmt+0x82>
 80064bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006534 <ai_array_to_buffer_fmt+0xd8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d0e6      	beq.n	8006490 <ai_array_to_buffer_fmt+0x34>
 80064c2:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d0e2      	beq.n	8006490 <ai_array_to_buffer_fmt+0x34>
 80064ca:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 80064ce:	4293      	cmp	r3, r2
 80064d0:	bf0c      	ite	eq
 80064d2:	4613      	moveq	r3, r2
 80064d4:	2340      	movne	r3, #64	@ 0x40
 80064d6:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80064da:	4318      	orrs	r0, r3
 80064dc:	4770      	bx	lr
 80064de:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d0d4      	beq.n	8006490 <ai_array_to_buffer_fmt+0x34>
 80064e6:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d0d0      	beq.n	8006490 <ai_array_to_buffer_fmt+0x34>
 80064ee:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80064f2:	4293      	cmp	r3, r2
 80064f4:	bf0c      	ite	eq
 80064f6:	4613      	moveq	r3, r2
 80064f8:	2340      	movne	r3, #64	@ 0x40
 80064fa:	e7c9      	b.n	8006490 <ai_array_to_buffer_fmt+0x34>
 80064fc:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8006500:	4293      	cmp	r3, r2
 8006502:	d0c5      	beq.n	8006490 <ai_array_to_buffer_fmt+0x34>
 8006504:	3280      	adds	r2, #128	@ 0x80
 8006506:	4293      	cmp	r3, r2
 8006508:	bf0c      	ite	eq
 800650a:	4613      	moveq	r3, r2
 800650c:	2340      	movne	r3, #64	@ 0x40
 800650e:	e7bf      	b.n	8006490 <ai_array_to_buffer_fmt+0x34>
 8006510:	4b09      	ldr	r3, [pc, #36]	@ (8006538 <ai_array_to_buffer_fmt+0xdc>)
 8006512:	4003      	ands	r3, r0
 8006514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006518:	e7ba      	b.n	8006490 <ai_array_to_buffer_fmt+0x34>
 800651a:	bf00      	nop
 800651c:	00821040 	.word	0x00821040
 8006520:	00040840 	.word	0x00040840
 8006524:	00041040 	.word	0x00041040
 8006528:	0004084f 	.word	0x0004084f
 800652c:	00040447 	.word	0x00040447
 8006530:	00840447 	.word	0x00840447
 8006534:	0084084f 	.word	0x0084084f
 8006538:	00803fff 	.word	0x00803fff

0800653c <ai_array_get_data_byte_size>:
 800653c:	b169      	cbz	r1, 800655a <ai_array_get_data_byte_size+0x1e>
 800653e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006542:	fb01 f303 	mul.w	r3, r1, r3
 8006546:	3307      	adds	r3, #7
 8006548:	f023 0307 	bic.w	r3, r3, #7
 800654c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8006550:	fa23 f000 	lsr.w	r0, r3, r0
 8006554:	3007      	adds	r0, #7
 8006556:	08c0      	lsrs	r0, r0, #3
 8006558:	4770      	bx	lr
 800655a:	4608      	mov	r0, r1
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop

08006560 <ai_version_get>:
 8006560:	0212      	lsls	r2, r2, #8
 8006562:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006566:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800656a:	4770      	bx	lr

0800656c <get_tensor_byte_size>:
 800656c:	b410      	push	{r4}
 800656e:	6983      	ldr	r3, [r0, #24]
 8006570:	68c4      	ldr	r4, [r0, #12]
 8006572:	6941      	ldr	r1, [r0, #20]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68e0      	ldr	r0, [r4, #12]
 8006578:	4a07      	ldr	r2, [pc, #28]	@ (8006598 <get_tensor_byte_size+0x2c>)
 800657a:	68c9      	ldr	r1, [r1, #12]
 800657c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006580:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8006584:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006588:	fb01 f000 	mul.w	r0, r1, r0
 800658c:	4293      	cmp	r3, r2
 800658e:	bf04      	itt	eq
 8006590:	3007      	addeq	r0, #7
 8006592:	08c0      	lsreq	r0, r0, #3
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	000400c0 	.word	0x000400c0

0800659c <malloc>:
 800659c:	4b02      	ldr	r3, [pc, #8]	@ (80065a8 <malloc+0xc>)
 800659e:	4601      	mov	r1, r0
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	f000 b825 	b.w	80065f0 <_malloc_r>
 80065a6:	bf00      	nop
 80065a8:	200004c0 	.word	0x200004c0

080065ac <sbrk_aligned>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	4e0f      	ldr	r6, [pc, #60]	@ (80065ec <sbrk_aligned+0x40>)
 80065b0:	460c      	mov	r4, r1
 80065b2:	6831      	ldr	r1, [r6, #0]
 80065b4:	4605      	mov	r5, r0
 80065b6:	b911      	cbnz	r1, 80065be <sbrk_aligned+0x12>
 80065b8:	f000 fb2a 	bl	8006c10 <_sbrk_r>
 80065bc:	6030      	str	r0, [r6, #0]
 80065be:	4621      	mov	r1, r4
 80065c0:	4628      	mov	r0, r5
 80065c2:	f000 fb25 	bl	8006c10 <_sbrk_r>
 80065c6:	1c43      	adds	r3, r0, #1
 80065c8:	d103      	bne.n	80065d2 <sbrk_aligned+0x26>
 80065ca:	f04f 34ff 	mov.w	r4, #4294967295
 80065ce:	4620      	mov	r0, r4
 80065d0:	bd70      	pop	{r4, r5, r6, pc}
 80065d2:	1cc4      	adds	r4, r0, #3
 80065d4:	f024 0403 	bic.w	r4, r4, #3
 80065d8:	42a0      	cmp	r0, r4
 80065da:	d0f8      	beq.n	80065ce <sbrk_aligned+0x22>
 80065dc:	1a21      	subs	r1, r4, r0
 80065de:	4628      	mov	r0, r5
 80065e0:	f000 fb16 	bl	8006c10 <_sbrk_r>
 80065e4:	3001      	adds	r0, #1
 80065e6:	d1f2      	bne.n	80065ce <sbrk_aligned+0x22>
 80065e8:	e7ef      	b.n	80065ca <sbrk_aligned+0x1e>
 80065ea:	bf00      	nop
 80065ec:	2000ae38 	.word	0x2000ae38

080065f0 <_malloc_r>:
 80065f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065f4:	1ccd      	adds	r5, r1, #3
 80065f6:	f025 0503 	bic.w	r5, r5, #3
 80065fa:	3508      	adds	r5, #8
 80065fc:	2d0c      	cmp	r5, #12
 80065fe:	bf38      	it	cc
 8006600:	250c      	movcc	r5, #12
 8006602:	2d00      	cmp	r5, #0
 8006604:	4606      	mov	r6, r0
 8006606:	db01      	blt.n	800660c <_malloc_r+0x1c>
 8006608:	42a9      	cmp	r1, r5
 800660a:	d904      	bls.n	8006616 <_malloc_r+0x26>
 800660c:	230c      	movs	r3, #12
 800660e:	6033      	str	r3, [r6, #0]
 8006610:	2000      	movs	r0, #0
 8006612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006616:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066ec <_malloc_r+0xfc>
 800661a:	f000 f869 	bl	80066f0 <__malloc_lock>
 800661e:	f8d8 3000 	ldr.w	r3, [r8]
 8006622:	461c      	mov	r4, r3
 8006624:	bb44      	cbnz	r4, 8006678 <_malloc_r+0x88>
 8006626:	4629      	mov	r1, r5
 8006628:	4630      	mov	r0, r6
 800662a:	f7ff ffbf 	bl	80065ac <sbrk_aligned>
 800662e:	1c43      	adds	r3, r0, #1
 8006630:	4604      	mov	r4, r0
 8006632:	d158      	bne.n	80066e6 <_malloc_r+0xf6>
 8006634:	f8d8 4000 	ldr.w	r4, [r8]
 8006638:	4627      	mov	r7, r4
 800663a:	2f00      	cmp	r7, #0
 800663c:	d143      	bne.n	80066c6 <_malloc_r+0xd6>
 800663e:	2c00      	cmp	r4, #0
 8006640:	d04b      	beq.n	80066da <_malloc_r+0xea>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	4639      	mov	r1, r7
 8006646:	4630      	mov	r0, r6
 8006648:	eb04 0903 	add.w	r9, r4, r3
 800664c:	f000 fae0 	bl	8006c10 <_sbrk_r>
 8006650:	4581      	cmp	r9, r0
 8006652:	d142      	bne.n	80066da <_malloc_r+0xea>
 8006654:	6821      	ldr	r1, [r4, #0]
 8006656:	1a6d      	subs	r5, r5, r1
 8006658:	4629      	mov	r1, r5
 800665a:	4630      	mov	r0, r6
 800665c:	f7ff ffa6 	bl	80065ac <sbrk_aligned>
 8006660:	3001      	adds	r0, #1
 8006662:	d03a      	beq.n	80066da <_malloc_r+0xea>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	442b      	add	r3, r5
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	f8d8 3000 	ldr.w	r3, [r8]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	bb62      	cbnz	r2, 80066cc <_malloc_r+0xdc>
 8006672:	f8c8 7000 	str.w	r7, [r8]
 8006676:	e00f      	b.n	8006698 <_malloc_r+0xa8>
 8006678:	6822      	ldr	r2, [r4, #0]
 800667a:	1b52      	subs	r2, r2, r5
 800667c:	d420      	bmi.n	80066c0 <_malloc_r+0xd0>
 800667e:	2a0b      	cmp	r2, #11
 8006680:	d917      	bls.n	80066b2 <_malloc_r+0xc2>
 8006682:	1961      	adds	r1, r4, r5
 8006684:	42a3      	cmp	r3, r4
 8006686:	6025      	str	r5, [r4, #0]
 8006688:	bf18      	it	ne
 800668a:	6059      	strne	r1, [r3, #4]
 800668c:	6863      	ldr	r3, [r4, #4]
 800668e:	bf08      	it	eq
 8006690:	f8c8 1000 	streq.w	r1, [r8]
 8006694:	5162      	str	r2, [r4, r5]
 8006696:	604b      	str	r3, [r1, #4]
 8006698:	4630      	mov	r0, r6
 800669a:	f000 f82f 	bl	80066fc <__malloc_unlock>
 800669e:	f104 000b 	add.w	r0, r4, #11
 80066a2:	1d23      	adds	r3, r4, #4
 80066a4:	f020 0007 	bic.w	r0, r0, #7
 80066a8:	1ac2      	subs	r2, r0, r3
 80066aa:	bf1c      	itt	ne
 80066ac:	1a1b      	subne	r3, r3, r0
 80066ae:	50a3      	strne	r3, [r4, r2]
 80066b0:	e7af      	b.n	8006612 <_malloc_r+0x22>
 80066b2:	6862      	ldr	r2, [r4, #4]
 80066b4:	42a3      	cmp	r3, r4
 80066b6:	bf0c      	ite	eq
 80066b8:	f8c8 2000 	streq.w	r2, [r8]
 80066bc:	605a      	strne	r2, [r3, #4]
 80066be:	e7eb      	b.n	8006698 <_malloc_r+0xa8>
 80066c0:	4623      	mov	r3, r4
 80066c2:	6864      	ldr	r4, [r4, #4]
 80066c4:	e7ae      	b.n	8006624 <_malloc_r+0x34>
 80066c6:	463c      	mov	r4, r7
 80066c8:	687f      	ldr	r7, [r7, #4]
 80066ca:	e7b6      	b.n	800663a <_malloc_r+0x4a>
 80066cc:	461a      	mov	r2, r3
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	42a3      	cmp	r3, r4
 80066d2:	d1fb      	bne.n	80066cc <_malloc_r+0xdc>
 80066d4:	2300      	movs	r3, #0
 80066d6:	6053      	str	r3, [r2, #4]
 80066d8:	e7de      	b.n	8006698 <_malloc_r+0xa8>
 80066da:	230c      	movs	r3, #12
 80066dc:	6033      	str	r3, [r6, #0]
 80066de:	4630      	mov	r0, r6
 80066e0:	f000 f80c 	bl	80066fc <__malloc_unlock>
 80066e4:	e794      	b.n	8006610 <_malloc_r+0x20>
 80066e6:	6005      	str	r5, [r0, #0]
 80066e8:	e7d6      	b.n	8006698 <_malloc_r+0xa8>
 80066ea:	bf00      	nop
 80066ec:	2000ae3c 	.word	0x2000ae3c

080066f0 <__malloc_lock>:
 80066f0:	4801      	ldr	r0, [pc, #4]	@ (80066f8 <__malloc_lock+0x8>)
 80066f2:	f000 bada 	b.w	8006caa <__retarget_lock_acquire_recursive>
 80066f6:	bf00      	nop
 80066f8:	2000af80 	.word	0x2000af80

080066fc <__malloc_unlock>:
 80066fc:	4801      	ldr	r0, [pc, #4]	@ (8006704 <__malloc_unlock+0x8>)
 80066fe:	f000 bad5 	b.w	8006cac <__retarget_lock_release_recursive>
 8006702:	bf00      	nop
 8006704:	2000af80 	.word	0x2000af80

08006708 <rand>:
 8006708:	4b16      	ldr	r3, [pc, #88]	@ (8006764 <rand+0x5c>)
 800670a:	b510      	push	{r4, lr}
 800670c:	681c      	ldr	r4, [r3, #0]
 800670e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006710:	b9b3      	cbnz	r3, 8006740 <rand+0x38>
 8006712:	2018      	movs	r0, #24
 8006714:	f7ff ff42 	bl	800659c <malloc>
 8006718:	4602      	mov	r2, r0
 800671a:	6320      	str	r0, [r4, #48]	@ 0x30
 800671c:	b920      	cbnz	r0, 8006728 <rand+0x20>
 800671e:	4b12      	ldr	r3, [pc, #72]	@ (8006768 <rand+0x60>)
 8006720:	4812      	ldr	r0, [pc, #72]	@ (800676c <rand+0x64>)
 8006722:	2152      	movs	r1, #82	@ 0x52
 8006724:	f000 fac4 	bl	8006cb0 <__assert_func>
 8006728:	4911      	ldr	r1, [pc, #68]	@ (8006770 <rand+0x68>)
 800672a:	4b12      	ldr	r3, [pc, #72]	@ (8006774 <rand+0x6c>)
 800672c:	e9c0 1300 	strd	r1, r3, [r0]
 8006730:	4b11      	ldr	r3, [pc, #68]	@ (8006778 <rand+0x70>)
 8006732:	6083      	str	r3, [r0, #8]
 8006734:	230b      	movs	r3, #11
 8006736:	8183      	strh	r3, [r0, #12]
 8006738:	2100      	movs	r1, #0
 800673a:	2001      	movs	r0, #1
 800673c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006740:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006742:	480e      	ldr	r0, [pc, #56]	@ (800677c <rand+0x74>)
 8006744:	690b      	ldr	r3, [r1, #16]
 8006746:	694c      	ldr	r4, [r1, #20]
 8006748:	4a0d      	ldr	r2, [pc, #52]	@ (8006780 <rand+0x78>)
 800674a:	4358      	muls	r0, r3
 800674c:	fb02 0004 	mla	r0, r2, r4, r0
 8006750:	fba3 3202 	umull	r3, r2, r3, r2
 8006754:	3301      	adds	r3, #1
 8006756:	eb40 0002 	adc.w	r0, r0, r2
 800675a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800675e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006762:	bd10      	pop	{r4, pc}
 8006764:	200004c0 	.word	0x200004c0
 8006768:	0800b4d0 	.word	0x0800b4d0
 800676c:	0800b4e7 	.word	0x0800b4e7
 8006770:	abcd330e 	.word	0xabcd330e
 8006774:	e66d1234 	.word	0xe66d1234
 8006778:	0005deec 	.word	0x0005deec
 800677c:	5851f42d 	.word	0x5851f42d
 8006780:	4c957f2d 	.word	0x4c957f2d

08006784 <std>:
 8006784:	2300      	movs	r3, #0
 8006786:	b510      	push	{r4, lr}
 8006788:	4604      	mov	r4, r0
 800678a:	e9c0 3300 	strd	r3, r3, [r0]
 800678e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006792:	6083      	str	r3, [r0, #8]
 8006794:	8181      	strh	r1, [r0, #12]
 8006796:	6643      	str	r3, [r0, #100]	@ 0x64
 8006798:	81c2      	strh	r2, [r0, #14]
 800679a:	6183      	str	r3, [r0, #24]
 800679c:	4619      	mov	r1, r3
 800679e:	2208      	movs	r2, #8
 80067a0:	305c      	adds	r0, #92	@ 0x5c
 80067a2:	f000 f9f9 	bl	8006b98 <memset>
 80067a6:	4b0d      	ldr	r3, [pc, #52]	@ (80067dc <std+0x58>)
 80067a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80067aa:	4b0d      	ldr	r3, [pc, #52]	@ (80067e0 <std+0x5c>)
 80067ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067ae:	4b0d      	ldr	r3, [pc, #52]	@ (80067e4 <std+0x60>)
 80067b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067b2:	4b0d      	ldr	r3, [pc, #52]	@ (80067e8 <std+0x64>)
 80067b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80067b6:	4b0d      	ldr	r3, [pc, #52]	@ (80067ec <std+0x68>)
 80067b8:	6224      	str	r4, [r4, #32]
 80067ba:	429c      	cmp	r4, r3
 80067bc:	d006      	beq.n	80067cc <std+0x48>
 80067be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067c2:	4294      	cmp	r4, r2
 80067c4:	d002      	beq.n	80067cc <std+0x48>
 80067c6:	33d0      	adds	r3, #208	@ 0xd0
 80067c8:	429c      	cmp	r4, r3
 80067ca:	d105      	bne.n	80067d8 <std+0x54>
 80067cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d4:	f000 ba68 	b.w	8006ca8 <__retarget_lock_init_recursive>
 80067d8:	bd10      	pop	{r4, pc}
 80067da:	bf00      	nop
 80067dc:	080069e9 	.word	0x080069e9
 80067e0:	08006a0b 	.word	0x08006a0b
 80067e4:	08006a43 	.word	0x08006a43
 80067e8:	08006a67 	.word	0x08006a67
 80067ec:	2000ae40 	.word	0x2000ae40

080067f0 <stdio_exit_handler>:
 80067f0:	4a02      	ldr	r2, [pc, #8]	@ (80067fc <stdio_exit_handler+0xc>)
 80067f2:	4903      	ldr	r1, [pc, #12]	@ (8006800 <stdio_exit_handler+0x10>)
 80067f4:	4803      	ldr	r0, [pc, #12]	@ (8006804 <stdio_exit_handler+0x14>)
 80067f6:	f000 b869 	b.w	80068cc <_fwalk_sglue>
 80067fa:	bf00      	nop
 80067fc:	200004b4 	.word	0x200004b4
 8006800:	08007429 	.word	0x08007429
 8006804:	200004c4 	.word	0x200004c4

08006808 <cleanup_stdio>:
 8006808:	6841      	ldr	r1, [r0, #4]
 800680a:	4b0c      	ldr	r3, [pc, #48]	@ (800683c <cleanup_stdio+0x34>)
 800680c:	4299      	cmp	r1, r3
 800680e:	b510      	push	{r4, lr}
 8006810:	4604      	mov	r4, r0
 8006812:	d001      	beq.n	8006818 <cleanup_stdio+0x10>
 8006814:	f000 fe08 	bl	8007428 <_fflush_r>
 8006818:	68a1      	ldr	r1, [r4, #8]
 800681a:	4b09      	ldr	r3, [pc, #36]	@ (8006840 <cleanup_stdio+0x38>)
 800681c:	4299      	cmp	r1, r3
 800681e:	d002      	beq.n	8006826 <cleanup_stdio+0x1e>
 8006820:	4620      	mov	r0, r4
 8006822:	f000 fe01 	bl	8007428 <_fflush_r>
 8006826:	68e1      	ldr	r1, [r4, #12]
 8006828:	4b06      	ldr	r3, [pc, #24]	@ (8006844 <cleanup_stdio+0x3c>)
 800682a:	4299      	cmp	r1, r3
 800682c:	d004      	beq.n	8006838 <cleanup_stdio+0x30>
 800682e:	4620      	mov	r0, r4
 8006830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006834:	f000 bdf8 	b.w	8007428 <_fflush_r>
 8006838:	bd10      	pop	{r4, pc}
 800683a:	bf00      	nop
 800683c:	2000ae40 	.word	0x2000ae40
 8006840:	2000aea8 	.word	0x2000aea8
 8006844:	2000af10 	.word	0x2000af10

08006848 <global_stdio_init.part.0>:
 8006848:	b510      	push	{r4, lr}
 800684a:	4b0b      	ldr	r3, [pc, #44]	@ (8006878 <global_stdio_init.part.0+0x30>)
 800684c:	4c0b      	ldr	r4, [pc, #44]	@ (800687c <global_stdio_init.part.0+0x34>)
 800684e:	4a0c      	ldr	r2, [pc, #48]	@ (8006880 <global_stdio_init.part.0+0x38>)
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	4620      	mov	r0, r4
 8006854:	2200      	movs	r2, #0
 8006856:	2104      	movs	r1, #4
 8006858:	f7ff ff94 	bl	8006784 <std>
 800685c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006860:	2201      	movs	r2, #1
 8006862:	2109      	movs	r1, #9
 8006864:	f7ff ff8e 	bl	8006784 <std>
 8006868:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800686c:	2202      	movs	r2, #2
 800686e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006872:	2112      	movs	r1, #18
 8006874:	f7ff bf86 	b.w	8006784 <std>
 8006878:	2000af78 	.word	0x2000af78
 800687c:	2000ae40 	.word	0x2000ae40
 8006880:	080067f1 	.word	0x080067f1

08006884 <__sfp_lock_acquire>:
 8006884:	4801      	ldr	r0, [pc, #4]	@ (800688c <__sfp_lock_acquire+0x8>)
 8006886:	f000 ba10 	b.w	8006caa <__retarget_lock_acquire_recursive>
 800688a:	bf00      	nop
 800688c:	2000af81 	.word	0x2000af81

08006890 <__sfp_lock_release>:
 8006890:	4801      	ldr	r0, [pc, #4]	@ (8006898 <__sfp_lock_release+0x8>)
 8006892:	f000 ba0b 	b.w	8006cac <__retarget_lock_release_recursive>
 8006896:	bf00      	nop
 8006898:	2000af81 	.word	0x2000af81

0800689c <__sinit>:
 800689c:	b510      	push	{r4, lr}
 800689e:	4604      	mov	r4, r0
 80068a0:	f7ff fff0 	bl	8006884 <__sfp_lock_acquire>
 80068a4:	6a23      	ldr	r3, [r4, #32]
 80068a6:	b11b      	cbz	r3, 80068b0 <__sinit+0x14>
 80068a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ac:	f7ff bff0 	b.w	8006890 <__sfp_lock_release>
 80068b0:	4b04      	ldr	r3, [pc, #16]	@ (80068c4 <__sinit+0x28>)
 80068b2:	6223      	str	r3, [r4, #32]
 80068b4:	4b04      	ldr	r3, [pc, #16]	@ (80068c8 <__sinit+0x2c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1f5      	bne.n	80068a8 <__sinit+0xc>
 80068bc:	f7ff ffc4 	bl	8006848 <global_stdio_init.part.0>
 80068c0:	e7f2      	b.n	80068a8 <__sinit+0xc>
 80068c2:	bf00      	nop
 80068c4:	08006809 	.word	0x08006809
 80068c8:	2000af78 	.word	0x2000af78

080068cc <_fwalk_sglue>:
 80068cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d0:	4607      	mov	r7, r0
 80068d2:	4688      	mov	r8, r1
 80068d4:	4614      	mov	r4, r2
 80068d6:	2600      	movs	r6, #0
 80068d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068dc:	f1b9 0901 	subs.w	r9, r9, #1
 80068e0:	d505      	bpl.n	80068ee <_fwalk_sglue+0x22>
 80068e2:	6824      	ldr	r4, [r4, #0]
 80068e4:	2c00      	cmp	r4, #0
 80068e6:	d1f7      	bne.n	80068d8 <_fwalk_sglue+0xc>
 80068e8:	4630      	mov	r0, r6
 80068ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ee:	89ab      	ldrh	r3, [r5, #12]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d907      	bls.n	8006904 <_fwalk_sglue+0x38>
 80068f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068f8:	3301      	adds	r3, #1
 80068fa:	d003      	beq.n	8006904 <_fwalk_sglue+0x38>
 80068fc:	4629      	mov	r1, r5
 80068fe:	4638      	mov	r0, r7
 8006900:	47c0      	blx	r8
 8006902:	4306      	orrs	r6, r0
 8006904:	3568      	adds	r5, #104	@ 0x68
 8006906:	e7e9      	b.n	80068dc <_fwalk_sglue+0x10>

08006908 <iprintf>:
 8006908:	b40f      	push	{r0, r1, r2, r3}
 800690a:	b507      	push	{r0, r1, r2, lr}
 800690c:	4906      	ldr	r1, [pc, #24]	@ (8006928 <iprintf+0x20>)
 800690e:	ab04      	add	r3, sp, #16
 8006910:	6808      	ldr	r0, [r1, #0]
 8006912:	f853 2b04 	ldr.w	r2, [r3], #4
 8006916:	6881      	ldr	r1, [r0, #8]
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	f000 fa5b 	bl	8006dd4 <_vfiprintf_r>
 800691e:	b003      	add	sp, #12
 8006920:	f85d eb04 	ldr.w	lr, [sp], #4
 8006924:	b004      	add	sp, #16
 8006926:	4770      	bx	lr
 8006928:	200004c0 	.word	0x200004c0

0800692c <_puts_r>:
 800692c:	6a03      	ldr	r3, [r0, #32]
 800692e:	b570      	push	{r4, r5, r6, lr}
 8006930:	6884      	ldr	r4, [r0, #8]
 8006932:	4605      	mov	r5, r0
 8006934:	460e      	mov	r6, r1
 8006936:	b90b      	cbnz	r3, 800693c <_puts_r+0x10>
 8006938:	f7ff ffb0 	bl	800689c <__sinit>
 800693c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800693e:	07db      	lsls	r3, r3, #31
 8006940:	d405      	bmi.n	800694e <_puts_r+0x22>
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	0598      	lsls	r0, r3, #22
 8006946:	d402      	bmi.n	800694e <_puts_r+0x22>
 8006948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800694a:	f000 f9ae 	bl	8006caa <__retarget_lock_acquire_recursive>
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	0719      	lsls	r1, r3, #28
 8006952:	d502      	bpl.n	800695a <_puts_r+0x2e>
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d135      	bne.n	80069c6 <_puts_r+0x9a>
 800695a:	4621      	mov	r1, r4
 800695c:	4628      	mov	r0, r5
 800695e:	f000 f8c5 	bl	8006aec <__swsetup_r>
 8006962:	b380      	cbz	r0, 80069c6 <_puts_r+0x9a>
 8006964:	f04f 35ff 	mov.w	r5, #4294967295
 8006968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800696a:	07da      	lsls	r2, r3, #31
 800696c:	d405      	bmi.n	800697a <_puts_r+0x4e>
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	059b      	lsls	r3, r3, #22
 8006972:	d402      	bmi.n	800697a <_puts_r+0x4e>
 8006974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006976:	f000 f999 	bl	8006cac <__retarget_lock_release_recursive>
 800697a:	4628      	mov	r0, r5
 800697c:	bd70      	pop	{r4, r5, r6, pc}
 800697e:	2b00      	cmp	r3, #0
 8006980:	da04      	bge.n	800698c <_puts_r+0x60>
 8006982:	69a2      	ldr	r2, [r4, #24]
 8006984:	429a      	cmp	r2, r3
 8006986:	dc17      	bgt.n	80069b8 <_puts_r+0x8c>
 8006988:	290a      	cmp	r1, #10
 800698a:	d015      	beq.n	80069b8 <_puts_r+0x8c>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	6022      	str	r2, [r4, #0]
 8006992:	7019      	strb	r1, [r3, #0]
 8006994:	68a3      	ldr	r3, [r4, #8]
 8006996:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800699a:	3b01      	subs	r3, #1
 800699c:	60a3      	str	r3, [r4, #8]
 800699e:	2900      	cmp	r1, #0
 80069a0:	d1ed      	bne.n	800697e <_puts_r+0x52>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	da11      	bge.n	80069ca <_puts_r+0x9e>
 80069a6:	4622      	mov	r2, r4
 80069a8:	210a      	movs	r1, #10
 80069aa:	4628      	mov	r0, r5
 80069ac:	f000 f85f 	bl	8006a6e <__swbuf_r>
 80069b0:	3001      	adds	r0, #1
 80069b2:	d0d7      	beq.n	8006964 <_puts_r+0x38>
 80069b4:	250a      	movs	r5, #10
 80069b6:	e7d7      	b.n	8006968 <_puts_r+0x3c>
 80069b8:	4622      	mov	r2, r4
 80069ba:	4628      	mov	r0, r5
 80069bc:	f000 f857 	bl	8006a6e <__swbuf_r>
 80069c0:	3001      	adds	r0, #1
 80069c2:	d1e7      	bne.n	8006994 <_puts_r+0x68>
 80069c4:	e7ce      	b.n	8006964 <_puts_r+0x38>
 80069c6:	3e01      	subs	r6, #1
 80069c8:	e7e4      	b.n	8006994 <_puts_r+0x68>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	6022      	str	r2, [r4, #0]
 80069d0:	220a      	movs	r2, #10
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	e7ee      	b.n	80069b4 <_puts_r+0x88>
	...

080069d8 <puts>:
 80069d8:	4b02      	ldr	r3, [pc, #8]	@ (80069e4 <puts+0xc>)
 80069da:	4601      	mov	r1, r0
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	f7ff bfa5 	b.w	800692c <_puts_r>
 80069e2:	bf00      	nop
 80069e4:	200004c0 	.word	0x200004c0

080069e8 <__sread>:
 80069e8:	b510      	push	{r4, lr}
 80069ea:	460c      	mov	r4, r1
 80069ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f0:	f000 f8fc 	bl	8006bec <_read_r>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	bfab      	itete	ge
 80069f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069fa:	89a3      	ldrhlt	r3, [r4, #12]
 80069fc:	181b      	addge	r3, r3, r0
 80069fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a02:	bfac      	ite	ge
 8006a04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a06:	81a3      	strhlt	r3, [r4, #12]
 8006a08:	bd10      	pop	{r4, pc}

08006a0a <__swrite>:
 8006a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0e:	461f      	mov	r7, r3
 8006a10:	898b      	ldrh	r3, [r1, #12]
 8006a12:	05db      	lsls	r3, r3, #23
 8006a14:	4605      	mov	r5, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	4616      	mov	r6, r2
 8006a1a:	d505      	bpl.n	8006a28 <__swrite+0x1e>
 8006a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a20:	2302      	movs	r3, #2
 8006a22:	2200      	movs	r2, #0
 8006a24:	f000 f8d0 	bl	8006bc8 <_lseek_r>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a32:	81a3      	strh	r3, [r4, #12]
 8006a34:	4632      	mov	r2, r6
 8006a36:	463b      	mov	r3, r7
 8006a38:	4628      	mov	r0, r5
 8006a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3e:	f000 b8f7 	b.w	8006c30 <_write_r>

08006a42 <__sseek>:
 8006a42:	b510      	push	{r4, lr}
 8006a44:	460c      	mov	r4, r1
 8006a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a4a:	f000 f8bd 	bl	8006bc8 <_lseek_r>
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	bf15      	itete	ne
 8006a54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a5e:	81a3      	strheq	r3, [r4, #12]
 8006a60:	bf18      	it	ne
 8006a62:	81a3      	strhne	r3, [r4, #12]
 8006a64:	bd10      	pop	{r4, pc}

08006a66 <__sclose>:
 8006a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a6a:	f000 b89d 	b.w	8006ba8 <_close_r>

08006a6e <__swbuf_r>:
 8006a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a70:	460e      	mov	r6, r1
 8006a72:	4614      	mov	r4, r2
 8006a74:	4605      	mov	r5, r0
 8006a76:	b118      	cbz	r0, 8006a80 <__swbuf_r+0x12>
 8006a78:	6a03      	ldr	r3, [r0, #32]
 8006a7a:	b90b      	cbnz	r3, 8006a80 <__swbuf_r+0x12>
 8006a7c:	f7ff ff0e 	bl	800689c <__sinit>
 8006a80:	69a3      	ldr	r3, [r4, #24]
 8006a82:	60a3      	str	r3, [r4, #8]
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	071a      	lsls	r2, r3, #28
 8006a88:	d501      	bpl.n	8006a8e <__swbuf_r+0x20>
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	b943      	cbnz	r3, 8006aa0 <__swbuf_r+0x32>
 8006a8e:	4621      	mov	r1, r4
 8006a90:	4628      	mov	r0, r5
 8006a92:	f000 f82b 	bl	8006aec <__swsetup_r>
 8006a96:	b118      	cbz	r0, 8006aa0 <__swbuf_r+0x32>
 8006a98:	f04f 37ff 	mov.w	r7, #4294967295
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	6922      	ldr	r2, [r4, #16]
 8006aa4:	1a98      	subs	r0, r3, r2
 8006aa6:	6963      	ldr	r3, [r4, #20]
 8006aa8:	b2f6      	uxtb	r6, r6
 8006aaa:	4283      	cmp	r3, r0
 8006aac:	4637      	mov	r7, r6
 8006aae:	dc05      	bgt.n	8006abc <__swbuf_r+0x4e>
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f000 fcb8 	bl	8007428 <_fflush_r>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d1ed      	bne.n	8006a98 <__swbuf_r+0x2a>
 8006abc:	68a3      	ldr	r3, [r4, #8]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	60a3      	str	r3, [r4, #8]
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	6022      	str	r2, [r4, #0]
 8006ac8:	701e      	strb	r6, [r3, #0]
 8006aca:	6962      	ldr	r2, [r4, #20]
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d004      	beq.n	8006adc <__swbuf_r+0x6e>
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	07db      	lsls	r3, r3, #31
 8006ad6:	d5e1      	bpl.n	8006a9c <__swbuf_r+0x2e>
 8006ad8:	2e0a      	cmp	r6, #10
 8006ada:	d1df      	bne.n	8006a9c <__swbuf_r+0x2e>
 8006adc:	4621      	mov	r1, r4
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f000 fca2 	bl	8007428 <_fflush_r>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d0d9      	beq.n	8006a9c <__swbuf_r+0x2e>
 8006ae8:	e7d6      	b.n	8006a98 <__swbuf_r+0x2a>
	...

08006aec <__swsetup_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4b29      	ldr	r3, [pc, #164]	@ (8006b94 <__swsetup_r+0xa8>)
 8006af0:	4605      	mov	r5, r0
 8006af2:	6818      	ldr	r0, [r3, #0]
 8006af4:	460c      	mov	r4, r1
 8006af6:	b118      	cbz	r0, 8006b00 <__swsetup_r+0x14>
 8006af8:	6a03      	ldr	r3, [r0, #32]
 8006afa:	b90b      	cbnz	r3, 8006b00 <__swsetup_r+0x14>
 8006afc:	f7ff fece 	bl	800689c <__sinit>
 8006b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b04:	0719      	lsls	r1, r3, #28
 8006b06:	d422      	bmi.n	8006b4e <__swsetup_r+0x62>
 8006b08:	06da      	lsls	r2, r3, #27
 8006b0a:	d407      	bmi.n	8006b1c <__swsetup_r+0x30>
 8006b0c:	2209      	movs	r2, #9
 8006b0e:	602a      	str	r2, [r5, #0]
 8006b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1a:	e033      	b.n	8006b84 <__swsetup_r+0x98>
 8006b1c:	0758      	lsls	r0, r3, #29
 8006b1e:	d512      	bpl.n	8006b46 <__swsetup_r+0x5a>
 8006b20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b22:	b141      	cbz	r1, 8006b36 <__swsetup_r+0x4a>
 8006b24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b28:	4299      	cmp	r1, r3
 8006b2a:	d002      	beq.n	8006b32 <__swsetup_r+0x46>
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	f000 f8dd 	bl	8006cec <_free_r>
 8006b32:	2300      	movs	r3, #0
 8006b34:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b3c:	81a3      	strh	r3, [r4, #12]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	6063      	str	r3, [r4, #4]
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	f043 0308 	orr.w	r3, r3, #8
 8006b4c:	81a3      	strh	r3, [r4, #12]
 8006b4e:	6923      	ldr	r3, [r4, #16]
 8006b50:	b94b      	cbnz	r3, 8006b66 <__swsetup_r+0x7a>
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b5c:	d003      	beq.n	8006b66 <__swsetup_r+0x7a>
 8006b5e:	4621      	mov	r1, r4
 8006b60:	4628      	mov	r0, r5
 8006b62:	f000 fcc1 	bl	80074e8 <__smakebuf_r>
 8006b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b6a:	f013 0201 	ands.w	r2, r3, #1
 8006b6e:	d00a      	beq.n	8006b86 <__swsetup_r+0x9a>
 8006b70:	2200      	movs	r2, #0
 8006b72:	60a2      	str	r2, [r4, #8]
 8006b74:	6962      	ldr	r2, [r4, #20]
 8006b76:	4252      	negs	r2, r2
 8006b78:	61a2      	str	r2, [r4, #24]
 8006b7a:	6922      	ldr	r2, [r4, #16]
 8006b7c:	b942      	cbnz	r2, 8006b90 <__swsetup_r+0xa4>
 8006b7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b82:	d1c5      	bne.n	8006b10 <__swsetup_r+0x24>
 8006b84:	bd38      	pop	{r3, r4, r5, pc}
 8006b86:	0799      	lsls	r1, r3, #30
 8006b88:	bf58      	it	pl
 8006b8a:	6962      	ldrpl	r2, [r4, #20]
 8006b8c:	60a2      	str	r2, [r4, #8]
 8006b8e:	e7f4      	b.n	8006b7a <__swsetup_r+0x8e>
 8006b90:	2000      	movs	r0, #0
 8006b92:	e7f7      	b.n	8006b84 <__swsetup_r+0x98>
 8006b94:	200004c0 	.word	0x200004c0

08006b98 <memset>:
 8006b98:	4402      	add	r2, r0
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d100      	bne.n	8006ba2 <memset+0xa>
 8006ba0:	4770      	bx	lr
 8006ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ba6:	e7f9      	b.n	8006b9c <memset+0x4>

08006ba8 <_close_r>:
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4d06      	ldr	r5, [pc, #24]	@ (8006bc4 <_close_r+0x1c>)
 8006bac:	2300      	movs	r3, #0
 8006bae:	4604      	mov	r4, r0
 8006bb0:	4608      	mov	r0, r1
 8006bb2:	602b      	str	r3, [r5, #0]
 8006bb4:	f000 fd42 	bl	800763c <_close>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	d102      	bne.n	8006bc2 <_close_r+0x1a>
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	b103      	cbz	r3, 8006bc2 <_close_r+0x1a>
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	2000af7c 	.word	0x2000af7c

08006bc8 <_lseek_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d07      	ldr	r5, [pc, #28]	@ (8006be8 <_lseek_r+0x20>)
 8006bcc:	4604      	mov	r4, r0
 8006bce:	4608      	mov	r0, r1
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	602a      	str	r2, [r5, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f000 fd58 	bl	800768c <_lseek>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d102      	bne.n	8006be6 <_lseek_r+0x1e>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	b103      	cbz	r3, 8006be6 <_lseek_r+0x1e>
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	bd38      	pop	{r3, r4, r5, pc}
 8006be8:	2000af7c 	.word	0x2000af7c

08006bec <_read_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4d07      	ldr	r5, [pc, #28]	@ (8006c0c <_read_r+0x20>)
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	4608      	mov	r0, r1
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	602a      	str	r2, [r5, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f000 fd4e 	bl	800769c <_read>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d102      	bne.n	8006c0a <_read_r+0x1e>
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	b103      	cbz	r3, 8006c0a <_read_r+0x1e>
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	2000af7c 	.word	0x2000af7c

08006c10 <_sbrk_r>:
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	4d06      	ldr	r5, [pc, #24]	@ (8006c2c <_sbrk_r+0x1c>)
 8006c14:	2300      	movs	r3, #0
 8006c16:	4604      	mov	r4, r0
 8006c18:	4608      	mov	r0, r1
 8006c1a:	602b      	str	r3, [r5, #0]
 8006c1c:	f7fa fb48 	bl	80012b0 <_sbrk>
 8006c20:	1c43      	adds	r3, r0, #1
 8006c22:	d102      	bne.n	8006c2a <_sbrk_r+0x1a>
 8006c24:	682b      	ldr	r3, [r5, #0]
 8006c26:	b103      	cbz	r3, 8006c2a <_sbrk_r+0x1a>
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	bd38      	pop	{r3, r4, r5, pc}
 8006c2c:	2000af7c 	.word	0x2000af7c

08006c30 <_write_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	4d07      	ldr	r5, [pc, #28]	@ (8006c50 <_write_r+0x20>)
 8006c34:	4604      	mov	r4, r0
 8006c36:	4608      	mov	r0, r1
 8006c38:	4611      	mov	r1, r2
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	602a      	str	r2, [r5, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f000 fd34 	bl	80076ac <_write>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d102      	bne.n	8006c4e <_write_r+0x1e>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	b103      	cbz	r3, 8006c4e <_write_r+0x1e>
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	2000af7c 	.word	0x2000af7c

08006c54 <__errno>:
 8006c54:	4b01      	ldr	r3, [pc, #4]	@ (8006c5c <__errno+0x8>)
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	200004c0 	.word	0x200004c0

08006c60 <__libc_init_array>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	4d0d      	ldr	r5, [pc, #52]	@ (8006c98 <__libc_init_array+0x38>)
 8006c64:	4c0d      	ldr	r4, [pc, #52]	@ (8006c9c <__libc_init_array+0x3c>)
 8006c66:	1b64      	subs	r4, r4, r5
 8006c68:	10a4      	asrs	r4, r4, #2
 8006c6a:	2600      	movs	r6, #0
 8006c6c:	42a6      	cmp	r6, r4
 8006c6e:	d109      	bne.n	8006c84 <__libc_init_array+0x24>
 8006c70:	4d0b      	ldr	r5, [pc, #44]	@ (8006ca0 <__libc_init_array+0x40>)
 8006c72:	4c0c      	ldr	r4, [pc, #48]	@ (8006ca4 <__libc_init_array+0x44>)
 8006c74:	f000 fd24 	bl	80076c0 <_init>
 8006c78:	1b64      	subs	r4, r4, r5
 8006c7a:	10a4      	asrs	r4, r4, #2
 8006c7c:	2600      	movs	r6, #0
 8006c7e:	42a6      	cmp	r6, r4
 8006c80:	d105      	bne.n	8006c8e <__libc_init_array+0x2e>
 8006c82:	bd70      	pop	{r4, r5, r6, pc}
 8006c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c88:	4798      	blx	r3
 8006c8a:	3601      	adds	r6, #1
 8006c8c:	e7ee      	b.n	8006c6c <__libc_init_array+0xc>
 8006c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c92:	4798      	blx	r3
 8006c94:	3601      	adds	r6, #1
 8006c96:	e7f2      	b.n	8006c7e <__libc_init_array+0x1e>
 8006c98:	0800b5b8 	.word	0x0800b5b8
 8006c9c:	0800b5b8 	.word	0x0800b5b8
 8006ca0:	0800b5b8 	.word	0x0800b5b8
 8006ca4:	0800b5bc 	.word	0x0800b5bc

08006ca8 <__retarget_lock_init_recursive>:
 8006ca8:	4770      	bx	lr

08006caa <__retarget_lock_acquire_recursive>:
 8006caa:	4770      	bx	lr

08006cac <__retarget_lock_release_recursive>:
 8006cac:	4770      	bx	lr
	...

08006cb0 <__assert_func>:
 8006cb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cb2:	4614      	mov	r4, r2
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	4b09      	ldr	r3, [pc, #36]	@ (8006cdc <__assert_func+0x2c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4605      	mov	r5, r0
 8006cbc:	68d8      	ldr	r0, [r3, #12]
 8006cbe:	b954      	cbnz	r4, 8006cd6 <__assert_func+0x26>
 8006cc0:	4b07      	ldr	r3, [pc, #28]	@ (8006ce0 <__assert_func+0x30>)
 8006cc2:	461c      	mov	r4, r3
 8006cc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cc8:	9100      	str	r1, [sp, #0]
 8006cca:	462b      	mov	r3, r5
 8006ccc:	4905      	ldr	r1, [pc, #20]	@ (8006ce4 <__assert_func+0x34>)
 8006cce:	f000 fbd3 	bl	8007478 <fiprintf>
 8006cd2:	f000 fc67 	bl	80075a4 <abort>
 8006cd6:	4b04      	ldr	r3, [pc, #16]	@ (8006ce8 <__assert_func+0x38>)
 8006cd8:	e7f4      	b.n	8006cc4 <__assert_func+0x14>
 8006cda:	bf00      	nop
 8006cdc:	200004c0 	.word	0x200004c0
 8006ce0:	0800b57a 	.word	0x0800b57a
 8006ce4:	0800b54c 	.word	0x0800b54c
 8006ce8:	0800b53f 	.word	0x0800b53f

08006cec <_free_r>:
 8006cec:	b538      	push	{r3, r4, r5, lr}
 8006cee:	4605      	mov	r5, r0
 8006cf0:	2900      	cmp	r1, #0
 8006cf2:	d041      	beq.n	8006d78 <_free_r+0x8c>
 8006cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cf8:	1f0c      	subs	r4, r1, #4
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	bfb8      	it	lt
 8006cfe:	18e4      	addlt	r4, r4, r3
 8006d00:	f7ff fcf6 	bl	80066f0 <__malloc_lock>
 8006d04:	4a1d      	ldr	r2, [pc, #116]	@ (8006d7c <_free_r+0x90>)
 8006d06:	6813      	ldr	r3, [r2, #0]
 8006d08:	b933      	cbnz	r3, 8006d18 <_free_r+0x2c>
 8006d0a:	6063      	str	r3, [r4, #4]
 8006d0c:	6014      	str	r4, [r2, #0]
 8006d0e:	4628      	mov	r0, r5
 8006d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d14:	f7ff bcf2 	b.w	80066fc <__malloc_unlock>
 8006d18:	42a3      	cmp	r3, r4
 8006d1a:	d908      	bls.n	8006d2e <_free_r+0x42>
 8006d1c:	6820      	ldr	r0, [r4, #0]
 8006d1e:	1821      	adds	r1, r4, r0
 8006d20:	428b      	cmp	r3, r1
 8006d22:	bf01      	itttt	eq
 8006d24:	6819      	ldreq	r1, [r3, #0]
 8006d26:	685b      	ldreq	r3, [r3, #4]
 8006d28:	1809      	addeq	r1, r1, r0
 8006d2a:	6021      	streq	r1, [r4, #0]
 8006d2c:	e7ed      	b.n	8006d0a <_free_r+0x1e>
 8006d2e:	461a      	mov	r2, r3
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	b10b      	cbz	r3, 8006d38 <_free_r+0x4c>
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	d9fa      	bls.n	8006d2e <_free_r+0x42>
 8006d38:	6811      	ldr	r1, [r2, #0]
 8006d3a:	1850      	adds	r0, r2, r1
 8006d3c:	42a0      	cmp	r0, r4
 8006d3e:	d10b      	bne.n	8006d58 <_free_r+0x6c>
 8006d40:	6820      	ldr	r0, [r4, #0]
 8006d42:	4401      	add	r1, r0
 8006d44:	1850      	adds	r0, r2, r1
 8006d46:	4283      	cmp	r3, r0
 8006d48:	6011      	str	r1, [r2, #0]
 8006d4a:	d1e0      	bne.n	8006d0e <_free_r+0x22>
 8006d4c:	6818      	ldr	r0, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	6053      	str	r3, [r2, #4]
 8006d52:	4408      	add	r0, r1
 8006d54:	6010      	str	r0, [r2, #0]
 8006d56:	e7da      	b.n	8006d0e <_free_r+0x22>
 8006d58:	d902      	bls.n	8006d60 <_free_r+0x74>
 8006d5a:	230c      	movs	r3, #12
 8006d5c:	602b      	str	r3, [r5, #0]
 8006d5e:	e7d6      	b.n	8006d0e <_free_r+0x22>
 8006d60:	6820      	ldr	r0, [r4, #0]
 8006d62:	1821      	adds	r1, r4, r0
 8006d64:	428b      	cmp	r3, r1
 8006d66:	bf04      	itt	eq
 8006d68:	6819      	ldreq	r1, [r3, #0]
 8006d6a:	685b      	ldreq	r3, [r3, #4]
 8006d6c:	6063      	str	r3, [r4, #4]
 8006d6e:	bf04      	itt	eq
 8006d70:	1809      	addeq	r1, r1, r0
 8006d72:	6021      	streq	r1, [r4, #0]
 8006d74:	6054      	str	r4, [r2, #4]
 8006d76:	e7ca      	b.n	8006d0e <_free_r+0x22>
 8006d78:	bd38      	pop	{r3, r4, r5, pc}
 8006d7a:	bf00      	nop
 8006d7c:	2000ae3c 	.word	0x2000ae3c

08006d80 <__sfputc_r>:
 8006d80:	6893      	ldr	r3, [r2, #8]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	b410      	push	{r4}
 8006d88:	6093      	str	r3, [r2, #8]
 8006d8a:	da08      	bge.n	8006d9e <__sfputc_r+0x1e>
 8006d8c:	6994      	ldr	r4, [r2, #24]
 8006d8e:	42a3      	cmp	r3, r4
 8006d90:	db01      	blt.n	8006d96 <__sfputc_r+0x16>
 8006d92:	290a      	cmp	r1, #10
 8006d94:	d103      	bne.n	8006d9e <__sfputc_r+0x1e>
 8006d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d9a:	f7ff be68 	b.w	8006a6e <__swbuf_r>
 8006d9e:	6813      	ldr	r3, [r2, #0]
 8006da0:	1c58      	adds	r0, r3, #1
 8006da2:	6010      	str	r0, [r2, #0]
 8006da4:	7019      	strb	r1, [r3, #0]
 8006da6:	4608      	mov	r0, r1
 8006da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <__sfputs_r>:
 8006dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db0:	4606      	mov	r6, r0
 8006db2:	460f      	mov	r7, r1
 8006db4:	4614      	mov	r4, r2
 8006db6:	18d5      	adds	r5, r2, r3
 8006db8:	42ac      	cmp	r4, r5
 8006dba:	d101      	bne.n	8006dc0 <__sfputs_r+0x12>
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	e007      	b.n	8006dd0 <__sfputs_r+0x22>
 8006dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc4:	463a      	mov	r2, r7
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f7ff ffda 	bl	8006d80 <__sfputc_r>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d1f3      	bne.n	8006db8 <__sfputs_r+0xa>
 8006dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006dd4 <_vfiprintf_r>:
 8006dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd8:	460d      	mov	r5, r1
 8006dda:	b09d      	sub	sp, #116	@ 0x74
 8006ddc:	4614      	mov	r4, r2
 8006dde:	4698      	mov	r8, r3
 8006de0:	4606      	mov	r6, r0
 8006de2:	b118      	cbz	r0, 8006dec <_vfiprintf_r+0x18>
 8006de4:	6a03      	ldr	r3, [r0, #32]
 8006de6:	b90b      	cbnz	r3, 8006dec <_vfiprintf_r+0x18>
 8006de8:	f7ff fd58 	bl	800689c <__sinit>
 8006dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dee:	07d9      	lsls	r1, r3, #31
 8006df0:	d405      	bmi.n	8006dfe <_vfiprintf_r+0x2a>
 8006df2:	89ab      	ldrh	r3, [r5, #12]
 8006df4:	059a      	lsls	r2, r3, #22
 8006df6:	d402      	bmi.n	8006dfe <_vfiprintf_r+0x2a>
 8006df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dfa:	f7ff ff56 	bl	8006caa <__retarget_lock_acquire_recursive>
 8006dfe:	89ab      	ldrh	r3, [r5, #12]
 8006e00:	071b      	lsls	r3, r3, #28
 8006e02:	d501      	bpl.n	8006e08 <_vfiprintf_r+0x34>
 8006e04:	692b      	ldr	r3, [r5, #16]
 8006e06:	b99b      	cbnz	r3, 8006e30 <_vfiprintf_r+0x5c>
 8006e08:	4629      	mov	r1, r5
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f7ff fe6e 	bl	8006aec <__swsetup_r>
 8006e10:	b170      	cbz	r0, 8006e30 <_vfiprintf_r+0x5c>
 8006e12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e14:	07dc      	lsls	r4, r3, #31
 8006e16:	d504      	bpl.n	8006e22 <_vfiprintf_r+0x4e>
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	b01d      	add	sp, #116	@ 0x74
 8006e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e22:	89ab      	ldrh	r3, [r5, #12]
 8006e24:	0598      	lsls	r0, r3, #22
 8006e26:	d4f7      	bmi.n	8006e18 <_vfiprintf_r+0x44>
 8006e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e2a:	f7ff ff3f 	bl	8006cac <__retarget_lock_release_recursive>
 8006e2e:	e7f3      	b.n	8006e18 <_vfiprintf_r+0x44>
 8006e30:	2300      	movs	r3, #0
 8006e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e34:	2320      	movs	r3, #32
 8006e36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e3e:	2330      	movs	r3, #48	@ 0x30
 8006e40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006ff0 <_vfiprintf_r+0x21c>
 8006e44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e48:	f04f 0901 	mov.w	r9, #1
 8006e4c:	4623      	mov	r3, r4
 8006e4e:	469a      	mov	sl, r3
 8006e50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e54:	b10a      	cbz	r2, 8006e5a <_vfiprintf_r+0x86>
 8006e56:	2a25      	cmp	r2, #37	@ 0x25
 8006e58:	d1f9      	bne.n	8006e4e <_vfiprintf_r+0x7a>
 8006e5a:	ebba 0b04 	subs.w	fp, sl, r4
 8006e5e:	d00b      	beq.n	8006e78 <_vfiprintf_r+0xa4>
 8006e60:	465b      	mov	r3, fp
 8006e62:	4622      	mov	r2, r4
 8006e64:	4629      	mov	r1, r5
 8006e66:	4630      	mov	r0, r6
 8006e68:	f7ff ffa1 	bl	8006dae <__sfputs_r>
 8006e6c:	3001      	adds	r0, #1
 8006e6e:	f000 80a7 	beq.w	8006fc0 <_vfiprintf_r+0x1ec>
 8006e72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e74:	445a      	add	r2, fp
 8006e76:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e78:	f89a 3000 	ldrb.w	r3, [sl]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 809f 	beq.w	8006fc0 <_vfiprintf_r+0x1ec>
 8006e82:	2300      	movs	r3, #0
 8006e84:	f04f 32ff 	mov.w	r2, #4294967295
 8006e88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e8c:	f10a 0a01 	add.w	sl, sl, #1
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	9307      	str	r3, [sp, #28]
 8006e94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e98:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e9a:	4654      	mov	r4, sl
 8006e9c:	2205      	movs	r2, #5
 8006e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ea2:	4853      	ldr	r0, [pc, #332]	@ (8006ff0 <_vfiprintf_r+0x21c>)
 8006ea4:	f7f9 f994 	bl	80001d0 <memchr>
 8006ea8:	9a04      	ldr	r2, [sp, #16]
 8006eaa:	b9d8      	cbnz	r0, 8006ee4 <_vfiprintf_r+0x110>
 8006eac:	06d1      	lsls	r1, r2, #27
 8006eae:	bf44      	itt	mi
 8006eb0:	2320      	movmi	r3, #32
 8006eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006eb6:	0713      	lsls	r3, r2, #28
 8006eb8:	bf44      	itt	mi
 8006eba:	232b      	movmi	r3, #43	@ 0x2b
 8006ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ec6:	d015      	beq.n	8006ef4 <_vfiprintf_r+0x120>
 8006ec8:	9a07      	ldr	r2, [sp, #28]
 8006eca:	4654      	mov	r4, sl
 8006ecc:	2000      	movs	r0, #0
 8006ece:	f04f 0c0a 	mov.w	ip, #10
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ed8:	3b30      	subs	r3, #48	@ 0x30
 8006eda:	2b09      	cmp	r3, #9
 8006edc:	d94b      	bls.n	8006f76 <_vfiprintf_r+0x1a2>
 8006ede:	b1b0      	cbz	r0, 8006f0e <_vfiprintf_r+0x13a>
 8006ee0:	9207      	str	r2, [sp, #28]
 8006ee2:	e014      	b.n	8006f0e <_vfiprintf_r+0x13a>
 8006ee4:	eba0 0308 	sub.w	r3, r0, r8
 8006ee8:	fa09 f303 	lsl.w	r3, r9, r3
 8006eec:	4313      	orrs	r3, r2
 8006eee:	9304      	str	r3, [sp, #16]
 8006ef0:	46a2      	mov	sl, r4
 8006ef2:	e7d2      	b.n	8006e9a <_vfiprintf_r+0xc6>
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	1d19      	adds	r1, r3, #4
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	9103      	str	r1, [sp, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	bfbb      	ittet	lt
 8006f00:	425b      	neglt	r3, r3
 8006f02:	f042 0202 	orrlt.w	r2, r2, #2
 8006f06:	9307      	strge	r3, [sp, #28]
 8006f08:	9307      	strlt	r3, [sp, #28]
 8006f0a:	bfb8      	it	lt
 8006f0c:	9204      	strlt	r2, [sp, #16]
 8006f0e:	7823      	ldrb	r3, [r4, #0]
 8006f10:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f12:	d10a      	bne.n	8006f2a <_vfiprintf_r+0x156>
 8006f14:	7863      	ldrb	r3, [r4, #1]
 8006f16:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f18:	d132      	bne.n	8006f80 <_vfiprintf_r+0x1ac>
 8006f1a:	9b03      	ldr	r3, [sp, #12]
 8006f1c:	1d1a      	adds	r2, r3, #4
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	9203      	str	r2, [sp, #12]
 8006f22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f26:	3402      	adds	r4, #2
 8006f28:	9305      	str	r3, [sp, #20]
 8006f2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007000 <_vfiprintf_r+0x22c>
 8006f2e:	7821      	ldrb	r1, [r4, #0]
 8006f30:	2203      	movs	r2, #3
 8006f32:	4650      	mov	r0, sl
 8006f34:	f7f9 f94c 	bl	80001d0 <memchr>
 8006f38:	b138      	cbz	r0, 8006f4a <_vfiprintf_r+0x176>
 8006f3a:	9b04      	ldr	r3, [sp, #16]
 8006f3c:	eba0 000a 	sub.w	r0, r0, sl
 8006f40:	2240      	movs	r2, #64	@ 0x40
 8006f42:	4082      	lsls	r2, r0
 8006f44:	4313      	orrs	r3, r2
 8006f46:	3401      	adds	r4, #1
 8006f48:	9304      	str	r3, [sp, #16]
 8006f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f4e:	4829      	ldr	r0, [pc, #164]	@ (8006ff4 <_vfiprintf_r+0x220>)
 8006f50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f54:	2206      	movs	r2, #6
 8006f56:	f7f9 f93b 	bl	80001d0 <memchr>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d03f      	beq.n	8006fde <_vfiprintf_r+0x20a>
 8006f5e:	4b26      	ldr	r3, [pc, #152]	@ (8006ff8 <_vfiprintf_r+0x224>)
 8006f60:	bb1b      	cbnz	r3, 8006faa <_vfiprintf_r+0x1d6>
 8006f62:	9b03      	ldr	r3, [sp, #12]
 8006f64:	3307      	adds	r3, #7
 8006f66:	f023 0307 	bic.w	r3, r3, #7
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	9303      	str	r3, [sp, #12]
 8006f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f70:	443b      	add	r3, r7
 8006f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f74:	e76a      	b.n	8006e4c <_vfiprintf_r+0x78>
 8006f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	2001      	movs	r0, #1
 8006f7e:	e7a8      	b.n	8006ed2 <_vfiprintf_r+0xfe>
 8006f80:	2300      	movs	r3, #0
 8006f82:	3401      	adds	r4, #1
 8006f84:	9305      	str	r3, [sp, #20]
 8006f86:	4619      	mov	r1, r3
 8006f88:	f04f 0c0a 	mov.w	ip, #10
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f92:	3a30      	subs	r2, #48	@ 0x30
 8006f94:	2a09      	cmp	r2, #9
 8006f96:	d903      	bls.n	8006fa0 <_vfiprintf_r+0x1cc>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0c6      	beq.n	8006f2a <_vfiprintf_r+0x156>
 8006f9c:	9105      	str	r1, [sp, #20]
 8006f9e:	e7c4      	b.n	8006f2a <_vfiprintf_r+0x156>
 8006fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e7f0      	b.n	8006f8c <_vfiprintf_r+0x1b8>
 8006faa:	ab03      	add	r3, sp, #12
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	462a      	mov	r2, r5
 8006fb0:	4b12      	ldr	r3, [pc, #72]	@ (8006ffc <_vfiprintf_r+0x228>)
 8006fb2:	a904      	add	r1, sp, #16
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f3af 8000 	nop.w
 8006fba:	4607      	mov	r7, r0
 8006fbc:	1c78      	adds	r0, r7, #1
 8006fbe:	d1d6      	bne.n	8006f6e <_vfiprintf_r+0x19a>
 8006fc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fc2:	07d9      	lsls	r1, r3, #31
 8006fc4:	d405      	bmi.n	8006fd2 <_vfiprintf_r+0x1fe>
 8006fc6:	89ab      	ldrh	r3, [r5, #12]
 8006fc8:	059a      	lsls	r2, r3, #22
 8006fca:	d402      	bmi.n	8006fd2 <_vfiprintf_r+0x1fe>
 8006fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fce:	f7ff fe6d 	bl	8006cac <__retarget_lock_release_recursive>
 8006fd2:	89ab      	ldrh	r3, [r5, #12]
 8006fd4:	065b      	lsls	r3, r3, #25
 8006fd6:	f53f af1f 	bmi.w	8006e18 <_vfiprintf_r+0x44>
 8006fda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fdc:	e71e      	b.n	8006e1c <_vfiprintf_r+0x48>
 8006fde:	ab03      	add	r3, sp, #12
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	462a      	mov	r2, r5
 8006fe4:	4b05      	ldr	r3, [pc, #20]	@ (8006ffc <_vfiprintf_r+0x228>)
 8006fe6:	a904      	add	r1, sp, #16
 8006fe8:	4630      	mov	r0, r6
 8006fea:	f000 f879 	bl	80070e0 <_printf_i>
 8006fee:	e7e4      	b.n	8006fba <_vfiprintf_r+0x1e6>
 8006ff0:	0800b57b 	.word	0x0800b57b
 8006ff4:	0800b585 	.word	0x0800b585
 8006ff8:	00000000 	.word	0x00000000
 8006ffc:	08006daf 	.word	0x08006daf
 8007000:	0800b581 	.word	0x0800b581

08007004 <_printf_common>:
 8007004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007008:	4616      	mov	r6, r2
 800700a:	4698      	mov	r8, r3
 800700c:	688a      	ldr	r2, [r1, #8]
 800700e:	690b      	ldr	r3, [r1, #16]
 8007010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007014:	4293      	cmp	r3, r2
 8007016:	bfb8      	it	lt
 8007018:	4613      	movlt	r3, r2
 800701a:	6033      	str	r3, [r6, #0]
 800701c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007020:	4607      	mov	r7, r0
 8007022:	460c      	mov	r4, r1
 8007024:	b10a      	cbz	r2, 800702a <_printf_common+0x26>
 8007026:	3301      	adds	r3, #1
 8007028:	6033      	str	r3, [r6, #0]
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	0699      	lsls	r1, r3, #26
 800702e:	bf42      	ittt	mi
 8007030:	6833      	ldrmi	r3, [r6, #0]
 8007032:	3302      	addmi	r3, #2
 8007034:	6033      	strmi	r3, [r6, #0]
 8007036:	6825      	ldr	r5, [r4, #0]
 8007038:	f015 0506 	ands.w	r5, r5, #6
 800703c:	d106      	bne.n	800704c <_printf_common+0x48>
 800703e:	f104 0a19 	add.w	sl, r4, #25
 8007042:	68e3      	ldr	r3, [r4, #12]
 8007044:	6832      	ldr	r2, [r6, #0]
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	42ab      	cmp	r3, r5
 800704a:	dc26      	bgt.n	800709a <_printf_common+0x96>
 800704c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	3b00      	subs	r3, #0
 8007054:	bf18      	it	ne
 8007056:	2301      	movne	r3, #1
 8007058:	0692      	lsls	r2, r2, #26
 800705a:	d42b      	bmi.n	80070b4 <_printf_common+0xb0>
 800705c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007060:	4641      	mov	r1, r8
 8007062:	4638      	mov	r0, r7
 8007064:	47c8      	blx	r9
 8007066:	3001      	adds	r0, #1
 8007068:	d01e      	beq.n	80070a8 <_printf_common+0xa4>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	6922      	ldr	r2, [r4, #16]
 800706e:	f003 0306 	and.w	r3, r3, #6
 8007072:	2b04      	cmp	r3, #4
 8007074:	bf02      	ittt	eq
 8007076:	68e5      	ldreq	r5, [r4, #12]
 8007078:	6833      	ldreq	r3, [r6, #0]
 800707a:	1aed      	subeq	r5, r5, r3
 800707c:	68a3      	ldr	r3, [r4, #8]
 800707e:	bf0c      	ite	eq
 8007080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007084:	2500      	movne	r5, #0
 8007086:	4293      	cmp	r3, r2
 8007088:	bfc4      	itt	gt
 800708a:	1a9b      	subgt	r3, r3, r2
 800708c:	18ed      	addgt	r5, r5, r3
 800708e:	2600      	movs	r6, #0
 8007090:	341a      	adds	r4, #26
 8007092:	42b5      	cmp	r5, r6
 8007094:	d11a      	bne.n	80070cc <_printf_common+0xc8>
 8007096:	2000      	movs	r0, #0
 8007098:	e008      	b.n	80070ac <_printf_common+0xa8>
 800709a:	2301      	movs	r3, #1
 800709c:	4652      	mov	r2, sl
 800709e:	4641      	mov	r1, r8
 80070a0:	4638      	mov	r0, r7
 80070a2:	47c8      	blx	r9
 80070a4:	3001      	adds	r0, #1
 80070a6:	d103      	bne.n	80070b0 <_printf_common+0xac>
 80070a8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b0:	3501      	adds	r5, #1
 80070b2:	e7c6      	b.n	8007042 <_printf_common+0x3e>
 80070b4:	18e1      	adds	r1, r4, r3
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	2030      	movs	r0, #48	@ 0x30
 80070ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070be:	4422      	add	r2, r4
 80070c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070c8:	3302      	adds	r3, #2
 80070ca:	e7c7      	b.n	800705c <_printf_common+0x58>
 80070cc:	2301      	movs	r3, #1
 80070ce:	4622      	mov	r2, r4
 80070d0:	4641      	mov	r1, r8
 80070d2:	4638      	mov	r0, r7
 80070d4:	47c8      	blx	r9
 80070d6:	3001      	adds	r0, #1
 80070d8:	d0e6      	beq.n	80070a8 <_printf_common+0xa4>
 80070da:	3601      	adds	r6, #1
 80070dc:	e7d9      	b.n	8007092 <_printf_common+0x8e>
	...

080070e0 <_printf_i>:
 80070e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070e4:	7e0f      	ldrb	r7, [r1, #24]
 80070e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070e8:	2f78      	cmp	r7, #120	@ 0x78
 80070ea:	4691      	mov	r9, r2
 80070ec:	4680      	mov	r8, r0
 80070ee:	460c      	mov	r4, r1
 80070f0:	469a      	mov	sl, r3
 80070f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070f6:	d807      	bhi.n	8007108 <_printf_i+0x28>
 80070f8:	2f62      	cmp	r7, #98	@ 0x62
 80070fa:	d80a      	bhi.n	8007112 <_printf_i+0x32>
 80070fc:	2f00      	cmp	r7, #0
 80070fe:	f000 80d2 	beq.w	80072a6 <_printf_i+0x1c6>
 8007102:	2f58      	cmp	r7, #88	@ 0x58
 8007104:	f000 80b9 	beq.w	800727a <_printf_i+0x19a>
 8007108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800710c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007110:	e03a      	b.n	8007188 <_printf_i+0xa8>
 8007112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007116:	2b15      	cmp	r3, #21
 8007118:	d8f6      	bhi.n	8007108 <_printf_i+0x28>
 800711a:	a101      	add	r1, pc, #4	@ (adr r1, 8007120 <_printf_i+0x40>)
 800711c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007120:	08007179 	.word	0x08007179
 8007124:	0800718d 	.word	0x0800718d
 8007128:	08007109 	.word	0x08007109
 800712c:	08007109 	.word	0x08007109
 8007130:	08007109 	.word	0x08007109
 8007134:	08007109 	.word	0x08007109
 8007138:	0800718d 	.word	0x0800718d
 800713c:	08007109 	.word	0x08007109
 8007140:	08007109 	.word	0x08007109
 8007144:	08007109 	.word	0x08007109
 8007148:	08007109 	.word	0x08007109
 800714c:	0800728d 	.word	0x0800728d
 8007150:	080071b7 	.word	0x080071b7
 8007154:	08007247 	.word	0x08007247
 8007158:	08007109 	.word	0x08007109
 800715c:	08007109 	.word	0x08007109
 8007160:	080072af 	.word	0x080072af
 8007164:	08007109 	.word	0x08007109
 8007168:	080071b7 	.word	0x080071b7
 800716c:	08007109 	.word	0x08007109
 8007170:	08007109 	.word	0x08007109
 8007174:	0800724f 	.word	0x0800724f
 8007178:	6833      	ldr	r3, [r6, #0]
 800717a:	1d1a      	adds	r2, r3, #4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6032      	str	r2, [r6, #0]
 8007180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007188:	2301      	movs	r3, #1
 800718a:	e09d      	b.n	80072c8 <_printf_i+0x1e8>
 800718c:	6833      	ldr	r3, [r6, #0]
 800718e:	6820      	ldr	r0, [r4, #0]
 8007190:	1d19      	adds	r1, r3, #4
 8007192:	6031      	str	r1, [r6, #0]
 8007194:	0606      	lsls	r6, r0, #24
 8007196:	d501      	bpl.n	800719c <_printf_i+0xbc>
 8007198:	681d      	ldr	r5, [r3, #0]
 800719a:	e003      	b.n	80071a4 <_printf_i+0xc4>
 800719c:	0645      	lsls	r5, r0, #25
 800719e:	d5fb      	bpl.n	8007198 <_printf_i+0xb8>
 80071a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071a4:	2d00      	cmp	r5, #0
 80071a6:	da03      	bge.n	80071b0 <_printf_i+0xd0>
 80071a8:	232d      	movs	r3, #45	@ 0x2d
 80071aa:	426d      	negs	r5, r5
 80071ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071b0:	4859      	ldr	r0, [pc, #356]	@ (8007318 <_printf_i+0x238>)
 80071b2:	230a      	movs	r3, #10
 80071b4:	e011      	b.n	80071da <_printf_i+0xfa>
 80071b6:	6821      	ldr	r1, [r4, #0]
 80071b8:	6833      	ldr	r3, [r6, #0]
 80071ba:	0608      	lsls	r0, r1, #24
 80071bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80071c0:	d402      	bmi.n	80071c8 <_printf_i+0xe8>
 80071c2:	0649      	lsls	r1, r1, #25
 80071c4:	bf48      	it	mi
 80071c6:	b2ad      	uxthmi	r5, r5
 80071c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80071ca:	4853      	ldr	r0, [pc, #332]	@ (8007318 <_printf_i+0x238>)
 80071cc:	6033      	str	r3, [r6, #0]
 80071ce:	bf14      	ite	ne
 80071d0:	230a      	movne	r3, #10
 80071d2:	2308      	moveq	r3, #8
 80071d4:	2100      	movs	r1, #0
 80071d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071da:	6866      	ldr	r6, [r4, #4]
 80071dc:	60a6      	str	r6, [r4, #8]
 80071de:	2e00      	cmp	r6, #0
 80071e0:	bfa2      	ittt	ge
 80071e2:	6821      	ldrge	r1, [r4, #0]
 80071e4:	f021 0104 	bicge.w	r1, r1, #4
 80071e8:	6021      	strge	r1, [r4, #0]
 80071ea:	b90d      	cbnz	r5, 80071f0 <_printf_i+0x110>
 80071ec:	2e00      	cmp	r6, #0
 80071ee:	d04b      	beq.n	8007288 <_printf_i+0x1a8>
 80071f0:	4616      	mov	r6, r2
 80071f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80071f6:	fb03 5711 	mls	r7, r3, r1, r5
 80071fa:	5dc7      	ldrb	r7, [r0, r7]
 80071fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007200:	462f      	mov	r7, r5
 8007202:	42bb      	cmp	r3, r7
 8007204:	460d      	mov	r5, r1
 8007206:	d9f4      	bls.n	80071f2 <_printf_i+0x112>
 8007208:	2b08      	cmp	r3, #8
 800720a:	d10b      	bne.n	8007224 <_printf_i+0x144>
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	07df      	lsls	r7, r3, #31
 8007210:	d508      	bpl.n	8007224 <_printf_i+0x144>
 8007212:	6923      	ldr	r3, [r4, #16]
 8007214:	6861      	ldr	r1, [r4, #4]
 8007216:	4299      	cmp	r1, r3
 8007218:	bfde      	ittt	le
 800721a:	2330      	movle	r3, #48	@ 0x30
 800721c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007220:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007224:	1b92      	subs	r2, r2, r6
 8007226:	6122      	str	r2, [r4, #16]
 8007228:	f8cd a000 	str.w	sl, [sp]
 800722c:	464b      	mov	r3, r9
 800722e:	aa03      	add	r2, sp, #12
 8007230:	4621      	mov	r1, r4
 8007232:	4640      	mov	r0, r8
 8007234:	f7ff fee6 	bl	8007004 <_printf_common>
 8007238:	3001      	adds	r0, #1
 800723a:	d14a      	bne.n	80072d2 <_printf_i+0x1f2>
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	b004      	add	sp, #16
 8007242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	f043 0320 	orr.w	r3, r3, #32
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	4833      	ldr	r0, [pc, #204]	@ (800731c <_printf_i+0x23c>)
 8007250:	2778      	movs	r7, #120	@ 0x78
 8007252:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	6831      	ldr	r1, [r6, #0]
 800725a:	061f      	lsls	r7, r3, #24
 800725c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007260:	d402      	bmi.n	8007268 <_printf_i+0x188>
 8007262:	065f      	lsls	r7, r3, #25
 8007264:	bf48      	it	mi
 8007266:	b2ad      	uxthmi	r5, r5
 8007268:	6031      	str	r1, [r6, #0]
 800726a:	07d9      	lsls	r1, r3, #31
 800726c:	bf44      	itt	mi
 800726e:	f043 0320 	orrmi.w	r3, r3, #32
 8007272:	6023      	strmi	r3, [r4, #0]
 8007274:	b11d      	cbz	r5, 800727e <_printf_i+0x19e>
 8007276:	2310      	movs	r3, #16
 8007278:	e7ac      	b.n	80071d4 <_printf_i+0xf4>
 800727a:	4827      	ldr	r0, [pc, #156]	@ (8007318 <_printf_i+0x238>)
 800727c:	e7e9      	b.n	8007252 <_printf_i+0x172>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	f023 0320 	bic.w	r3, r3, #32
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	e7f6      	b.n	8007276 <_printf_i+0x196>
 8007288:	4616      	mov	r6, r2
 800728a:	e7bd      	b.n	8007208 <_printf_i+0x128>
 800728c:	6833      	ldr	r3, [r6, #0]
 800728e:	6825      	ldr	r5, [r4, #0]
 8007290:	6961      	ldr	r1, [r4, #20]
 8007292:	1d18      	adds	r0, r3, #4
 8007294:	6030      	str	r0, [r6, #0]
 8007296:	062e      	lsls	r6, r5, #24
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	d501      	bpl.n	80072a0 <_printf_i+0x1c0>
 800729c:	6019      	str	r1, [r3, #0]
 800729e:	e002      	b.n	80072a6 <_printf_i+0x1c6>
 80072a0:	0668      	lsls	r0, r5, #25
 80072a2:	d5fb      	bpl.n	800729c <_printf_i+0x1bc>
 80072a4:	8019      	strh	r1, [r3, #0]
 80072a6:	2300      	movs	r3, #0
 80072a8:	6123      	str	r3, [r4, #16]
 80072aa:	4616      	mov	r6, r2
 80072ac:	e7bc      	b.n	8007228 <_printf_i+0x148>
 80072ae:	6833      	ldr	r3, [r6, #0]
 80072b0:	1d1a      	adds	r2, r3, #4
 80072b2:	6032      	str	r2, [r6, #0]
 80072b4:	681e      	ldr	r6, [r3, #0]
 80072b6:	6862      	ldr	r2, [r4, #4]
 80072b8:	2100      	movs	r1, #0
 80072ba:	4630      	mov	r0, r6
 80072bc:	f7f8 ff88 	bl	80001d0 <memchr>
 80072c0:	b108      	cbz	r0, 80072c6 <_printf_i+0x1e6>
 80072c2:	1b80      	subs	r0, r0, r6
 80072c4:	6060      	str	r0, [r4, #4]
 80072c6:	6863      	ldr	r3, [r4, #4]
 80072c8:	6123      	str	r3, [r4, #16]
 80072ca:	2300      	movs	r3, #0
 80072cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072d0:	e7aa      	b.n	8007228 <_printf_i+0x148>
 80072d2:	6923      	ldr	r3, [r4, #16]
 80072d4:	4632      	mov	r2, r6
 80072d6:	4649      	mov	r1, r9
 80072d8:	4640      	mov	r0, r8
 80072da:	47d0      	blx	sl
 80072dc:	3001      	adds	r0, #1
 80072de:	d0ad      	beq.n	800723c <_printf_i+0x15c>
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	079b      	lsls	r3, r3, #30
 80072e4:	d413      	bmi.n	800730e <_printf_i+0x22e>
 80072e6:	68e0      	ldr	r0, [r4, #12]
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	4298      	cmp	r0, r3
 80072ec:	bfb8      	it	lt
 80072ee:	4618      	movlt	r0, r3
 80072f0:	e7a6      	b.n	8007240 <_printf_i+0x160>
 80072f2:	2301      	movs	r3, #1
 80072f4:	4632      	mov	r2, r6
 80072f6:	4649      	mov	r1, r9
 80072f8:	4640      	mov	r0, r8
 80072fa:	47d0      	blx	sl
 80072fc:	3001      	adds	r0, #1
 80072fe:	d09d      	beq.n	800723c <_printf_i+0x15c>
 8007300:	3501      	adds	r5, #1
 8007302:	68e3      	ldr	r3, [r4, #12]
 8007304:	9903      	ldr	r1, [sp, #12]
 8007306:	1a5b      	subs	r3, r3, r1
 8007308:	42ab      	cmp	r3, r5
 800730a:	dcf2      	bgt.n	80072f2 <_printf_i+0x212>
 800730c:	e7eb      	b.n	80072e6 <_printf_i+0x206>
 800730e:	2500      	movs	r5, #0
 8007310:	f104 0619 	add.w	r6, r4, #25
 8007314:	e7f5      	b.n	8007302 <_printf_i+0x222>
 8007316:	bf00      	nop
 8007318:	0800b58c 	.word	0x0800b58c
 800731c:	0800b59d 	.word	0x0800b59d

08007320 <__sflush_r>:
 8007320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007328:	0716      	lsls	r6, r2, #28
 800732a:	4605      	mov	r5, r0
 800732c:	460c      	mov	r4, r1
 800732e:	d454      	bmi.n	80073da <__sflush_r+0xba>
 8007330:	684b      	ldr	r3, [r1, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	dc02      	bgt.n	800733c <__sflush_r+0x1c>
 8007336:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007338:	2b00      	cmp	r3, #0
 800733a:	dd48      	ble.n	80073ce <__sflush_r+0xae>
 800733c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800733e:	2e00      	cmp	r6, #0
 8007340:	d045      	beq.n	80073ce <__sflush_r+0xae>
 8007342:	2300      	movs	r3, #0
 8007344:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007348:	682f      	ldr	r7, [r5, #0]
 800734a:	6a21      	ldr	r1, [r4, #32]
 800734c:	602b      	str	r3, [r5, #0]
 800734e:	d030      	beq.n	80073b2 <__sflush_r+0x92>
 8007350:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	0759      	lsls	r1, r3, #29
 8007356:	d505      	bpl.n	8007364 <__sflush_r+0x44>
 8007358:	6863      	ldr	r3, [r4, #4]
 800735a:	1ad2      	subs	r2, r2, r3
 800735c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800735e:	b10b      	cbz	r3, 8007364 <__sflush_r+0x44>
 8007360:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007362:	1ad2      	subs	r2, r2, r3
 8007364:	2300      	movs	r3, #0
 8007366:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007368:	6a21      	ldr	r1, [r4, #32]
 800736a:	4628      	mov	r0, r5
 800736c:	47b0      	blx	r6
 800736e:	1c43      	adds	r3, r0, #1
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	d106      	bne.n	8007382 <__sflush_r+0x62>
 8007374:	6829      	ldr	r1, [r5, #0]
 8007376:	291d      	cmp	r1, #29
 8007378:	d82b      	bhi.n	80073d2 <__sflush_r+0xb2>
 800737a:	4a2a      	ldr	r2, [pc, #168]	@ (8007424 <__sflush_r+0x104>)
 800737c:	410a      	asrs	r2, r1
 800737e:	07d6      	lsls	r6, r2, #31
 8007380:	d427      	bmi.n	80073d2 <__sflush_r+0xb2>
 8007382:	2200      	movs	r2, #0
 8007384:	6062      	str	r2, [r4, #4]
 8007386:	04d9      	lsls	r1, r3, #19
 8007388:	6922      	ldr	r2, [r4, #16]
 800738a:	6022      	str	r2, [r4, #0]
 800738c:	d504      	bpl.n	8007398 <__sflush_r+0x78>
 800738e:	1c42      	adds	r2, r0, #1
 8007390:	d101      	bne.n	8007396 <__sflush_r+0x76>
 8007392:	682b      	ldr	r3, [r5, #0]
 8007394:	b903      	cbnz	r3, 8007398 <__sflush_r+0x78>
 8007396:	6560      	str	r0, [r4, #84]	@ 0x54
 8007398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800739a:	602f      	str	r7, [r5, #0]
 800739c:	b1b9      	cbz	r1, 80073ce <__sflush_r+0xae>
 800739e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073a2:	4299      	cmp	r1, r3
 80073a4:	d002      	beq.n	80073ac <__sflush_r+0x8c>
 80073a6:	4628      	mov	r0, r5
 80073a8:	f7ff fca0 	bl	8006cec <_free_r>
 80073ac:	2300      	movs	r3, #0
 80073ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80073b0:	e00d      	b.n	80073ce <__sflush_r+0xae>
 80073b2:	2301      	movs	r3, #1
 80073b4:	4628      	mov	r0, r5
 80073b6:	47b0      	blx	r6
 80073b8:	4602      	mov	r2, r0
 80073ba:	1c50      	adds	r0, r2, #1
 80073bc:	d1c9      	bne.n	8007352 <__sflush_r+0x32>
 80073be:	682b      	ldr	r3, [r5, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d0c6      	beq.n	8007352 <__sflush_r+0x32>
 80073c4:	2b1d      	cmp	r3, #29
 80073c6:	d001      	beq.n	80073cc <__sflush_r+0xac>
 80073c8:	2b16      	cmp	r3, #22
 80073ca:	d11e      	bne.n	800740a <__sflush_r+0xea>
 80073cc:	602f      	str	r7, [r5, #0]
 80073ce:	2000      	movs	r0, #0
 80073d0:	e022      	b.n	8007418 <__sflush_r+0xf8>
 80073d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073d6:	b21b      	sxth	r3, r3
 80073d8:	e01b      	b.n	8007412 <__sflush_r+0xf2>
 80073da:	690f      	ldr	r7, [r1, #16]
 80073dc:	2f00      	cmp	r7, #0
 80073de:	d0f6      	beq.n	80073ce <__sflush_r+0xae>
 80073e0:	0793      	lsls	r3, r2, #30
 80073e2:	680e      	ldr	r6, [r1, #0]
 80073e4:	bf08      	it	eq
 80073e6:	694b      	ldreq	r3, [r1, #20]
 80073e8:	600f      	str	r7, [r1, #0]
 80073ea:	bf18      	it	ne
 80073ec:	2300      	movne	r3, #0
 80073ee:	eba6 0807 	sub.w	r8, r6, r7
 80073f2:	608b      	str	r3, [r1, #8]
 80073f4:	f1b8 0f00 	cmp.w	r8, #0
 80073f8:	dde9      	ble.n	80073ce <__sflush_r+0xae>
 80073fa:	6a21      	ldr	r1, [r4, #32]
 80073fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80073fe:	4643      	mov	r3, r8
 8007400:	463a      	mov	r2, r7
 8007402:	4628      	mov	r0, r5
 8007404:	47b0      	blx	r6
 8007406:	2800      	cmp	r0, #0
 8007408:	dc08      	bgt.n	800741c <__sflush_r+0xfc>
 800740a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800740e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007412:	81a3      	strh	r3, [r4, #12]
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800741c:	4407      	add	r7, r0
 800741e:	eba8 0800 	sub.w	r8, r8, r0
 8007422:	e7e7      	b.n	80073f4 <__sflush_r+0xd4>
 8007424:	dfbffffe 	.word	0xdfbffffe

08007428 <_fflush_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	690b      	ldr	r3, [r1, #16]
 800742c:	4605      	mov	r5, r0
 800742e:	460c      	mov	r4, r1
 8007430:	b913      	cbnz	r3, 8007438 <_fflush_r+0x10>
 8007432:	2500      	movs	r5, #0
 8007434:	4628      	mov	r0, r5
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	b118      	cbz	r0, 8007442 <_fflush_r+0x1a>
 800743a:	6a03      	ldr	r3, [r0, #32]
 800743c:	b90b      	cbnz	r3, 8007442 <_fflush_r+0x1a>
 800743e:	f7ff fa2d 	bl	800689c <__sinit>
 8007442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0f3      	beq.n	8007432 <_fflush_r+0xa>
 800744a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800744c:	07d0      	lsls	r0, r2, #31
 800744e:	d404      	bmi.n	800745a <_fflush_r+0x32>
 8007450:	0599      	lsls	r1, r3, #22
 8007452:	d402      	bmi.n	800745a <_fflush_r+0x32>
 8007454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007456:	f7ff fc28 	bl	8006caa <__retarget_lock_acquire_recursive>
 800745a:	4628      	mov	r0, r5
 800745c:	4621      	mov	r1, r4
 800745e:	f7ff ff5f 	bl	8007320 <__sflush_r>
 8007462:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007464:	07da      	lsls	r2, r3, #31
 8007466:	4605      	mov	r5, r0
 8007468:	d4e4      	bmi.n	8007434 <_fflush_r+0xc>
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	059b      	lsls	r3, r3, #22
 800746e:	d4e1      	bmi.n	8007434 <_fflush_r+0xc>
 8007470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007472:	f7ff fc1b 	bl	8006cac <__retarget_lock_release_recursive>
 8007476:	e7dd      	b.n	8007434 <_fflush_r+0xc>

08007478 <fiprintf>:
 8007478:	b40e      	push	{r1, r2, r3}
 800747a:	b503      	push	{r0, r1, lr}
 800747c:	4601      	mov	r1, r0
 800747e:	ab03      	add	r3, sp, #12
 8007480:	4805      	ldr	r0, [pc, #20]	@ (8007498 <fiprintf+0x20>)
 8007482:	f853 2b04 	ldr.w	r2, [r3], #4
 8007486:	6800      	ldr	r0, [r0, #0]
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	f7ff fca3 	bl	8006dd4 <_vfiprintf_r>
 800748e:	b002      	add	sp, #8
 8007490:	f85d eb04 	ldr.w	lr, [sp], #4
 8007494:	b003      	add	sp, #12
 8007496:	4770      	bx	lr
 8007498:	200004c0 	.word	0x200004c0

0800749c <__swhatbuf_r>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	460c      	mov	r4, r1
 80074a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a4:	2900      	cmp	r1, #0
 80074a6:	b096      	sub	sp, #88	@ 0x58
 80074a8:	4615      	mov	r5, r2
 80074aa:	461e      	mov	r6, r3
 80074ac:	da0d      	bge.n	80074ca <__swhatbuf_r+0x2e>
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80074b4:	f04f 0100 	mov.w	r1, #0
 80074b8:	bf14      	ite	ne
 80074ba:	2340      	movne	r3, #64	@ 0x40
 80074bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80074c0:	2000      	movs	r0, #0
 80074c2:	6031      	str	r1, [r6, #0]
 80074c4:	602b      	str	r3, [r5, #0]
 80074c6:	b016      	add	sp, #88	@ 0x58
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
 80074ca:	466a      	mov	r2, sp
 80074cc:	f000 f848 	bl	8007560 <_fstat_r>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	dbec      	blt.n	80074ae <__swhatbuf_r+0x12>
 80074d4:	9901      	ldr	r1, [sp, #4]
 80074d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80074da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80074de:	4259      	negs	r1, r3
 80074e0:	4159      	adcs	r1, r3
 80074e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074e6:	e7eb      	b.n	80074c0 <__swhatbuf_r+0x24>

080074e8 <__smakebuf_r>:
 80074e8:	898b      	ldrh	r3, [r1, #12]
 80074ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ec:	079d      	lsls	r5, r3, #30
 80074ee:	4606      	mov	r6, r0
 80074f0:	460c      	mov	r4, r1
 80074f2:	d507      	bpl.n	8007504 <__smakebuf_r+0x1c>
 80074f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	6123      	str	r3, [r4, #16]
 80074fc:	2301      	movs	r3, #1
 80074fe:	6163      	str	r3, [r4, #20]
 8007500:	b003      	add	sp, #12
 8007502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007504:	ab01      	add	r3, sp, #4
 8007506:	466a      	mov	r2, sp
 8007508:	f7ff ffc8 	bl	800749c <__swhatbuf_r>
 800750c:	9f00      	ldr	r7, [sp, #0]
 800750e:	4605      	mov	r5, r0
 8007510:	4639      	mov	r1, r7
 8007512:	4630      	mov	r0, r6
 8007514:	f7ff f86c 	bl	80065f0 <_malloc_r>
 8007518:	b948      	cbnz	r0, 800752e <__smakebuf_r+0x46>
 800751a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751e:	059a      	lsls	r2, r3, #22
 8007520:	d4ee      	bmi.n	8007500 <__smakebuf_r+0x18>
 8007522:	f023 0303 	bic.w	r3, r3, #3
 8007526:	f043 0302 	orr.w	r3, r3, #2
 800752a:	81a3      	strh	r3, [r4, #12]
 800752c:	e7e2      	b.n	80074f4 <__smakebuf_r+0xc>
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	6020      	str	r0, [r4, #0]
 8007532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007536:	81a3      	strh	r3, [r4, #12]
 8007538:	9b01      	ldr	r3, [sp, #4]
 800753a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800753e:	b15b      	cbz	r3, 8007558 <__smakebuf_r+0x70>
 8007540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007544:	4630      	mov	r0, r6
 8007546:	f000 f81d 	bl	8007584 <_isatty_r>
 800754a:	b128      	cbz	r0, 8007558 <__smakebuf_r+0x70>
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	f023 0303 	bic.w	r3, r3, #3
 8007552:	f043 0301 	orr.w	r3, r3, #1
 8007556:	81a3      	strh	r3, [r4, #12]
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	431d      	orrs	r5, r3
 800755c:	81a5      	strh	r5, [r4, #12]
 800755e:	e7cf      	b.n	8007500 <__smakebuf_r+0x18>

08007560 <_fstat_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d07      	ldr	r5, [pc, #28]	@ (8007580 <_fstat_r+0x20>)
 8007564:	2300      	movs	r3, #0
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	4611      	mov	r1, r2
 800756c:	602b      	str	r3, [r5, #0]
 800756e:	f000 f86d 	bl	800764c <_fstat>
 8007572:	1c43      	adds	r3, r0, #1
 8007574:	d102      	bne.n	800757c <_fstat_r+0x1c>
 8007576:	682b      	ldr	r3, [r5, #0]
 8007578:	b103      	cbz	r3, 800757c <_fstat_r+0x1c>
 800757a:	6023      	str	r3, [r4, #0]
 800757c:	bd38      	pop	{r3, r4, r5, pc}
 800757e:	bf00      	nop
 8007580:	2000af7c 	.word	0x2000af7c

08007584 <_isatty_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4d06      	ldr	r5, [pc, #24]	@ (80075a0 <_isatty_r+0x1c>)
 8007588:	2300      	movs	r3, #0
 800758a:	4604      	mov	r4, r0
 800758c:	4608      	mov	r0, r1
 800758e:	602b      	str	r3, [r5, #0]
 8007590:	f000 f86c 	bl	800766c <_isatty>
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	d102      	bne.n	800759e <_isatty_r+0x1a>
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	b103      	cbz	r3, 800759e <_isatty_r+0x1a>
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	bd38      	pop	{r3, r4, r5, pc}
 80075a0:	2000af7c 	.word	0x2000af7c

080075a4 <abort>:
 80075a4:	b508      	push	{r3, lr}
 80075a6:	2006      	movs	r0, #6
 80075a8:	f000 f82c 	bl	8007604 <raise>
 80075ac:	2001      	movs	r0, #1
 80075ae:	f000 f885 	bl	80076bc <_exit>

080075b2 <_raise_r>:
 80075b2:	291f      	cmp	r1, #31
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4605      	mov	r5, r0
 80075b8:	460c      	mov	r4, r1
 80075ba:	d904      	bls.n	80075c6 <_raise_r+0x14>
 80075bc:	2316      	movs	r3, #22
 80075be:	6003      	str	r3, [r0, #0]
 80075c0:	f04f 30ff 	mov.w	r0, #4294967295
 80075c4:	bd38      	pop	{r3, r4, r5, pc}
 80075c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80075c8:	b112      	cbz	r2, 80075d0 <_raise_r+0x1e>
 80075ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075ce:	b94b      	cbnz	r3, 80075e4 <_raise_r+0x32>
 80075d0:	4628      	mov	r0, r5
 80075d2:	f000 f831 	bl	8007638 <_getpid_r>
 80075d6:	4622      	mov	r2, r4
 80075d8:	4601      	mov	r1, r0
 80075da:	4628      	mov	r0, r5
 80075dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075e0:	f000 b818 	b.w	8007614 <_kill_r>
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d00a      	beq.n	80075fe <_raise_r+0x4c>
 80075e8:	1c59      	adds	r1, r3, #1
 80075ea:	d103      	bne.n	80075f4 <_raise_r+0x42>
 80075ec:	2316      	movs	r3, #22
 80075ee:	6003      	str	r3, [r0, #0]
 80075f0:	2001      	movs	r0, #1
 80075f2:	e7e7      	b.n	80075c4 <_raise_r+0x12>
 80075f4:	2100      	movs	r1, #0
 80075f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80075fa:	4620      	mov	r0, r4
 80075fc:	4798      	blx	r3
 80075fe:	2000      	movs	r0, #0
 8007600:	e7e0      	b.n	80075c4 <_raise_r+0x12>
	...

08007604 <raise>:
 8007604:	4b02      	ldr	r3, [pc, #8]	@ (8007610 <raise+0xc>)
 8007606:	4601      	mov	r1, r0
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	f7ff bfd2 	b.w	80075b2 <_raise_r>
 800760e:	bf00      	nop
 8007610:	200004c0 	.word	0x200004c0

08007614 <_kill_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4d07      	ldr	r5, [pc, #28]	@ (8007634 <_kill_r+0x20>)
 8007618:	2300      	movs	r3, #0
 800761a:	4604      	mov	r4, r0
 800761c:	4608      	mov	r0, r1
 800761e:	4611      	mov	r1, r2
 8007620:	602b      	str	r3, [r5, #0]
 8007622:	f000 f82b 	bl	800767c <_kill>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d102      	bne.n	8007630 <_kill_r+0x1c>
 800762a:	682b      	ldr	r3, [r5, #0]
 800762c:	b103      	cbz	r3, 8007630 <_kill_r+0x1c>
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	bf00      	nop
 8007634:	2000af7c 	.word	0x2000af7c

08007638 <_getpid_r>:
 8007638:	f000 b810 	b.w	800765c <_getpid>

0800763c <_close>:
 800763c:	4b02      	ldr	r3, [pc, #8]	@ (8007648 <_close+0xc>)
 800763e:	2258      	movs	r2, #88	@ 0x58
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	f04f 30ff 	mov.w	r0, #4294967295
 8007646:	4770      	bx	lr
 8007648:	2000af7c 	.word	0x2000af7c

0800764c <_fstat>:
 800764c:	4b02      	ldr	r3, [pc, #8]	@ (8007658 <_fstat+0xc>)
 800764e:	2258      	movs	r2, #88	@ 0x58
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	f04f 30ff 	mov.w	r0, #4294967295
 8007656:	4770      	bx	lr
 8007658:	2000af7c 	.word	0x2000af7c

0800765c <_getpid>:
 800765c:	4b02      	ldr	r3, [pc, #8]	@ (8007668 <_getpid+0xc>)
 800765e:	2258      	movs	r2, #88	@ 0x58
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	f04f 30ff 	mov.w	r0, #4294967295
 8007666:	4770      	bx	lr
 8007668:	2000af7c 	.word	0x2000af7c

0800766c <_isatty>:
 800766c:	4b02      	ldr	r3, [pc, #8]	@ (8007678 <_isatty+0xc>)
 800766e:	2258      	movs	r2, #88	@ 0x58
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	2000      	movs	r0, #0
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	2000af7c 	.word	0x2000af7c

0800767c <_kill>:
 800767c:	4b02      	ldr	r3, [pc, #8]	@ (8007688 <_kill+0xc>)
 800767e:	2258      	movs	r2, #88	@ 0x58
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	f04f 30ff 	mov.w	r0, #4294967295
 8007686:	4770      	bx	lr
 8007688:	2000af7c 	.word	0x2000af7c

0800768c <_lseek>:
 800768c:	4b02      	ldr	r3, [pc, #8]	@ (8007698 <_lseek+0xc>)
 800768e:	2258      	movs	r2, #88	@ 0x58
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	f04f 30ff 	mov.w	r0, #4294967295
 8007696:	4770      	bx	lr
 8007698:	2000af7c 	.word	0x2000af7c

0800769c <_read>:
 800769c:	4b02      	ldr	r3, [pc, #8]	@ (80076a8 <_read+0xc>)
 800769e:	2258      	movs	r2, #88	@ 0x58
 80076a0:	601a      	str	r2, [r3, #0]
 80076a2:	f04f 30ff 	mov.w	r0, #4294967295
 80076a6:	4770      	bx	lr
 80076a8:	2000af7c 	.word	0x2000af7c

080076ac <_write>:
 80076ac:	4b02      	ldr	r3, [pc, #8]	@ (80076b8 <_write+0xc>)
 80076ae:	2258      	movs	r2, #88	@ 0x58
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	f04f 30ff 	mov.w	r0, #4294967295
 80076b6:	4770      	bx	lr
 80076b8:	2000af7c 	.word	0x2000af7c

080076bc <_exit>:
 80076bc:	e7fe      	b.n	80076bc <_exit>
	...

080076c0 <_init>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	bf00      	nop
 80076c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c6:	bc08      	pop	{r3}
 80076c8:	469e      	mov	lr, r3
 80076ca:	4770      	bx	lr

080076cc <_fini>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr
